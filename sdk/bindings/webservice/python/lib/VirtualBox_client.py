##################################################
# file: VirtualBox_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /usr/bin/wsdl2py -b /home/vbox/tinderbox/4.1-sdk/out/linux.amd64/release/bin/sdk/bindings/webservice/vboxwebService.wsdl
# 
##################################################

from VirtualBox_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class vboxServiceLocator:
    vboxServicePort_address = "http://localhost:18083/"
    def getvboxServicePortAddress(self):
        return vboxServiceLocator.vboxServicePort_address
    def getvboxServicePort(self, url=None, **kw):
        return vboxBindingSOAP(url or vboxServiceLocator.vboxServicePort_address, **kw)

# Methods
class vboxBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: IVirtualBoxErrorInfo_getResultCode
    def IVirtualBoxErrorInfo_getResultCode(self, request, **kw):
        if isinstance(request, IVirtualBoxErrorInfo_getResultCodeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBoxErrorInfo_getResultCodeResultMsg.typecode)
        return response

    # op: IVirtualBoxErrorInfo_getInterfaceID
    def IVirtualBoxErrorInfo_getInterfaceID(self, request, **kw):
        if isinstance(request, IVirtualBoxErrorInfo_getInterfaceIDRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBoxErrorInfo_getInterfaceIDResultMsg.typecode)
        return response

    # op: IVirtualBoxErrorInfo_getComponent
    def IVirtualBoxErrorInfo_getComponent(self, request, **kw):
        if isinstance(request, IVirtualBoxErrorInfo_getComponentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBoxErrorInfo_getComponentResultMsg.typecode)
        return response

    # op: IVirtualBoxErrorInfo_getText
    def IVirtualBoxErrorInfo_getText(self, request, **kw):
        if isinstance(request, IVirtualBoxErrorInfo_getTextRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBoxErrorInfo_getTextResultMsg.typecode)
        return response

    # op: IVirtualBoxErrorInfo_getNext
    def IVirtualBoxErrorInfo_getNext(self, request, **kw):
        if isinstance(request, IVirtualBoxErrorInfo_getNextRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBoxErrorInfo_getNextResultMsg.typecode)
        return response

    # op: IDHCPServer_getEnabled
    def IDHCPServer_getEnabled(self, request, **kw):
        if isinstance(request, IDHCPServer_getEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_getEnabledResultMsg.typecode)
        return response

    # op: IDHCPServer_setEnabled
    def IDHCPServer_setEnabled(self, request, **kw):
        if isinstance(request, IDHCPServer_setEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_setEnabledResultMsg.typecode)
        return response

    # op: IDHCPServer_getIPAddress
    def IDHCPServer_getIPAddress(self, request, **kw):
        if isinstance(request, IDHCPServer_getIPAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_getIPAddressResultMsg.typecode)
        return response

    # op: IDHCPServer_getNetworkMask
    def IDHCPServer_getNetworkMask(self, request, **kw):
        if isinstance(request, IDHCPServer_getNetworkMaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_getNetworkMaskResultMsg.typecode)
        return response

    # op: IDHCPServer_getNetworkName
    def IDHCPServer_getNetworkName(self, request, **kw):
        if isinstance(request, IDHCPServer_getNetworkNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_getNetworkNameResultMsg.typecode)
        return response

    # op: IDHCPServer_getLowerIP
    def IDHCPServer_getLowerIP(self, request, **kw):
        if isinstance(request, IDHCPServer_getLowerIPRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_getLowerIPResultMsg.typecode)
        return response

    # op: IDHCPServer_getUpperIP
    def IDHCPServer_getUpperIP(self, request, **kw):
        if isinstance(request, IDHCPServer_getUpperIPRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_getUpperIPResultMsg.typecode)
        return response

    # op: IDHCPServer_setConfiguration
    def IDHCPServer_setConfiguration(self, request, **kw):
        if isinstance(request, IDHCPServer_setConfigurationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_setConfigurationResultMsg.typecode)
        return response

    # op: IDHCPServer_start
    def IDHCPServer_start(self, request, **kw):
        if isinstance(request, IDHCPServer_startRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_startResultMsg.typecode)
        return response

    # op: IDHCPServer_stop
    def IDHCPServer_stop(self, request, **kw):
        if isinstance(request, IDHCPServer_stopRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_stopResultMsg.typecode)
        return response

    # op: IVirtualBox_getVersion
    def IVirtualBox_getVersion(self, request, **kw):
        if isinstance(request, IVirtualBox_getVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getVersionResultMsg.typecode)
        return response

    # op: IVirtualBox_getRevision
    def IVirtualBox_getRevision(self, request, **kw):
        if isinstance(request, IVirtualBox_getRevisionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getRevisionResultMsg.typecode)
        return response

    # op: IVirtualBox_getPackageType
    def IVirtualBox_getPackageType(self, request, **kw):
        if isinstance(request, IVirtualBox_getPackageTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getPackageTypeResultMsg.typecode)
        return response

    # op: IVirtualBox_getAPIVersion
    def IVirtualBox_getAPIVersion(self, request, **kw):
        if isinstance(request, IVirtualBox_getAPIVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getAPIVersionResultMsg.typecode)
        return response

    # op: IVirtualBox_getHomeFolder
    def IVirtualBox_getHomeFolder(self, request, **kw):
        if isinstance(request, IVirtualBox_getHomeFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getHomeFolderResultMsg.typecode)
        return response

    # op: IVirtualBox_getSettingsFilePath
    def IVirtualBox_getSettingsFilePath(self, request, **kw):
        if isinstance(request, IVirtualBox_getSettingsFilePathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getSettingsFilePathResultMsg.typecode)
        return response

    # op: IVirtualBox_getHost
    def IVirtualBox_getHost(self, request, **kw):
        if isinstance(request, IVirtualBox_getHostRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getHostResultMsg.typecode)
        return response

    # op: IVirtualBox_getSystemProperties
    def IVirtualBox_getSystemProperties(self, request, **kw):
        if isinstance(request, IVirtualBox_getSystemPropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getSystemPropertiesResultMsg.typecode)
        return response

    # op: IVirtualBox_getMachines
    def IVirtualBox_getMachines(self, request, **kw):
        if isinstance(request, IVirtualBox_getMachinesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getMachinesResultMsg.typecode)
        return response

    # op: IVirtualBox_getHardDisks
    def IVirtualBox_getHardDisks(self, request, **kw):
        if isinstance(request, IVirtualBox_getHardDisksRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getHardDisksResultMsg.typecode)
        return response

    # op: IVirtualBox_getDVDImages
    def IVirtualBox_getDVDImages(self, request, **kw):
        if isinstance(request, IVirtualBox_getDVDImagesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getDVDImagesResultMsg.typecode)
        return response

    # op: IVirtualBox_getFloppyImages
    def IVirtualBox_getFloppyImages(self, request, **kw):
        if isinstance(request, IVirtualBox_getFloppyImagesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getFloppyImagesResultMsg.typecode)
        return response

    # op: IVirtualBox_getProgressOperations
    def IVirtualBox_getProgressOperations(self, request, **kw):
        if isinstance(request, IVirtualBox_getProgressOperationsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getProgressOperationsResultMsg.typecode)
        return response

    # op: IVirtualBox_getGuestOSTypes
    def IVirtualBox_getGuestOSTypes(self, request, **kw):
        if isinstance(request, IVirtualBox_getGuestOSTypesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getGuestOSTypesResultMsg.typecode)
        return response

    # op: IVirtualBox_getSharedFolders
    def IVirtualBox_getSharedFolders(self, request, **kw):
        if isinstance(request, IVirtualBox_getSharedFoldersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getSharedFoldersResultMsg.typecode)
        return response

    # op: IVirtualBox_getPerformanceCollector
    def IVirtualBox_getPerformanceCollector(self, request, **kw):
        if isinstance(request, IVirtualBox_getPerformanceCollectorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getPerformanceCollectorResultMsg.typecode)
        return response

    # op: IVirtualBox_getDHCPServers
    def IVirtualBox_getDHCPServers(self, request, **kw):
        if isinstance(request, IVirtualBox_getDHCPServersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getDHCPServersResultMsg.typecode)
        return response

    # op: IVirtualBox_getEventSource
    def IVirtualBox_getEventSource(self, request, **kw):
        if isinstance(request, IVirtualBox_getEventSourceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getEventSourceResultMsg.typecode)
        return response

    # op: IVirtualBox_getInternalNetworks
    def IVirtualBox_getInternalNetworks(self, request, **kw):
        if isinstance(request, IVirtualBox_getInternalNetworksRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getInternalNetworksResultMsg.typecode)
        return response

    # op: IVirtualBox_getGenericNetworkDrivers
    def IVirtualBox_getGenericNetworkDrivers(self, request, **kw):
        if isinstance(request, IVirtualBox_getGenericNetworkDriversRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getGenericNetworkDriversResultMsg.typecode)
        return response

    # op: IVirtualBox_composeMachineFilename
    def IVirtualBox_composeMachineFilename(self, request, **kw):
        if isinstance(request, IVirtualBox_composeMachineFilenameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_composeMachineFilenameResultMsg.typecode)
        return response

    # op: IVirtualBox_createMachine
    def IVirtualBox_createMachine(self, request, **kw):
        if isinstance(request, IVirtualBox_createMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_createMachineResultMsg.typecode)
        return response

    # op: IVirtualBox_openMachine
    def IVirtualBox_openMachine(self, request, **kw):
        if isinstance(request, IVirtualBox_openMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_openMachineResultMsg.typecode)
        return response

    # op: IVirtualBox_registerMachine
    def IVirtualBox_registerMachine(self, request, **kw):
        if isinstance(request, IVirtualBox_registerMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_registerMachineResultMsg.typecode)
        return response

    # op: IVirtualBox_findMachine
    def IVirtualBox_findMachine(self, request, **kw):
        if isinstance(request, IVirtualBox_findMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_findMachineResultMsg.typecode)
        return response

    # op: IVirtualBox_createAppliance
    def IVirtualBox_createAppliance(self, request, **kw):
        if isinstance(request, IVirtualBox_createApplianceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_createApplianceResultMsg.typecode)
        return response

    # op: IVirtualBox_createHardDisk
    def IVirtualBox_createHardDisk(self, request, **kw):
        if isinstance(request, IVirtualBox_createHardDiskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_createHardDiskResultMsg.typecode)
        return response

    # op: IVirtualBox_openMedium
    def IVirtualBox_openMedium(self, request, **kw):
        if isinstance(request, IVirtualBox_openMediumRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_openMediumResultMsg.typecode)
        return response

    # op: IVirtualBox_findMedium
    def IVirtualBox_findMedium(self, request, **kw):
        if isinstance(request, IVirtualBox_findMediumRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_findMediumResultMsg.typecode)
        return response

    # op: IVirtualBox_getGuestOSType
    def IVirtualBox_getGuestOSType(self, request, **kw):
        if isinstance(request, IVirtualBox_getGuestOSTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getGuestOSTypeResultMsg.typecode)
        return response

    # op: IVirtualBox_createSharedFolder
    def IVirtualBox_createSharedFolder(self, request, **kw):
        if isinstance(request, IVirtualBox_createSharedFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_createSharedFolderResultMsg.typecode)
        return response

    # op: IVirtualBox_removeSharedFolder
    def IVirtualBox_removeSharedFolder(self, request, **kw):
        if isinstance(request, IVirtualBox_removeSharedFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_removeSharedFolderResultMsg.typecode)
        return response

    # op: IVirtualBox_getExtraDataKeys
    def IVirtualBox_getExtraDataKeys(self, request, **kw):
        if isinstance(request, IVirtualBox_getExtraDataKeysRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getExtraDataKeysResultMsg.typecode)
        return response

    # op: IVirtualBox_getExtraData
    def IVirtualBox_getExtraData(self, request, **kw):
        if isinstance(request, IVirtualBox_getExtraDataRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getExtraDataResultMsg.typecode)
        return response

    # op: IVirtualBox_setExtraData
    def IVirtualBox_setExtraData(self, request, **kw):
        if isinstance(request, IVirtualBox_setExtraDataRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_setExtraDataResultMsg.typecode)
        return response

    # op: IVirtualBox_createDHCPServer
    def IVirtualBox_createDHCPServer(self, request, **kw):
        if isinstance(request, IVirtualBox_createDHCPServerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_createDHCPServerResultMsg.typecode)
        return response

    # op: IVirtualBox_findDHCPServerByNetworkName
    def IVirtualBox_findDHCPServerByNetworkName(self, request, **kw):
        if isinstance(request, IVirtualBox_findDHCPServerByNetworkNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_findDHCPServerByNetworkNameResultMsg.typecode)
        return response

    # op: IVirtualBox_removeDHCPServer
    def IVirtualBox_removeDHCPServer(self, request, **kw):
        if isinstance(request, IVirtualBox_removeDHCPServerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_removeDHCPServerResultMsg.typecode)
        return response

    # op: IVirtualBox_checkFirmwarePresent
    def IVirtualBox_checkFirmwarePresent(self, request, **kw):
        if isinstance(request, IVirtualBox_checkFirmwarePresentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_checkFirmwarePresentResultMsg.typecode)
        return response

    # op: IVFSExplorer_getPath
    def IVFSExplorer_getPath(self, request, **kw):
        if isinstance(request, IVFSExplorer_getPathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_getPathResultMsg.typecode)
        return response

    # op: IVFSExplorer_getType
    def IVFSExplorer_getType(self, request, **kw):
        if isinstance(request, IVFSExplorer_getTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_getTypeResultMsg.typecode)
        return response

    # op: IVFSExplorer_update
    def IVFSExplorer_update(self, request, **kw):
        if isinstance(request, IVFSExplorer_updateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_updateResultMsg.typecode)
        return response

    # op: IVFSExplorer_cd
    def IVFSExplorer_cd(self, request, **kw):
        if isinstance(request, IVFSExplorer_cdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_cdResultMsg.typecode)
        return response

    # op: IVFSExplorer_cdUp
    def IVFSExplorer_cdUp(self, request, **kw):
        if isinstance(request, IVFSExplorer_cdUpRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_cdUpResultMsg.typecode)
        return response

    # op: IVFSExplorer_entryList
    def IVFSExplorer_entryList(self, request, **kw):
        if isinstance(request, IVFSExplorer_entryListRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_entryListResultMsg.typecode)
        return response

    # op: IVFSExplorer_exists
    def IVFSExplorer_exists(self, request, **kw):
        if isinstance(request, IVFSExplorer_existsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_existsResultMsg.typecode)
        return response

    # op: IVFSExplorer_remove
    def IVFSExplorer_remove(self, request, **kw):
        if isinstance(request, IVFSExplorer_removeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_removeResultMsg.typecode)
        return response

    # op: IAppliance_getPath
    def IAppliance_getPath(self, request, **kw):
        if isinstance(request, IAppliance_getPathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_getPathResultMsg.typecode)
        return response

    # op: IAppliance_getDisks
    def IAppliance_getDisks(self, request, **kw):
        if isinstance(request, IAppliance_getDisksRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_getDisksResultMsg.typecode)
        return response

    # op: IAppliance_getVirtualSystemDescriptions
    def IAppliance_getVirtualSystemDescriptions(self, request, **kw):
        if isinstance(request, IAppliance_getVirtualSystemDescriptionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_getVirtualSystemDescriptionsResultMsg.typecode)
        return response

    # op: IAppliance_getMachines
    def IAppliance_getMachines(self, request, **kw):
        if isinstance(request, IAppliance_getMachinesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_getMachinesResultMsg.typecode)
        return response

    # op: IAppliance_read
    def IAppliance_read(self, request, **kw):
        if isinstance(request, IAppliance_readRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_readResultMsg.typecode)
        return response

    # op: IAppliance_interpret
    def IAppliance_interpret(self, request, **kw):
        if isinstance(request, IAppliance_interpretRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_interpretResultMsg.typecode)
        return response

    # op: IAppliance_importMachines
    def IAppliance_importMachines(self, request, **kw):
        if isinstance(request, IAppliance_importMachinesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_importMachinesResultMsg.typecode)
        return response

    # op: IAppliance_createVFSExplorer
    def IAppliance_createVFSExplorer(self, request, **kw):
        if isinstance(request, IAppliance_createVFSExplorerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_createVFSExplorerResultMsg.typecode)
        return response

    # op: IAppliance_write
    def IAppliance_write(self, request, **kw):
        if isinstance(request, IAppliance_writeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_writeResultMsg.typecode)
        return response

    # op: IAppliance_getWarnings
    def IAppliance_getWarnings(self, request, **kw):
        if isinstance(request, IAppliance_getWarningsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_getWarningsResultMsg.typecode)
        return response

    # op: IVirtualSystemDescription_getCount
    def IVirtualSystemDescription_getCount(self, request, **kw):
        if isinstance(request, IVirtualSystemDescription_getCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualSystemDescription_getCountResultMsg.typecode)
        return response

    # op: IVirtualSystemDescription_getDescription
    def IVirtualSystemDescription_getDescription(self, request, **kw):
        if isinstance(request, IVirtualSystemDescription_getDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualSystemDescription_getDescriptionResultMsg.typecode)
        return response

    # op: IVirtualSystemDescription_getDescriptionByType
    def IVirtualSystemDescription_getDescriptionByType(self, request, **kw):
        if isinstance(request, IVirtualSystemDescription_getDescriptionByTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualSystemDescription_getDescriptionByTypeResultMsg.typecode)
        return response

    # op: IVirtualSystemDescription_getValuesByType
    def IVirtualSystemDescription_getValuesByType(self, request, **kw):
        if isinstance(request, IVirtualSystemDescription_getValuesByTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualSystemDescription_getValuesByTypeResultMsg.typecode)
        return response

    # op: IVirtualSystemDescription_setFinalValues
    def IVirtualSystemDescription_setFinalValues(self, request, **kw):
        if isinstance(request, IVirtualSystemDescription_setFinalValuesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualSystemDescription_setFinalValuesResultMsg.typecode)
        return response

    # op: IVirtualSystemDescription_addDescription
    def IVirtualSystemDescription_addDescription(self, request, **kw):
        if isinstance(request, IVirtualSystemDescription_addDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualSystemDescription_addDescriptionResultMsg.typecode)
        return response

    # op: IBIOSSettings_getLogoFadeIn
    def IBIOSSettings_getLogoFadeIn(self, request, **kw):
        if isinstance(request, IBIOSSettings_getLogoFadeInRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getLogoFadeInResultMsg.typecode)
        return response

    # op: IBIOSSettings_setLogoFadeIn
    def IBIOSSettings_setLogoFadeIn(self, request, **kw):
        if isinstance(request, IBIOSSettings_setLogoFadeInRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setLogoFadeInResultMsg.typecode)
        return response

    # op: IBIOSSettings_getLogoFadeOut
    def IBIOSSettings_getLogoFadeOut(self, request, **kw):
        if isinstance(request, IBIOSSettings_getLogoFadeOutRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getLogoFadeOutResultMsg.typecode)
        return response

    # op: IBIOSSettings_setLogoFadeOut
    def IBIOSSettings_setLogoFadeOut(self, request, **kw):
        if isinstance(request, IBIOSSettings_setLogoFadeOutRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setLogoFadeOutResultMsg.typecode)
        return response

    # op: IBIOSSettings_getLogoDisplayTime
    def IBIOSSettings_getLogoDisplayTime(self, request, **kw):
        if isinstance(request, IBIOSSettings_getLogoDisplayTimeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getLogoDisplayTimeResultMsg.typecode)
        return response

    # op: IBIOSSettings_setLogoDisplayTime
    def IBIOSSettings_setLogoDisplayTime(self, request, **kw):
        if isinstance(request, IBIOSSettings_setLogoDisplayTimeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setLogoDisplayTimeResultMsg.typecode)
        return response

    # op: IBIOSSettings_getLogoImagePath
    def IBIOSSettings_getLogoImagePath(self, request, **kw):
        if isinstance(request, IBIOSSettings_getLogoImagePathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getLogoImagePathResultMsg.typecode)
        return response

    # op: IBIOSSettings_setLogoImagePath
    def IBIOSSettings_setLogoImagePath(self, request, **kw):
        if isinstance(request, IBIOSSettings_setLogoImagePathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setLogoImagePathResultMsg.typecode)
        return response

    # op: IBIOSSettings_getBootMenuMode
    def IBIOSSettings_getBootMenuMode(self, request, **kw):
        if isinstance(request, IBIOSSettings_getBootMenuModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getBootMenuModeResultMsg.typecode)
        return response

    # op: IBIOSSettings_setBootMenuMode
    def IBIOSSettings_setBootMenuMode(self, request, **kw):
        if isinstance(request, IBIOSSettings_setBootMenuModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setBootMenuModeResultMsg.typecode)
        return response

    # op: IBIOSSettings_getACPIEnabled
    def IBIOSSettings_getACPIEnabled(self, request, **kw):
        if isinstance(request, IBIOSSettings_getACPIEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getACPIEnabledResultMsg.typecode)
        return response

    # op: IBIOSSettings_setACPIEnabled
    def IBIOSSettings_setACPIEnabled(self, request, **kw):
        if isinstance(request, IBIOSSettings_setACPIEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setACPIEnabledResultMsg.typecode)
        return response

    # op: IBIOSSettings_getIOAPICEnabled
    def IBIOSSettings_getIOAPICEnabled(self, request, **kw):
        if isinstance(request, IBIOSSettings_getIOAPICEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getIOAPICEnabledResultMsg.typecode)
        return response

    # op: IBIOSSettings_setIOAPICEnabled
    def IBIOSSettings_setIOAPICEnabled(self, request, **kw):
        if isinstance(request, IBIOSSettings_setIOAPICEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setIOAPICEnabledResultMsg.typecode)
        return response

    # op: IBIOSSettings_getTimeOffset
    def IBIOSSettings_getTimeOffset(self, request, **kw):
        if isinstance(request, IBIOSSettings_getTimeOffsetRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getTimeOffsetResultMsg.typecode)
        return response

    # op: IBIOSSettings_setTimeOffset
    def IBIOSSettings_setTimeOffset(self, request, **kw):
        if isinstance(request, IBIOSSettings_setTimeOffsetRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setTimeOffsetResultMsg.typecode)
        return response

    # op: IBIOSSettings_getPXEDebugEnabled
    def IBIOSSettings_getPXEDebugEnabled(self, request, **kw):
        if isinstance(request, IBIOSSettings_getPXEDebugEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getPXEDebugEnabledResultMsg.typecode)
        return response

    # op: IBIOSSettings_setPXEDebugEnabled
    def IBIOSSettings_setPXEDebugEnabled(self, request, **kw):
        if isinstance(request, IBIOSSettings_setPXEDebugEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setPXEDebugEnabledResultMsg.typecode)
        return response

    # op: IMachine_getParent
    def IMachine_getParent(self, request, **kw):
        if isinstance(request, IMachine_getParentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getParentResultMsg.typecode)
        return response

    # op: IMachine_getAccessible
    def IMachine_getAccessible(self, request, **kw):
        if isinstance(request, IMachine_getAccessibleRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getAccessibleResultMsg.typecode)
        return response

    # op: IMachine_getAccessError
    def IMachine_getAccessError(self, request, **kw):
        if isinstance(request, IMachine_getAccessErrorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getAccessErrorResultMsg.typecode)
        return response

    # op: IMachine_getName
    def IMachine_getName(self, request, **kw):
        if isinstance(request, IMachine_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getNameResultMsg.typecode)
        return response

    # op: IMachine_setName
    def IMachine_setName(self, request, **kw):
        if isinstance(request, IMachine_setNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setNameResultMsg.typecode)
        return response

    # op: IMachine_getDescription
    def IMachine_getDescription(self, request, **kw):
        if isinstance(request, IMachine_getDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getDescriptionResultMsg.typecode)
        return response

    # op: IMachine_setDescription
    def IMachine_setDescription(self, request, **kw):
        if isinstance(request, IMachine_setDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setDescriptionResultMsg.typecode)
        return response

    # op: IMachine_getId
    def IMachine_getId(self, request, **kw):
        if isinstance(request, IMachine_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getIdResultMsg.typecode)
        return response

    # op: IMachine_getOSTypeId
    def IMachine_getOSTypeId(self, request, **kw):
        if isinstance(request, IMachine_getOSTypeIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getOSTypeIdResultMsg.typecode)
        return response

    # op: IMachine_setOSTypeId
    def IMachine_setOSTypeId(self, request, **kw):
        if isinstance(request, IMachine_setOSTypeIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setOSTypeIdResultMsg.typecode)
        return response

    # op: IMachine_getHardwareVersion
    def IMachine_getHardwareVersion(self, request, **kw):
        if isinstance(request, IMachine_getHardwareVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getHardwareVersionResultMsg.typecode)
        return response

    # op: IMachine_setHardwareVersion
    def IMachine_setHardwareVersion(self, request, **kw):
        if isinstance(request, IMachine_setHardwareVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setHardwareVersionResultMsg.typecode)
        return response

    # op: IMachine_getHardwareUUID
    def IMachine_getHardwareUUID(self, request, **kw):
        if isinstance(request, IMachine_getHardwareUUIDRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getHardwareUUIDResultMsg.typecode)
        return response

    # op: IMachine_setHardwareUUID
    def IMachine_setHardwareUUID(self, request, **kw):
        if isinstance(request, IMachine_setHardwareUUIDRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setHardwareUUIDResultMsg.typecode)
        return response

    # op: IMachine_getCPUCount
    def IMachine_getCPUCount(self, request, **kw):
        if isinstance(request, IMachine_getCPUCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCPUCountResultMsg.typecode)
        return response

    # op: IMachine_setCPUCount
    def IMachine_setCPUCount(self, request, **kw):
        if isinstance(request, IMachine_setCPUCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setCPUCountResultMsg.typecode)
        return response

    # op: IMachine_getCPUHotPlugEnabled
    def IMachine_getCPUHotPlugEnabled(self, request, **kw):
        if isinstance(request, IMachine_getCPUHotPlugEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCPUHotPlugEnabledResultMsg.typecode)
        return response

    # op: IMachine_setCPUHotPlugEnabled
    def IMachine_setCPUHotPlugEnabled(self, request, **kw):
        if isinstance(request, IMachine_setCPUHotPlugEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setCPUHotPlugEnabledResultMsg.typecode)
        return response

    # op: IMachine_getCPUExecutionCap
    def IMachine_getCPUExecutionCap(self, request, **kw):
        if isinstance(request, IMachine_getCPUExecutionCapRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCPUExecutionCapResultMsg.typecode)
        return response

    # op: IMachine_setCPUExecutionCap
    def IMachine_setCPUExecutionCap(self, request, **kw):
        if isinstance(request, IMachine_setCPUExecutionCapRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setCPUExecutionCapResultMsg.typecode)
        return response

    # op: IMachine_getMemorySize
    def IMachine_getMemorySize(self, request, **kw):
        if isinstance(request, IMachine_getMemorySizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getMemorySizeResultMsg.typecode)
        return response

    # op: IMachine_setMemorySize
    def IMachine_setMemorySize(self, request, **kw):
        if isinstance(request, IMachine_setMemorySizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setMemorySizeResultMsg.typecode)
        return response

    # op: IMachine_getMemoryBalloonSize
    def IMachine_getMemoryBalloonSize(self, request, **kw):
        if isinstance(request, IMachine_getMemoryBalloonSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getMemoryBalloonSizeResultMsg.typecode)
        return response

    # op: IMachine_setMemoryBalloonSize
    def IMachine_setMemoryBalloonSize(self, request, **kw):
        if isinstance(request, IMachine_setMemoryBalloonSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setMemoryBalloonSizeResultMsg.typecode)
        return response

    # op: IMachine_getPageFusionEnabled
    def IMachine_getPageFusionEnabled(self, request, **kw):
        if isinstance(request, IMachine_getPageFusionEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getPageFusionEnabledResultMsg.typecode)
        return response

    # op: IMachine_setPageFusionEnabled
    def IMachine_setPageFusionEnabled(self, request, **kw):
        if isinstance(request, IMachine_setPageFusionEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setPageFusionEnabledResultMsg.typecode)
        return response

    # op: IMachine_getVRAMSize
    def IMachine_getVRAMSize(self, request, **kw):
        if isinstance(request, IMachine_getVRAMSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getVRAMSizeResultMsg.typecode)
        return response

    # op: IMachine_setVRAMSize
    def IMachine_setVRAMSize(self, request, **kw):
        if isinstance(request, IMachine_setVRAMSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setVRAMSizeResultMsg.typecode)
        return response

    # op: IMachine_getAccelerate3DEnabled
    def IMachine_getAccelerate3DEnabled(self, request, **kw):
        if isinstance(request, IMachine_getAccelerate3DEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getAccelerate3DEnabledResultMsg.typecode)
        return response

    # op: IMachine_setAccelerate3DEnabled
    def IMachine_setAccelerate3DEnabled(self, request, **kw):
        if isinstance(request, IMachine_setAccelerate3DEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setAccelerate3DEnabledResultMsg.typecode)
        return response

    # op: IMachine_getAccelerate2DVideoEnabled
    def IMachine_getAccelerate2DVideoEnabled(self, request, **kw):
        if isinstance(request, IMachine_getAccelerate2DVideoEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getAccelerate2DVideoEnabledResultMsg.typecode)
        return response

    # op: IMachine_setAccelerate2DVideoEnabled
    def IMachine_setAccelerate2DVideoEnabled(self, request, **kw):
        if isinstance(request, IMachine_setAccelerate2DVideoEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setAccelerate2DVideoEnabledResultMsg.typecode)
        return response

    # op: IMachine_getMonitorCount
    def IMachine_getMonitorCount(self, request, **kw):
        if isinstance(request, IMachine_getMonitorCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getMonitorCountResultMsg.typecode)
        return response

    # op: IMachine_setMonitorCount
    def IMachine_setMonitorCount(self, request, **kw):
        if isinstance(request, IMachine_setMonitorCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setMonitorCountResultMsg.typecode)
        return response

    # op: IMachine_getBIOSSettings
    def IMachine_getBIOSSettings(self, request, **kw):
        if isinstance(request, IMachine_getBIOSSettingsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getBIOSSettingsResultMsg.typecode)
        return response

    # op: IMachine_getFirmwareType
    def IMachine_getFirmwareType(self, request, **kw):
        if isinstance(request, IMachine_getFirmwareTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getFirmwareTypeResultMsg.typecode)
        return response

    # op: IMachine_setFirmwareType
    def IMachine_setFirmwareType(self, request, **kw):
        if isinstance(request, IMachine_setFirmwareTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setFirmwareTypeResultMsg.typecode)
        return response

    # op: IMachine_getPointingHidType
    def IMachine_getPointingHidType(self, request, **kw):
        if isinstance(request, IMachine_getPointingHidTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getPointingHidTypeResultMsg.typecode)
        return response

    # op: IMachine_setPointingHidType
    def IMachine_setPointingHidType(self, request, **kw):
        if isinstance(request, IMachine_setPointingHidTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setPointingHidTypeResultMsg.typecode)
        return response

    # op: IMachine_getKeyboardHidType
    def IMachine_getKeyboardHidType(self, request, **kw):
        if isinstance(request, IMachine_getKeyboardHidTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getKeyboardHidTypeResultMsg.typecode)
        return response

    # op: IMachine_setKeyboardHidType
    def IMachine_setKeyboardHidType(self, request, **kw):
        if isinstance(request, IMachine_setKeyboardHidTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setKeyboardHidTypeResultMsg.typecode)
        return response

    # op: IMachine_getHpetEnabled
    def IMachine_getHpetEnabled(self, request, **kw):
        if isinstance(request, IMachine_getHpetEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getHpetEnabledResultMsg.typecode)
        return response

    # op: IMachine_setHpetEnabled
    def IMachine_setHpetEnabled(self, request, **kw):
        if isinstance(request, IMachine_setHpetEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setHpetEnabledResultMsg.typecode)
        return response

    # op: IMachine_getChipsetType
    def IMachine_getChipsetType(self, request, **kw):
        if isinstance(request, IMachine_getChipsetTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getChipsetTypeResultMsg.typecode)
        return response

    # op: IMachine_setChipsetType
    def IMachine_setChipsetType(self, request, **kw):
        if isinstance(request, IMachine_setChipsetTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setChipsetTypeResultMsg.typecode)
        return response

    # op: IMachine_getSnapshotFolder
    def IMachine_getSnapshotFolder(self, request, **kw):
        if isinstance(request, IMachine_getSnapshotFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSnapshotFolderResultMsg.typecode)
        return response

    # op: IMachine_setSnapshotFolder
    def IMachine_setSnapshotFolder(self, request, **kw):
        if isinstance(request, IMachine_setSnapshotFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setSnapshotFolderResultMsg.typecode)
        return response

    # op: IMachine_getVRDEServer
    def IMachine_getVRDEServer(self, request, **kw):
        if isinstance(request, IMachine_getVRDEServerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getVRDEServerResultMsg.typecode)
        return response

    # op: IMachine_getEmulatedUSBWebcameraEnabled
    def IMachine_getEmulatedUSBWebcameraEnabled(self, request, **kw):
        if isinstance(request, IMachine_getEmulatedUSBWebcameraEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getEmulatedUSBWebcameraEnabledResultMsg.typecode)
        return response

    # op: IMachine_setEmulatedUSBWebcameraEnabled
    def IMachine_setEmulatedUSBWebcameraEnabled(self, request, **kw):
        if isinstance(request, IMachine_setEmulatedUSBWebcameraEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setEmulatedUSBWebcameraEnabledResultMsg.typecode)
        return response

    # op: IMachine_getEmulatedUSBCardReaderEnabled
    def IMachine_getEmulatedUSBCardReaderEnabled(self, request, **kw):
        if isinstance(request, IMachine_getEmulatedUSBCardReaderEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getEmulatedUSBCardReaderEnabledResultMsg.typecode)
        return response

    # op: IMachine_setEmulatedUSBCardReaderEnabled
    def IMachine_setEmulatedUSBCardReaderEnabled(self, request, **kw):
        if isinstance(request, IMachine_setEmulatedUSBCardReaderEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setEmulatedUSBCardReaderEnabledResultMsg.typecode)
        return response

    # op: IMachine_getMediumAttachments
    def IMachine_getMediumAttachments(self, request, **kw):
        if isinstance(request, IMachine_getMediumAttachmentsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getMediumAttachmentsResultMsg.typecode)
        return response

    # op: IMachine_getUSBController
    def IMachine_getUSBController(self, request, **kw):
        if isinstance(request, IMachine_getUSBControllerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getUSBControllerResultMsg.typecode)
        return response

    # op: IMachine_getAudioAdapter
    def IMachine_getAudioAdapter(self, request, **kw):
        if isinstance(request, IMachine_getAudioAdapterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getAudioAdapterResultMsg.typecode)
        return response

    # op: IMachine_getStorageControllers
    def IMachine_getStorageControllers(self, request, **kw):
        if isinstance(request, IMachine_getStorageControllersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getStorageControllersResultMsg.typecode)
        return response

    # op: IMachine_getSettingsFilePath
    def IMachine_getSettingsFilePath(self, request, **kw):
        if isinstance(request, IMachine_getSettingsFilePathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSettingsFilePathResultMsg.typecode)
        return response

    # op: IMachine_getSettingsModified
    def IMachine_getSettingsModified(self, request, **kw):
        if isinstance(request, IMachine_getSettingsModifiedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSettingsModifiedResultMsg.typecode)
        return response

    # op: IMachine_getSessionState
    def IMachine_getSessionState(self, request, **kw):
        if isinstance(request, IMachine_getSessionStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSessionStateResultMsg.typecode)
        return response

    # op: IMachine_getSessionType
    def IMachine_getSessionType(self, request, **kw):
        if isinstance(request, IMachine_getSessionTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSessionTypeResultMsg.typecode)
        return response

    # op: IMachine_getSessionPid
    def IMachine_getSessionPid(self, request, **kw):
        if isinstance(request, IMachine_getSessionPidRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSessionPidResultMsg.typecode)
        return response

    # op: IMachine_getState
    def IMachine_getState(self, request, **kw):
        if isinstance(request, IMachine_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getStateResultMsg.typecode)
        return response

    # op: IMachine_getLastStateChange
    def IMachine_getLastStateChange(self, request, **kw):
        if isinstance(request, IMachine_getLastStateChangeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getLastStateChangeResultMsg.typecode)
        return response

    # op: IMachine_getStateFilePath
    def IMachine_getStateFilePath(self, request, **kw):
        if isinstance(request, IMachine_getStateFilePathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getStateFilePathResultMsg.typecode)
        return response

    # op: IMachine_getLogFolder
    def IMachine_getLogFolder(self, request, **kw):
        if isinstance(request, IMachine_getLogFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getLogFolderResultMsg.typecode)
        return response

    # op: IMachine_getCurrentSnapshot
    def IMachine_getCurrentSnapshot(self, request, **kw):
        if isinstance(request, IMachine_getCurrentSnapshotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCurrentSnapshotResultMsg.typecode)
        return response

    # op: IMachine_getSnapshotCount
    def IMachine_getSnapshotCount(self, request, **kw):
        if isinstance(request, IMachine_getSnapshotCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSnapshotCountResultMsg.typecode)
        return response

    # op: IMachine_getCurrentStateModified
    def IMachine_getCurrentStateModified(self, request, **kw):
        if isinstance(request, IMachine_getCurrentStateModifiedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCurrentStateModifiedResultMsg.typecode)
        return response

    # op: IMachine_getSharedFolders
    def IMachine_getSharedFolders(self, request, **kw):
        if isinstance(request, IMachine_getSharedFoldersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSharedFoldersResultMsg.typecode)
        return response

    # op: IMachine_getClipboardMode
    def IMachine_getClipboardMode(self, request, **kw):
        if isinstance(request, IMachine_getClipboardModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getClipboardModeResultMsg.typecode)
        return response

    # op: IMachine_setClipboardMode
    def IMachine_setClipboardMode(self, request, **kw):
        if isinstance(request, IMachine_setClipboardModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setClipboardModeResultMsg.typecode)
        return response

    # op: IMachine_getGuestPropertyNotificationPatterns
    def IMachine_getGuestPropertyNotificationPatterns(self, request, **kw):
        if isinstance(request, IMachine_getGuestPropertyNotificationPatternsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getGuestPropertyNotificationPatternsResultMsg.typecode)
        return response

    # op: IMachine_setGuestPropertyNotificationPatterns
    def IMachine_setGuestPropertyNotificationPatterns(self, request, **kw):
        if isinstance(request, IMachine_setGuestPropertyNotificationPatternsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setGuestPropertyNotificationPatternsResultMsg.typecode)
        return response

    # op: IMachine_getTeleporterEnabled
    def IMachine_getTeleporterEnabled(self, request, **kw):
        if isinstance(request, IMachine_getTeleporterEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getTeleporterEnabledResultMsg.typecode)
        return response

    # op: IMachine_setTeleporterEnabled
    def IMachine_setTeleporterEnabled(self, request, **kw):
        if isinstance(request, IMachine_setTeleporterEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setTeleporterEnabledResultMsg.typecode)
        return response

    # op: IMachine_getTeleporterPort
    def IMachine_getTeleporterPort(self, request, **kw):
        if isinstance(request, IMachine_getTeleporterPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getTeleporterPortResultMsg.typecode)
        return response

    # op: IMachine_setTeleporterPort
    def IMachine_setTeleporterPort(self, request, **kw):
        if isinstance(request, IMachine_setTeleporterPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setTeleporterPortResultMsg.typecode)
        return response

    # op: IMachine_getTeleporterAddress
    def IMachine_getTeleporterAddress(self, request, **kw):
        if isinstance(request, IMachine_getTeleporterAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getTeleporterAddressResultMsg.typecode)
        return response

    # op: IMachine_setTeleporterAddress
    def IMachine_setTeleporterAddress(self, request, **kw):
        if isinstance(request, IMachine_setTeleporterAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setTeleporterAddressResultMsg.typecode)
        return response

    # op: IMachine_getTeleporterPassword
    def IMachine_getTeleporterPassword(self, request, **kw):
        if isinstance(request, IMachine_getTeleporterPasswordRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getTeleporterPasswordResultMsg.typecode)
        return response

    # op: IMachine_setTeleporterPassword
    def IMachine_setTeleporterPassword(self, request, **kw):
        if isinstance(request, IMachine_setTeleporterPasswordRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setTeleporterPasswordResultMsg.typecode)
        return response

    # op: IMachine_getFaultToleranceState
    def IMachine_getFaultToleranceState(self, request, **kw):
        if isinstance(request, IMachine_getFaultToleranceStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getFaultToleranceStateResultMsg.typecode)
        return response

    # op: IMachine_setFaultToleranceState
    def IMachine_setFaultToleranceState(self, request, **kw):
        if isinstance(request, IMachine_setFaultToleranceStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setFaultToleranceStateResultMsg.typecode)
        return response

    # op: IMachine_getFaultTolerancePort
    def IMachine_getFaultTolerancePort(self, request, **kw):
        if isinstance(request, IMachine_getFaultTolerancePortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getFaultTolerancePortResultMsg.typecode)
        return response

    # op: IMachine_setFaultTolerancePort
    def IMachine_setFaultTolerancePort(self, request, **kw):
        if isinstance(request, IMachine_setFaultTolerancePortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setFaultTolerancePortResultMsg.typecode)
        return response

    # op: IMachine_getFaultToleranceAddress
    def IMachine_getFaultToleranceAddress(self, request, **kw):
        if isinstance(request, IMachine_getFaultToleranceAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getFaultToleranceAddressResultMsg.typecode)
        return response

    # op: IMachine_setFaultToleranceAddress
    def IMachine_setFaultToleranceAddress(self, request, **kw):
        if isinstance(request, IMachine_setFaultToleranceAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setFaultToleranceAddressResultMsg.typecode)
        return response

    # op: IMachine_getFaultTolerancePassword
    def IMachine_getFaultTolerancePassword(self, request, **kw):
        if isinstance(request, IMachine_getFaultTolerancePasswordRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getFaultTolerancePasswordResultMsg.typecode)
        return response

    # op: IMachine_setFaultTolerancePassword
    def IMachine_setFaultTolerancePassword(self, request, **kw):
        if isinstance(request, IMachine_setFaultTolerancePasswordRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setFaultTolerancePasswordResultMsg.typecode)
        return response

    # op: IMachine_getFaultToleranceSyncInterval
    def IMachine_getFaultToleranceSyncInterval(self, request, **kw):
        if isinstance(request, IMachine_getFaultToleranceSyncIntervalRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getFaultToleranceSyncIntervalResultMsg.typecode)
        return response

    # op: IMachine_setFaultToleranceSyncInterval
    def IMachine_setFaultToleranceSyncInterval(self, request, **kw):
        if isinstance(request, IMachine_setFaultToleranceSyncIntervalRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setFaultToleranceSyncIntervalResultMsg.typecode)
        return response

    # op: IMachine_getRTCUseUTC
    def IMachine_getRTCUseUTC(self, request, **kw):
        if isinstance(request, IMachine_getRTCUseUTCRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getRTCUseUTCResultMsg.typecode)
        return response

    # op: IMachine_setRTCUseUTC
    def IMachine_setRTCUseUTC(self, request, **kw):
        if isinstance(request, IMachine_setRTCUseUTCRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setRTCUseUTCResultMsg.typecode)
        return response

    # op: IMachine_getIoCacheEnabled
    def IMachine_getIoCacheEnabled(self, request, **kw):
        if isinstance(request, IMachine_getIoCacheEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getIoCacheEnabledResultMsg.typecode)
        return response

    # op: IMachine_setIoCacheEnabled
    def IMachine_setIoCacheEnabled(self, request, **kw):
        if isinstance(request, IMachine_setIoCacheEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setIoCacheEnabledResultMsg.typecode)
        return response

    # op: IMachine_getIoCacheSize
    def IMachine_getIoCacheSize(self, request, **kw):
        if isinstance(request, IMachine_getIoCacheSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getIoCacheSizeResultMsg.typecode)
        return response

    # op: IMachine_setIoCacheSize
    def IMachine_setIoCacheSize(self, request, **kw):
        if isinstance(request, IMachine_setIoCacheSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setIoCacheSizeResultMsg.typecode)
        return response

    # op: IMachine_getBandwidthControl
    def IMachine_getBandwidthControl(self, request, **kw):
        if isinstance(request, IMachine_getBandwidthControlRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getBandwidthControlResultMsg.typecode)
        return response

    # op: IMachine_getPciDeviceAssignments
    def IMachine_getPciDeviceAssignments(self, request, **kw):
        if isinstance(request, IMachine_getPciDeviceAssignmentsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getPciDeviceAssignmentsResultMsg.typecode)
        return response

    # op: IMachine_lockMachine
    def IMachine_lockMachine(self, request, **kw):
        if isinstance(request, IMachine_lockMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_lockMachineResultMsg.typecode)
        return response

    # op: IMachine_launchVMProcess
    def IMachine_launchVMProcess(self, request, **kw):
        if isinstance(request, IMachine_launchVMProcessRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_launchVMProcessResultMsg.typecode)
        return response

    # op: IMachine_setBootOrder
    def IMachine_setBootOrder(self, request, **kw):
        if isinstance(request, IMachine_setBootOrderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setBootOrderResultMsg.typecode)
        return response

    # op: IMachine_getBootOrder
    def IMachine_getBootOrder(self, request, **kw):
        if isinstance(request, IMachine_getBootOrderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getBootOrderResultMsg.typecode)
        return response

    # op: IMachine_attachDevice
    def IMachine_attachDevice(self, request, **kw):
        if isinstance(request, IMachine_attachDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_attachDeviceResultMsg.typecode)
        return response

    # op: IMachine_detachDevice
    def IMachine_detachDevice(self, request, **kw):
        if isinstance(request, IMachine_detachDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_detachDeviceResultMsg.typecode)
        return response

    # op: IMachine_passthroughDevice
    def IMachine_passthroughDevice(self, request, **kw):
        if isinstance(request, IMachine_passthroughDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_passthroughDeviceResultMsg.typecode)
        return response

    # op: IMachine_temporaryEjectDevice
    def IMachine_temporaryEjectDevice(self, request, **kw):
        if isinstance(request, IMachine_temporaryEjectDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_temporaryEjectDeviceResultMsg.typecode)
        return response

    # op: IMachine_nonRotationalDevice
    def IMachine_nonRotationalDevice(self, request, **kw):
        if isinstance(request, IMachine_nonRotationalDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_nonRotationalDeviceResultMsg.typecode)
        return response

    # op: IMachine_setBandwidthGroupForDevice
    def IMachine_setBandwidthGroupForDevice(self, request, **kw):
        if isinstance(request, IMachine_setBandwidthGroupForDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setBandwidthGroupForDeviceResultMsg.typecode)
        return response

    # op: IMachine_mountMedium
    def IMachine_mountMedium(self, request, **kw):
        if isinstance(request, IMachine_mountMediumRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_mountMediumResultMsg.typecode)
        return response

    # op: IMachine_getMedium
    def IMachine_getMedium(self, request, **kw):
        if isinstance(request, IMachine_getMediumRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getMediumResultMsg.typecode)
        return response

    # op: IMachine_getMediumAttachmentsOfController
    def IMachine_getMediumAttachmentsOfController(self, request, **kw):
        if isinstance(request, IMachine_getMediumAttachmentsOfControllerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getMediumAttachmentsOfControllerResultMsg.typecode)
        return response

    # op: IMachine_getMediumAttachment
    def IMachine_getMediumAttachment(self, request, **kw):
        if isinstance(request, IMachine_getMediumAttachmentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getMediumAttachmentResultMsg.typecode)
        return response

    # op: IMachine_attachHostPciDevice
    def IMachine_attachHostPciDevice(self, request, **kw):
        if isinstance(request, IMachine_attachHostPciDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_attachHostPciDeviceResultMsg.typecode)
        return response

    # op: IMachine_detachHostPciDevice
    def IMachine_detachHostPciDevice(self, request, **kw):
        if isinstance(request, IMachine_detachHostPciDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_detachHostPciDeviceResultMsg.typecode)
        return response

    # op: IMachine_getNetworkAdapter
    def IMachine_getNetworkAdapter(self, request, **kw):
        if isinstance(request, IMachine_getNetworkAdapterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getNetworkAdapterResultMsg.typecode)
        return response

    # op: IMachine_addStorageController
    def IMachine_addStorageController(self, request, **kw):
        if isinstance(request, IMachine_addStorageControllerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_addStorageControllerResultMsg.typecode)
        return response

    # op: IMachine_getStorageControllerByName
    def IMachine_getStorageControllerByName(self, request, **kw):
        if isinstance(request, IMachine_getStorageControllerByNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getStorageControllerByNameResultMsg.typecode)
        return response

    # op: IMachine_getStorageControllerByInstance
    def IMachine_getStorageControllerByInstance(self, request, **kw):
        if isinstance(request, IMachine_getStorageControllerByInstanceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getStorageControllerByInstanceResultMsg.typecode)
        return response

    # op: IMachine_removeStorageController
    def IMachine_removeStorageController(self, request, **kw):
        if isinstance(request, IMachine_removeStorageControllerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_removeStorageControllerResultMsg.typecode)
        return response

    # op: IMachine_setStorageControllerBootable
    def IMachine_setStorageControllerBootable(self, request, **kw):
        if isinstance(request, IMachine_setStorageControllerBootableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setStorageControllerBootableResultMsg.typecode)
        return response

    # op: IMachine_getSerialPort
    def IMachine_getSerialPort(self, request, **kw):
        if isinstance(request, IMachine_getSerialPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSerialPortResultMsg.typecode)
        return response

    # op: IMachine_getParallelPort
    def IMachine_getParallelPort(self, request, **kw):
        if isinstance(request, IMachine_getParallelPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getParallelPortResultMsg.typecode)
        return response

    # op: IMachine_getExtraDataKeys
    def IMachine_getExtraDataKeys(self, request, **kw):
        if isinstance(request, IMachine_getExtraDataKeysRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getExtraDataKeysResultMsg.typecode)
        return response

    # op: IMachine_getExtraData
    def IMachine_getExtraData(self, request, **kw):
        if isinstance(request, IMachine_getExtraDataRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getExtraDataResultMsg.typecode)
        return response

    # op: IMachine_setExtraData
    def IMachine_setExtraData(self, request, **kw):
        if isinstance(request, IMachine_setExtraDataRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setExtraDataResultMsg.typecode)
        return response

    # op: IMachine_getCPUProperty
    def IMachine_getCPUProperty(self, request, **kw):
        if isinstance(request, IMachine_getCPUPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCPUPropertyResultMsg.typecode)
        return response

    # op: IMachine_setCPUProperty
    def IMachine_setCPUProperty(self, request, **kw):
        if isinstance(request, IMachine_setCPUPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setCPUPropertyResultMsg.typecode)
        return response

    # op: IMachine_getCPUIDLeaf
    def IMachine_getCPUIDLeaf(self, request, **kw):
        if isinstance(request, IMachine_getCPUIDLeafRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCPUIDLeafResultMsg.typecode)
        return response

    # op: IMachine_setCPUIDLeaf
    def IMachine_setCPUIDLeaf(self, request, **kw):
        if isinstance(request, IMachine_setCPUIDLeafRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setCPUIDLeafResultMsg.typecode)
        return response

    # op: IMachine_removeCPUIDLeaf
    def IMachine_removeCPUIDLeaf(self, request, **kw):
        if isinstance(request, IMachine_removeCPUIDLeafRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_removeCPUIDLeafResultMsg.typecode)
        return response

    # op: IMachine_removeAllCPUIDLeaves
    def IMachine_removeAllCPUIDLeaves(self, request, **kw):
        if isinstance(request, IMachine_removeAllCPUIDLeavesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_removeAllCPUIDLeavesResultMsg.typecode)
        return response

    # op: IMachine_getHWVirtExProperty
    def IMachine_getHWVirtExProperty(self, request, **kw):
        if isinstance(request, IMachine_getHWVirtExPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getHWVirtExPropertyResultMsg.typecode)
        return response

    # op: IMachine_setHWVirtExProperty
    def IMachine_setHWVirtExProperty(self, request, **kw):
        if isinstance(request, IMachine_setHWVirtExPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setHWVirtExPropertyResultMsg.typecode)
        return response

    # op: IMachine_saveSettings
    def IMachine_saveSettings(self, request, **kw):
        if isinstance(request, IMachine_saveSettingsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_saveSettingsResultMsg.typecode)
        return response

    # op: IMachine_discardSettings
    def IMachine_discardSettings(self, request, **kw):
        if isinstance(request, IMachine_discardSettingsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_discardSettingsResultMsg.typecode)
        return response

    # op: IMachine_unregister
    def IMachine_unregister(self, request, **kw):
        if isinstance(request, IMachine_unregisterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_unregisterResultMsg.typecode)
        return response

    # op: IMachine_delete
    def IMachine_delete(self, request, **kw):
        if isinstance(request, IMachine_deleteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_deleteResultMsg.typecode)
        return response

    # op: IMachine_export
    def IMachine_export(self, request, **kw):
        if isinstance(request, IMachine_exportRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_exportResultMsg.typecode)
        return response

    # op: IMachine_findSnapshot
    def IMachine_findSnapshot(self, request, **kw):
        if isinstance(request, IMachine_findSnapshotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_findSnapshotResultMsg.typecode)
        return response

    # op: IMachine_createSharedFolder
    def IMachine_createSharedFolder(self, request, **kw):
        if isinstance(request, IMachine_createSharedFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_createSharedFolderResultMsg.typecode)
        return response

    # op: IMachine_removeSharedFolder
    def IMachine_removeSharedFolder(self, request, **kw):
        if isinstance(request, IMachine_removeSharedFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_removeSharedFolderResultMsg.typecode)
        return response

    # op: IMachine_canShowConsoleWindow
    def IMachine_canShowConsoleWindow(self, request, **kw):
        if isinstance(request, IMachine_canShowConsoleWindowRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_canShowConsoleWindowResultMsg.typecode)
        return response

    # op: IMachine_showConsoleWindow
    def IMachine_showConsoleWindow(self, request, **kw):
        if isinstance(request, IMachine_showConsoleWindowRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_showConsoleWindowResultMsg.typecode)
        return response

    # op: IMachine_getGuestProperty
    def IMachine_getGuestProperty(self, request, **kw):
        if isinstance(request, IMachine_getGuestPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getGuestPropertyResultMsg.typecode)
        return response

    # op: IMachine_getGuestPropertyValue
    def IMachine_getGuestPropertyValue(self, request, **kw):
        if isinstance(request, IMachine_getGuestPropertyValueRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getGuestPropertyValueResultMsg.typecode)
        return response

    # op: IMachine_getGuestPropertyTimestamp
    def IMachine_getGuestPropertyTimestamp(self, request, **kw):
        if isinstance(request, IMachine_getGuestPropertyTimestampRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getGuestPropertyTimestampResultMsg.typecode)
        return response

    # op: IMachine_setGuestProperty
    def IMachine_setGuestProperty(self, request, **kw):
        if isinstance(request, IMachine_setGuestPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setGuestPropertyResultMsg.typecode)
        return response

    # op: IMachine_setGuestPropertyValue
    def IMachine_setGuestPropertyValue(self, request, **kw):
        if isinstance(request, IMachine_setGuestPropertyValueRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setGuestPropertyValueResultMsg.typecode)
        return response

    # op: IMachine_enumerateGuestProperties
    def IMachine_enumerateGuestProperties(self, request, **kw):
        if isinstance(request, IMachine_enumerateGuestPropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_enumerateGuestPropertiesResultMsg.typecode)
        return response

    # op: IMachine_querySavedGuestSize
    def IMachine_querySavedGuestSize(self, request, **kw):
        if isinstance(request, IMachine_querySavedGuestSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_querySavedGuestSizeResultMsg.typecode)
        return response

    # op: IMachine_querySavedThumbnailSize
    def IMachine_querySavedThumbnailSize(self, request, **kw):
        if isinstance(request, IMachine_querySavedThumbnailSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_querySavedThumbnailSizeResultMsg.typecode)
        return response

    # op: IMachine_readSavedThumbnailToArray
    def IMachine_readSavedThumbnailToArray(self, request, **kw):
        if isinstance(request, IMachine_readSavedThumbnailToArrayRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_readSavedThumbnailToArrayResultMsg.typecode)
        return response

    # op: IMachine_readSavedThumbnailPNGToArray
    def IMachine_readSavedThumbnailPNGToArray(self, request, **kw):
        if isinstance(request, IMachine_readSavedThumbnailPNGToArrayRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_readSavedThumbnailPNGToArrayResultMsg.typecode)
        return response

    # op: IMachine_querySavedScreenshotPNGSize
    def IMachine_querySavedScreenshotPNGSize(self, request, **kw):
        if isinstance(request, IMachine_querySavedScreenshotPNGSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_querySavedScreenshotPNGSizeResultMsg.typecode)
        return response

    # op: IMachine_readSavedScreenshotPNGToArray
    def IMachine_readSavedScreenshotPNGToArray(self, request, **kw):
        if isinstance(request, IMachine_readSavedScreenshotPNGToArrayRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_readSavedScreenshotPNGToArrayResultMsg.typecode)
        return response

    # op: IMachine_hotPlugCPU
    def IMachine_hotPlugCPU(self, request, **kw):
        if isinstance(request, IMachine_hotPlugCPURequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_hotPlugCPUResultMsg.typecode)
        return response

    # op: IMachine_hotUnplugCPU
    def IMachine_hotUnplugCPU(self, request, **kw):
        if isinstance(request, IMachine_hotUnplugCPURequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_hotUnplugCPUResultMsg.typecode)
        return response

    # op: IMachine_getCPUStatus
    def IMachine_getCPUStatus(self, request, **kw):
        if isinstance(request, IMachine_getCPUStatusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCPUStatusResultMsg.typecode)
        return response

    # op: IMachine_queryLogFilename
    def IMachine_queryLogFilename(self, request, **kw):
        if isinstance(request, IMachine_queryLogFilenameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_queryLogFilenameResultMsg.typecode)
        return response

    # op: IMachine_readLog
    def IMachine_readLog(self, request, **kw):
        if isinstance(request, IMachine_readLogRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_readLogResultMsg.typecode)
        return response

    # op: IMachine_cloneTo
    def IMachine_cloneTo(self, request, **kw):
        if isinstance(request, IMachine_cloneToRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_cloneToResultMsg.typecode)
        return response

    # op: IConsole_getMachine
    def IConsole_getMachine(self, request, **kw):
        if isinstance(request, IConsole_getMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getMachineResultMsg.typecode)
        return response

    # op: IConsole_getState
    def IConsole_getState(self, request, **kw):
        if isinstance(request, IConsole_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getStateResultMsg.typecode)
        return response

    # op: IConsole_getGuest
    def IConsole_getGuest(self, request, **kw):
        if isinstance(request, IConsole_getGuestRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getGuestResultMsg.typecode)
        return response

    # op: IConsole_getKeyboard
    def IConsole_getKeyboard(self, request, **kw):
        if isinstance(request, IConsole_getKeyboardRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getKeyboardResultMsg.typecode)
        return response

    # op: IConsole_getMouse
    def IConsole_getMouse(self, request, **kw):
        if isinstance(request, IConsole_getMouseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getMouseResultMsg.typecode)
        return response

    # op: IConsole_getDisplay
    def IConsole_getDisplay(self, request, **kw):
        if isinstance(request, IConsole_getDisplayRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getDisplayResultMsg.typecode)
        return response

    # op: IConsole_getUSBDevices
    def IConsole_getUSBDevices(self, request, **kw):
        if isinstance(request, IConsole_getUSBDevicesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getUSBDevicesResultMsg.typecode)
        return response

    # op: IConsole_getRemoteUSBDevices
    def IConsole_getRemoteUSBDevices(self, request, **kw):
        if isinstance(request, IConsole_getRemoteUSBDevicesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getRemoteUSBDevicesResultMsg.typecode)
        return response

    # op: IConsole_getSharedFolders
    def IConsole_getSharedFolders(self, request, **kw):
        if isinstance(request, IConsole_getSharedFoldersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getSharedFoldersResultMsg.typecode)
        return response

    # op: IConsole_getVRDEServerInfo
    def IConsole_getVRDEServerInfo(self, request, **kw):
        if isinstance(request, IConsole_getVRDEServerInfoRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getVRDEServerInfoResultMsg.typecode)
        return response

    # op: IConsole_getEventSource
    def IConsole_getEventSource(self, request, **kw):
        if isinstance(request, IConsole_getEventSourceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getEventSourceResultMsg.typecode)
        return response

    # op: IConsole_getAttachedPciDevices
    def IConsole_getAttachedPciDevices(self, request, **kw):
        if isinstance(request, IConsole_getAttachedPciDevicesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getAttachedPciDevicesResultMsg.typecode)
        return response

    # op: IConsole_getUseHostClipboard
    def IConsole_getUseHostClipboard(self, request, **kw):
        if isinstance(request, IConsole_getUseHostClipboardRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getUseHostClipboardResultMsg.typecode)
        return response

    # op: IConsole_setUseHostClipboard
    def IConsole_setUseHostClipboard(self, request, **kw):
        if isinstance(request, IConsole_setUseHostClipboardRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_setUseHostClipboardResultMsg.typecode)
        return response

    # op: IConsole_powerUp
    def IConsole_powerUp(self, request, **kw):
        if isinstance(request, IConsole_powerUpRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_powerUpResultMsg.typecode)
        return response

    # op: IConsole_powerUpPaused
    def IConsole_powerUpPaused(self, request, **kw):
        if isinstance(request, IConsole_powerUpPausedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_powerUpPausedResultMsg.typecode)
        return response

    # op: IConsole_powerDown
    def IConsole_powerDown(self, request, **kw):
        if isinstance(request, IConsole_powerDownRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_powerDownResultMsg.typecode)
        return response

    # op: IConsole_reset
    def IConsole_reset(self, request, **kw):
        if isinstance(request, IConsole_resetRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_resetResultMsg.typecode)
        return response

    # op: IConsole_pause
    def IConsole_pause(self, request, **kw):
        if isinstance(request, IConsole_pauseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_pauseResultMsg.typecode)
        return response

    # op: IConsole_resume
    def IConsole_resume(self, request, **kw):
        if isinstance(request, IConsole_resumeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_resumeResultMsg.typecode)
        return response

    # op: IConsole_powerButton
    def IConsole_powerButton(self, request, **kw):
        if isinstance(request, IConsole_powerButtonRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_powerButtonResultMsg.typecode)
        return response

    # op: IConsole_sleepButton
    def IConsole_sleepButton(self, request, **kw):
        if isinstance(request, IConsole_sleepButtonRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_sleepButtonResultMsg.typecode)
        return response

    # op: IConsole_getPowerButtonHandled
    def IConsole_getPowerButtonHandled(self, request, **kw):
        if isinstance(request, IConsole_getPowerButtonHandledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getPowerButtonHandledResultMsg.typecode)
        return response

    # op: IConsole_getGuestEnteredACPIMode
    def IConsole_getGuestEnteredACPIMode(self, request, **kw):
        if isinstance(request, IConsole_getGuestEnteredACPIModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getGuestEnteredACPIModeResultMsg.typecode)
        return response

    # op: IConsole_saveState
    def IConsole_saveState(self, request, **kw):
        if isinstance(request, IConsole_saveStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_saveStateResultMsg.typecode)
        return response

    # op: IConsole_adoptSavedState
    def IConsole_adoptSavedState(self, request, **kw):
        if isinstance(request, IConsole_adoptSavedStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_adoptSavedStateResultMsg.typecode)
        return response

    # op: IConsole_discardSavedState
    def IConsole_discardSavedState(self, request, **kw):
        if isinstance(request, IConsole_discardSavedStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_discardSavedStateResultMsg.typecode)
        return response

    # op: IConsole_getDeviceActivity
    def IConsole_getDeviceActivity(self, request, **kw):
        if isinstance(request, IConsole_getDeviceActivityRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getDeviceActivityResultMsg.typecode)
        return response

    # op: IConsole_attachUSBDevice
    def IConsole_attachUSBDevice(self, request, **kw):
        if isinstance(request, IConsole_attachUSBDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_attachUSBDeviceResultMsg.typecode)
        return response

    # op: IConsole_detachUSBDevice
    def IConsole_detachUSBDevice(self, request, **kw):
        if isinstance(request, IConsole_detachUSBDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_detachUSBDeviceResultMsg.typecode)
        return response

    # op: IConsole_findUSBDeviceByAddress
    def IConsole_findUSBDeviceByAddress(self, request, **kw):
        if isinstance(request, IConsole_findUSBDeviceByAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_findUSBDeviceByAddressResultMsg.typecode)
        return response

    # op: IConsole_findUSBDeviceById
    def IConsole_findUSBDeviceById(self, request, **kw):
        if isinstance(request, IConsole_findUSBDeviceByIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_findUSBDeviceByIdResultMsg.typecode)
        return response

    # op: IConsole_createSharedFolder
    def IConsole_createSharedFolder(self, request, **kw):
        if isinstance(request, IConsole_createSharedFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_createSharedFolderResultMsg.typecode)
        return response

    # op: IConsole_removeSharedFolder
    def IConsole_removeSharedFolder(self, request, **kw):
        if isinstance(request, IConsole_removeSharedFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_removeSharedFolderResultMsg.typecode)
        return response

    # op: IConsole_takeSnapshot
    def IConsole_takeSnapshot(self, request, **kw):
        if isinstance(request, IConsole_takeSnapshotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_takeSnapshotResultMsg.typecode)
        return response

    # op: IConsole_deleteSnapshot
    def IConsole_deleteSnapshot(self, request, **kw):
        if isinstance(request, IConsole_deleteSnapshotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_deleteSnapshotResultMsg.typecode)
        return response

    # op: IConsole_deleteSnapshotAndAllChildren
    def IConsole_deleteSnapshotAndAllChildren(self, request, **kw):
        if isinstance(request, IConsole_deleteSnapshotAndAllChildrenRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_deleteSnapshotAndAllChildrenResultMsg.typecode)
        return response

    # op: IConsole_deleteSnapshotRange
    def IConsole_deleteSnapshotRange(self, request, **kw):
        if isinstance(request, IConsole_deleteSnapshotRangeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_deleteSnapshotRangeResultMsg.typecode)
        return response

    # op: IConsole_restoreSnapshot
    def IConsole_restoreSnapshot(self, request, **kw):
        if isinstance(request, IConsole_restoreSnapshotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_restoreSnapshotResultMsg.typecode)
        return response

    # op: IConsole_teleport
    def IConsole_teleport(self, request, **kw):
        if isinstance(request, IConsole_teleportRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_teleportResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getName
    def IHostNetworkInterface_getName(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getNameResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getId
    def IHostNetworkInterface_getId(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getIdResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getNetworkName
    def IHostNetworkInterface_getNetworkName(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_getNetworkNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getNetworkNameResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getDhcpEnabled
    def IHostNetworkInterface_getDhcpEnabled(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_getDhcpEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getDhcpEnabledResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getIPAddress
    def IHostNetworkInterface_getIPAddress(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_getIPAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getIPAddressResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getNetworkMask
    def IHostNetworkInterface_getNetworkMask(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_getNetworkMaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getNetworkMaskResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getIPV6Supported
    def IHostNetworkInterface_getIPV6Supported(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_getIPV6SupportedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getIPV6SupportedResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getIPV6Address
    def IHostNetworkInterface_getIPV6Address(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_getIPV6AddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getIPV6AddressResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getIPV6NetworkMaskPrefixLength
    def IHostNetworkInterface_getIPV6NetworkMaskPrefixLength(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getHardwareAddress
    def IHostNetworkInterface_getHardwareAddress(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_getHardwareAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getHardwareAddressResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getMediumType
    def IHostNetworkInterface_getMediumType(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_getMediumTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getMediumTypeResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getStatus
    def IHostNetworkInterface_getStatus(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_getStatusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getStatusResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getInterfaceType
    def IHostNetworkInterface_getInterfaceType(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_getInterfaceTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getInterfaceTypeResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_enableStaticIpConfig
    def IHostNetworkInterface_enableStaticIpConfig(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_enableStaticIpConfigRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_enableStaticIpConfigResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_enableStaticIpConfigV6
    def IHostNetworkInterface_enableStaticIpConfigV6(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_enableStaticIpConfigV6RequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_enableStaticIpConfigV6ResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_enableDynamicIpConfig
    def IHostNetworkInterface_enableDynamicIpConfig(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_enableDynamicIpConfigRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_enableDynamicIpConfigResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_dhcpRediscover
    def IHostNetworkInterface_dhcpRediscover(self, request, **kw):
        if isinstance(request, IHostNetworkInterface_dhcpRediscoverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_dhcpRediscoverResultMsg.typecode)
        return response

    # op: IHost_getDVDDrives
    def IHost_getDVDDrives(self, request, **kw):
        if isinstance(request, IHost_getDVDDrivesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getDVDDrivesResultMsg.typecode)
        return response

    # op: IHost_getFloppyDrives
    def IHost_getFloppyDrives(self, request, **kw):
        if isinstance(request, IHost_getFloppyDrivesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getFloppyDrivesResultMsg.typecode)
        return response

    # op: IHost_getUSBDevices
    def IHost_getUSBDevices(self, request, **kw):
        if isinstance(request, IHost_getUSBDevicesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getUSBDevicesResultMsg.typecode)
        return response

    # op: IHost_getUSBDeviceFilters
    def IHost_getUSBDeviceFilters(self, request, **kw):
        if isinstance(request, IHost_getUSBDeviceFiltersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getUSBDeviceFiltersResultMsg.typecode)
        return response

    # op: IHost_getNetworkInterfaces
    def IHost_getNetworkInterfaces(self, request, **kw):
        if isinstance(request, IHost_getNetworkInterfacesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getNetworkInterfacesResultMsg.typecode)
        return response

    # op: IHost_getProcessorCount
    def IHost_getProcessorCount(self, request, **kw):
        if isinstance(request, IHost_getProcessorCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getProcessorCountResultMsg.typecode)
        return response

    # op: IHost_getProcessorOnlineCount
    def IHost_getProcessorOnlineCount(self, request, **kw):
        if isinstance(request, IHost_getProcessorOnlineCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getProcessorOnlineCountResultMsg.typecode)
        return response

    # op: IHost_getProcessorCoreCount
    def IHost_getProcessorCoreCount(self, request, **kw):
        if isinstance(request, IHost_getProcessorCoreCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getProcessorCoreCountResultMsg.typecode)
        return response

    # op: IHost_getMemorySize
    def IHost_getMemorySize(self, request, **kw):
        if isinstance(request, IHost_getMemorySizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getMemorySizeResultMsg.typecode)
        return response

    # op: IHost_getMemoryAvailable
    def IHost_getMemoryAvailable(self, request, **kw):
        if isinstance(request, IHost_getMemoryAvailableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getMemoryAvailableResultMsg.typecode)
        return response

    # op: IHost_getOperatingSystem
    def IHost_getOperatingSystem(self, request, **kw):
        if isinstance(request, IHost_getOperatingSystemRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getOperatingSystemResultMsg.typecode)
        return response

    # op: IHost_getOSVersion
    def IHost_getOSVersion(self, request, **kw):
        if isinstance(request, IHost_getOSVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getOSVersionResultMsg.typecode)
        return response

    # op: IHost_getUTCTime
    def IHost_getUTCTime(self, request, **kw):
        if isinstance(request, IHost_getUTCTimeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getUTCTimeResultMsg.typecode)
        return response

    # op: IHost_getAcceleration3DAvailable
    def IHost_getAcceleration3DAvailable(self, request, **kw):
        if isinstance(request, IHost_getAcceleration3DAvailableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getAcceleration3DAvailableResultMsg.typecode)
        return response

    # op: IHost_getProcessorSpeed
    def IHost_getProcessorSpeed(self, request, **kw):
        if isinstance(request, IHost_getProcessorSpeedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getProcessorSpeedResultMsg.typecode)
        return response

    # op: IHost_getProcessorFeature
    def IHost_getProcessorFeature(self, request, **kw):
        if isinstance(request, IHost_getProcessorFeatureRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getProcessorFeatureResultMsg.typecode)
        return response

    # op: IHost_getProcessorDescription
    def IHost_getProcessorDescription(self, request, **kw):
        if isinstance(request, IHost_getProcessorDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getProcessorDescriptionResultMsg.typecode)
        return response

    # op: IHost_getProcessorCPUIDLeaf
    def IHost_getProcessorCPUIDLeaf(self, request, **kw):
        if isinstance(request, IHost_getProcessorCPUIDLeafRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getProcessorCPUIDLeafResultMsg.typecode)
        return response

    # op: IHost_createHostOnlyNetworkInterface
    def IHost_createHostOnlyNetworkInterface(self, request, **kw):
        if isinstance(request, IHost_createHostOnlyNetworkInterfaceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_createHostOnlyNetworkInterfaceResultMsg.typecode)
        return response

    # op: IHost_removeHostOnlyNetworkInterface
    def IHost_removeHostOnlyNetworkInterface(self, request, **kw):
        if isinstance(request, IHost_removeHostOnlyNetworkInterfaceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_removeHostOnlyNetworkInterfaceResultMsg.typecode)
        return response

    # op: IHost_createUSBDeviceFilter
    def IHost_createUSBDeviceFilter(self, request, **kw):
        if isinstance(request, IHost_createUSBDeviceFilterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_createUSBDeviceFilterResultMsg.typecode)
        return response

    # op: IHost_insertUSBDeviceFilter
    def IHost_insertUSBDeviceFilter(self, request, **kw):
        if isinstance(request, IHost_insertUSBDeviceFilterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_insertUSBDeviceFilterResultMsg.typecode)
        return response

    # op: IHost_removeUSBDeviceFilter
    def IHost_removeUSBDeviceFilter(self, request, **kw):
        if isinstance(request, IHost_removeUSBDeviceFilterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_removeUSBDeviceFilterResultMsg.typecode)
        return response

    # op: IHost_findHostDVDDrive
    def IHost_findHostDVDDrive(self, request, **kw):
        if isinstance(request, IHost_findHostDVDDriveRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_findHostDVDDriveResultMsg.typecode)
        return response

    # op: IHost_findHostFloppyDrive
    def IHost_findHostFloppyDrive(self, request, **kw):
        if isinstance(request, IHost_findHostFloppyDriveRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_findHostFloppyDriveResultMsg.typecode)
        return response

    # op: IHost_findHostNetworkInterfaceByName
    def IHost_findHostNetworkInterfaceByName(self, request, **kw):
        if isinstance(request, IHost_findHostNetworkInterfaceByNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_findHostNetworkInterfaceByNameResultMsg.typecode)
        return response

    # op: IHost_findHostNetworkInterfaceById
    def IHost_findHostNetworkInterfaceById(self, request, **kw):
        if isinstance(request, IHost_findHostNetworkInterfaceByIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_findHostNetworkInterfaceByIdResultMsg.typecode)
        return response

    # op: IHost_findHostNetworkInterfacesOfType
    def IHost_findHostNetworkInterfacesOfType(self, request, **kw):
        if isinstance(request, IHost_findHostNetworkInterfacesOfTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_findHostNetworkInterfacesOfTypeResultMsg.typecode)
        return response

    # op: IHost_findUSBDeviceById
    def IHost_findUSBDeviceById(self, request, **kw):
        if isinstance(request, IHost_findUSBDeviceByIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_findUSBDeviceByIdResultMsg.typecode)
        return response

    # op: IHost_findUSBDeviceByAddress
    def IHost_findUSBDeviceByAddress(self, request, **kw):
        if isinstance(request, IHost_findUSBDeviceByAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_findUSBDeviceByAddressResultMsg.typecode)
        return response

    # op: IHost_generateMACAddress
    def IHost_generateMACAddress(self, request, **kw):
        if isinstance(request, IHost_generateMACAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_generateMACAddressResultMsg.typecode)
        return response

    # op: ISystemProperties_getMinGuestRAM
    def ISystemProperties_getMinGuestRAM(self, request, **kw):
        if isinstance(request, ISystemProperties_getMinGuestRAMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMinGuestRAMResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxGuestRAM
    def ISystemProperties_getMaxGuestRAM(self, request, **kw):
        if isinstance(request, ISystemProperties_getMaxGuestRAMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxGuestRAMResultMsg.typecode)
        return response

    # op: ISystemProperties_getMinGuestVRAM
    def ISystemProperties_getMinGuestVRAM(self, request, **kw):
        if isinstance(request, ISystemProperties_getMinGuestVRAMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMinGuestVRAMResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxGuestVRAM
    def ISystemProperties_getMaxGuestVRAM(self, request, **kw):
        if isinstance(request, ISystemProperties_getMaxGuestVRAMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxGuestVRAMResultMsg.typecode)
        return response

    # op: ISystemProperties_getMinGuestCPUCount
    def ISystemProperties_getMinGuestCPUCount(self, request, **kw):
        if isinstance(request, ISystemProperties_getMinGuestCPUCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMinGuestCPUCountResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxGuestCPUCount
    def ISystemProperties_getMaxGuestCPUCount(self, request, **kw):
        if isinstance(request, ISystemProperties_getMaxGuestCPUCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxGuestCPUCountResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxGuestMonitors
    def ISystemProperties_getMaxGuestMonitors(self, request, **kw):
        if isinstance(request, ISystemProperties_getMaxGuestMonitorsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxGuestMonitorsResultMsg.typecode)
        return response

    # op: ISystemProperties_getInfoVDSize
    def ISystemProperties_getInfoVDSize(self, request, **kw):
        if isinstance(request, ISystemProperties_getInfoVDSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getInfoVDSizeResultMsg.typecode)
        return response

    # op: ISystemProperties_getSerialPortCount
    def ISystemProperties_getSerialPortCount(self, request, **kw):
        if isinstance(request, ISystemProperties_getSerialPortCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getSerialPortCountResultMsg.typecode)
        return response

    # op: ISystemProperties_getParallelPortCount
    def ISystemProperties_getParallelPortCount(self, request, **kw):
        if isinstance(request, ISystemProperties_getParallelPortCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getParallelPortCountResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxBootPosition
    def ISystemProperties_getMaxBootPosition(self, request, **kw):
        if isinstance(request, ISystemProperties_getMaxBootPositionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxBootPositionResultMsg.typecode)
        return response

    # op: ISystemProperties_getDefaultMachineFolder
    def ISystemProperties_getDefaultMachineFolder(self, request, **kw):
        if isinstance(request, ISystemProperties_getDefaultMachineFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getDefaultMachineFolderResultMsg.typecode)
        return response

    # op: ISystemProperties_setDefaultMachineFolder
    def ISystemProperties_setDefaultMachineFolder(self, request, **kw):
        if isinstance(request, ISystemProperties_setDefaultMachineFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setDefaultMachineFolderResultMsg.typecode)
        return response

    # op: ISystemProperties_getMediumFormats
    def ISystemProperties_getMediumFormats(self, request, **kw):
        if isinstance(request, ISystemProperties_getMediumFormatsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMediumFormatsResultMsg.typecode)
        return response

    # op: ISystemProperties_getDefaultHardDiskFormat
    def ISystemProperties_getDefaultHardDiskFormat(self, request, **kw):
        if isinstance(request, ISystemProperties_getDefaultHardDiskFormatRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getDefaultHardDiskFormatResultMsg.typecode)
        return response

    # op: ISystemProperties_setDefaultHardDiskFormat
    def ISystemProperties_setDefaultHardDiskFormat(self, request, **kw):
        if isinstance(request, ISystemProperties_setDefaultHardDiskFormatRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setDefaultHardDiskFormatResultMsg.typecode)
        return response

    # op: ISystemProperties_getFreeDiskSpaceWarning
    def ISystemProperties_getFreeDiskSpaceWarning(self, request, **kw):
        if isinstance(request, ISystemProperties_getFreeDiskSpaceWarningRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getFreeDiskSpaceWarningResultMsg.typecode)
        return response

    # op: ISystemProperties_setFreeDiskSpaceWarning
    def ISystemProperties_setFreeDiskSpaceWarning(self, request, **kw):
        if isinstance(request, ISystemProperties_setFreeDiskSpaceWarningRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setFreeDiskSpaceWarningResultMsg.typecode)
        return response

    # op: ISystemProperties_getFreeDiskSpacePercentWarning
    def ISystemProperties_getFreeDiskSpacePercentWarning(self, request, **kw):
        if isinstance(request, ISystemProperties_getFreeDiskSpacePercentWarningRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getFreeDiskSpacePercentWarningResultMsg.typecode)
        return response

    # op: ISystemProperties_setFreeDiskSpacePercentWarning
    def ISystemProperties_setFreeDiskSpacePercentWarning(self, request, **kw):
        if isinstance(request, ISystemProperties_setFreeDiskSpacePercentWarningRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setFreeDiskSpacePercentWarningResultMsg.typecode)
        return response

    # op: ISystemProperties_getFreeDiskSpaceError
    def ISystemProperties_getFreeDiskSpaceError(self, request, **kw):
        if isinstance(request, ISystemProperties_getFreeDiskSpaceErrorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getFreeDiskSpaceErrorResultMsg.typecode)
        return response

    # op: ISystemProperties_setFreeDiskSpaceError
    def ISystemProperties_setFreeDiskSpaceError(self, request, **kw):
        if isinstance(request, ISystemProperties_setFreeDiskSpaceErrorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setFreeDiskSpaceErrorResultMsg.typecode)
        return response

    # op: ISystemProperties_getFreeDiskSpacePercentError
    def ISystemProperties_getFreeDiskSpacePercentError(self, request, **kw):
        if isinstance(request, ISystemProperties_getFreeDiskSpacePercentErrorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getFreeDiskSpacePercentErrorResultMsg.typecode)
        return response

    # op: ISystemProperties_setFreeDiskSpacePercentError
    def ISystemProperties_setFreeDiskSpacePercentError(self, request, **kw):
        if isinstance(request, ISystemProperties_setFreeDiskSpacePercentErrorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setFreeDiskSpacePercentErrorResultMsg.typecode)
        return response

    # op: ISystemProperties_getVRDEAuthLibrary
    def ISystemProperties_getVRDEAuthLibrary(self, request, **kw):
        if isinstance(request, ISystemProperties_getVRDEAuthLibraryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getVRDEAuthLibraryResultMsg.typecode)
        return response

    # op: ISystemProperties_setVRDEAuthLibrary
    def ISystemProperties_setVRDEAuthLibrary(self, request, **kw):
        if isinstance(request, ISystemProperties_setVRDEAuthLibraryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setVRDEAuthLibraryResultMsg.typecode)
        return response

    # op: ISystemProperties_getWebServiceAuthLibrary
    def ISystemProperties_getWebServiceAuthLibrary(self, request, **kw):
        if isinstance(request, ISystemProperties_getWebServiceAuthLibraryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getWebServiceAuthLibraryResultMsg.typecode)
        return response

    # op: ISystemProperties_setWebServiceAuthLibrary
    def ISystemProperties_setWebServiceAuthLibrary(self, request, **kw):
        if isinstance(request, ISystemProperties_setWebServiceAuthLibraryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setWebServiceAuthLibraryResultMsg.typecode)
        return response

    # op: ISystemProperties_getDefaultVRDEExtPack
    def ISystemProperties_getDefaultVRDEExtPack(self, request, **kw):
        if isinstance(request, ISystemProperties_getDefaultVRDEExtPackRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getDefaultVRDEExtPackResultMsg.typecode)
        return response

    # op: ISystemProperties_setDefaultVRDEExtPack
    def ISystemProperties_setDefaultVRDEExtPack(self, request, **kw):
        if isinstance(request, ISystemProperties_setDefaultVRDEExtPackRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setDefaultVRDEExtPackResultMsg.typecode)
        return response

    # op: ISystemProperties_getLogHistoryCount
    def ISystemProperties_getLogHistoryCount(self, request, **kw):
        if isinstance(request, ISystemProperties_getLogHistoryCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getLogHistoryCountResultMsg.typecode)
        return response

    # op: ISystemProperties_setLogHistoryCount
    def ISystemProperties_setLogHistoryCount(self, request, **kw):
        if isinstance(request, ISystemProperties_setLogHistoryCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setLogHistoryCountResultMsg.typecode)
        return response

    # op: ISystemProperties_getDefaultAudioDriver
    def ISystemProperties_getDefaultAudioDriver(self, request, **kw):
        if isinstance(request, ISystemProperties_getDefaultAudioDriverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getDefaultAudioDriverResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxNetworkAdapters
    def ISystemProperties_getMaxNetworkAdapters(self, request, **kw):
        if isinstance(request, ISystemProperties_getMaxNetworkAdaptersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxNetworkAdaptersResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxNetworkAdaptersOfType
    def ISystemProperties_getMaxNetworkAdaptersOfType(self, request, **kw):
        if isinstance(request, ISystemProperties_getMaxNetworkAdaptersOfTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxNetworkAdaptersOfTypeResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxDevicesPerPortForStorageBus
    def ISystemProperties_getMaxDevicesPerPortForStorageBus(self, request, **kw):
        if isinstance(request, ISystemProperties_getMaxDevicesPerPortForStorageBusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxDevicesPerPortForStorageBusResultMsg.typecode)
        return response

    # op: ISystemProperties_getMinPortCountForStorageBus
    def ISystemProperties_getMinPortCountForStorageBus(self, request, **kw):
        if isinstance(request, ISystemProperties_getMinPortCountForStorageBusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMinPortCountForStorageBusResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxPortCountForStorageBus
    def ISystemProperties_getMaxPortCountForStorageBus(self, request, **kw):
        if isinstance(request, ISystemProperties_getMaxPortCountForStorageBusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxPortCountForStorageBusResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxInstancesOfStorageBus
    def ISystemProperties_getMaxInstancesOfStorageBus(self, request, **kw):
        if isinstance(request, ISystemProperties_getMaxInstancesOfStorageBusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxInstancesOfStorageBusResultMsg.typecode)
        return response

    # op: ISystemProperties_getDeviceTypesForStorageBus
    def ISystemProperties_getDeviceTypesForStorageBus(self, request, **kw):
        if isinstance(request, ISystemProperties_getDeviceTypesForStorageBusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getDeviceTypesForStorageBusResultMsg.typecode)
        return response

    # op: ISystemProperties_getDefaultIoCacheSettingForStorageController
    def ISystemProperties_getDefaultIoCacheSettingForStorageController(self, request, **kw):
        if isinstance(request, ISystemProperties_getDefaultIoCacheSettingForStorageControllerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getDefaultIoCacheSettingForStorageControllerResultMsg.typecode)
        return response

    # op: IGuest_getOSTypeId
    def IGuest_getOSTypeId(self, request, **kw):
        if isinstance(request, IGuest_getOSTypeIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getOSTypeIdResultMsg.typecode)
        return response

    # op: IGuest_getAdditionsRunLevel
    def IGuest_getAdditionsRunLevel(self, request, **kw):
        if isinstance(request, IGuest_getAdditionsRunLevelRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getAdditionsRunLevelResultMsg.typecode)
        return response

    # op: IGuest_getAdditionsVersion
    def IGuest_getAdditionsVersion(self, request, **kw):
        if isinstance(request, IGuest_getAdditionsVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getAdditionsVersionResultMsg.typecode)
        return response

    # op: IGuest_getFacilities
    def IGuest_getFacilities(self, request, **kw):
        if isinstance(request, IGuest_getFacilitiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getFacilitiesResultMsg.typecode)
        return response

    # op: IGuest_getMemoryBalloonSize
    def IGuest_getMemoryBalloonSize(self, request, **kw):
        if isinstance(request, IGuest_getMemoryBalloonSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getMemoryBalloonSizeResultMsg.typecode)
        return response

    # op: IGuest_setMemoryBalloonSize
    def IGuest_setMemoryBalloonSize(self, request, **kw):
        if isinstance(request, IGuest_setMemoryBalloonSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_setMemoryBalloonSizeResultMsg.typecode)
        return response

    # op: IGuest_getStatisticsUpdateInterval
    def IGuest_getStatisticsUpdateInterval(self, request, **kw):
        if isinstance(request, IGuest_getStatisticsUpdateIntervalRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getStatisticsUpdateIntervalResultMsg.typecode)
        return response

    # op: IGuest_setStatisticsUpdateInterval
    def IGuest_setStatisticsUpdateInterval(self, request, **kw):
        if isinstance(request, IGuest_setStatisticsUpdateIntervalRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_setStatisticsUpdateIntervalResultMsg.typecode)
        return response

    # op: IGuest_internalGetStatistics
    def IGuest_internalGetStatistics(self, request, **kw):
        if isinstance(request, IGuest_internalGetStatisticsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_internalGetStatisticsResultMsg.typecode)
        return response

    # op: IGuest_getFacilityStatus
    def IGuest_getFacilityStatus(self, request, **kw):
        if isinstance(request, IGuest_getFacilityStatusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getFacilityStatusResultMsg.typecode)
        return response

    # op: IGuest_getAdditionsStatus
    def IGuest_getAdditionsStatus(self, request, **kw):
        if isinstance(request, IGuest_getAdditionsStatusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getAdditionsStatusResultMsg.typecode)
        return response

    # op: IGuest_setCredentials
    def IGuest_setCredentials(self, request, **kw):
        if isinstance(request, IGuest_setCredentialsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_setCredentialsResultMsg.typecode)
        return response

    # op: IGuest_executeProcess
    def IGuest_executeProcess(self, request, **kw):
        if isinstance(request, IGuest_executeProcessRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_executeProcessResultMsg.typecode)
        return response

    # op: IGuest_getProcessOutput
    def IGuest_getProcessOutput(self, request, **kw):
        if isinstance(request, IGuest_getProcessOutputRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getProcessOutputResultMsg.typecode)
        return response

    # op: IGuest_getProcessStatus
    def IGuest_getProcessStatus(self, request, **kw):
        if isinstance(request, IGuest_getProcessStatusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getProcessStatusResultMsg.typecode)
        return response

    # op: IGuest_copyFromGuest
    def IGuest_copyFromGuest(self, request, **kw):
        if isinstance(request, IGuest_copyFromGuestRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_copyFromGuestResultMsg.typecode)
        return response

    # op: IGuest_copyToGuest
    def IGuest_copyToGuest(self, request, **kw):
        if isinstance(request, IGuest_copyToGuestRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_copyToGuestResultMsg.typecode)
        return response

    # op: IGuest_directoryClose
    def IGuest_directoryClose(self, request, **kw):
        if isinstance(request, IGuest_directoryCloseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_directoryCloseResultMsg.typecode)
        return response

    # op: IGuest_directoryCreate
    def IGuest_directoryCreate(self, request, **kw):
        if isinstance(request, IGuest_directoryCreateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_directoryCreateResultMsg.typecode)
        return response

    # op: IGuest_directoryOpen
    def IGuest_directoryOpen(self, request, **kw):
        if isinstance(request, IGuest_directoryOpenRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_directoryOpenResultMsg.typecode)
        return response

    # op: IGuest_directoryRead
    def IGuest_directoryRead(self, request, **kw):
        if isinstance(request, IGuest_directoryReadRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_directoryReadResultMsg.typecode)
        return response

    # op: IGuest_fileExists
    def IGuest_fileExists(self, request, **kw):
        if isinstance(request, IGuest_fileExistsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_fileExistsResultMsg.typecode)
        return response

    # op: IGuest_fileQuerySize
    def IGuest_fileQuerySize(self, request, **kw):
        if isinstance(request, IGuest_fileQuerySizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_fileQuerySizeResultMsg.typecode)
        return response

    # op: IGuest_setProcessInput
    def IGuest_setProcessInput(self, request, **kw):
        if isinstance(request, IGuest_setProcessInputRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_setProcessInputResultMsg.typecode)
        return response

    # op: IGuest_updateGuestAdditions
    def IGuest_updateGuestAdditions(self, request, **kw):
        if isinstance(request, IGuest_updateGuestAdditionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_updateGuestAdditionsResultMsg.typecode)
        return response

    # op: IProgress_getId
    def IProgress_getId(self, request, **kw):
        if isinstance(request, IProgress_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getIdResultMsg.typecode)
        return response

    # op: IProgress_getDescription
    def IProgress_getDescription(self, request, **kw):
        if isinstance(request, IProgress_getDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getDescriptionResultMsg.typecode)
        return response

    # op: IProgress_getInitiator
    def IProgress_getInitiator(self, request, **kw):
        if isinstance(request, IProgress_getInitiatorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getInitiatorResultMsg.typecode)
        return response

    # op: IProgress_getCancelable
    def IProgress_getCancelable(self, request, **kw):
        if isinstance(request, IProgress_getCancelableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getCancelableResultMsg.typecode)
        return response

    # op: IProgress_getPercent
    def IProgress_getPercent(self, request, **kw):
        if isinstance(request, IProgress_getPercentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getPercentResultMsg.typecode)
        return response

    # op: IProgress_getTimeRemaining
    def IProgress_getTimeRemaining(self, request, **kw):
        if isinstance(request, IProgress_getTimeRemainingRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getTimeRemainingResultMsg.typecode)
        return response

    # op: IProgress_getCompleted
    def IProgress_getCompleted(self, request, **kw):
        if isinstance(request, IProgress_getCompletedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getCompletedResultMsg.typecode)
        return response

    # op: IProgress_getCanceled
    def IProgress_getCanceled(self, request, **kw):
        if isinstance(request, IProgress_getCanceledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getCanceledResultMsg.typecode)
        return response

    # op: IProgress_getResultCode
    def IProgress_getResultCode(self, request, **kw):
        if isinstance(request, IProgress_getResultCodeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getResultCodeResultMsg.typecode)
        return response

    # op: IProgress_getErrorInfo
    def IProgress_getErrorInfo(self, request, **kw):
        if isinstance(request, IProgress_getErrorInfoRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getErrorInfoResultMsg.typecode)
        return response

    # op: IProgress_getOperationCount
    def IProgress_getOperationCount(self, request, **kw):
        if isinstance(request, IProgress_getOperationCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getOperationCountResultMsg.typecode)
        return response

    # op: IProgress_getOperation
    def IProgress_getOperation(self, request, **kw):
        if isinstance(request, IProgress_getOperationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getOperationResultMsg.typecode)
        return response

    # op: IProgress_getOperationDescription
    def IProgress_getOperationDescription(self, request, **kw):
        if isinstance(request, IProgress_getOperationDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getOperationDescriptionResultMsg.typecode)
        return response

    # op: IProgress_getOperationPercent
    def IProgress_getOperationPercent(self, request, **kw):
        if isinstance(request, IProgress_getOperationPercentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getOperationPercentResultMsg.typecode)
        return response

    # op: IProgress_getOperationWeight
    def IProgress_getOperationWeight(self, request, **kw):
        if isinstance(request, IProgress_getOperationWeightRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getOperationWeightResultMsg.typecode)
        return response

    # op: IProgress_getTimeout
    def IProgress_getTimeout(self, request, **kw):
        if isinstance(request, IProgress_getTimeoutRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getTimeoutResultMsg.typecode)
        return response

    # op: IProgress_setTimeout
    def IProgress_setTimeout(self, request, **kw):
        if isinstance(request, IProgress_setTimeoutRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_setTimeoutResultMsg.typecode)
        return response

    # op: IProgress_setCurrentOperationProgress
    def IProgress_setCurrentOperationProgress(self, request, **kw):
        if isinstance(request, IProgress_setCurrentOperationProgressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_setCurrentOperationProgressResultMsg.typecode)
        return response

    # op: IProgress_setNextOperation
    def IProgress_setNextOperation(self, request, **kw):
        if isinstance(request, IProgress_setNextOperationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_setNextOperationResultMsg.typecode)
        return response

    # op: IProgress_waitForCompletion
    def IProgress_waitForCompletion(self, request, **kw):
        if isinstance(request, IProgress_waitForCompletionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_waitForCompletionResultMsg.typecode)
        return response

    # op: IProgress_waitForOperationCompletion
    def IProgress_waitForOperationCompletion(self, request, **kw):
        if isinstance(request, IProgress_waitForOperationCompletionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_waitForOperationCompletionResultMsg.typecode)
        return response

    # op: IProgress_waitForAsyncProgressCompletion
    def IProgress_waitForAsyncProgressCompletion(self, request, **kw):
        if isinstance(request, IProgress_waitForAsyncProgressCompletionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_waitForAsyncProgressCompletionResultMsg.typecode)
        return response

    # op: IProgress_cancel
    def IProgress_cancel(self, request, **kw):
        if isinstance(request, IProgress_cancelRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_cancelResultMsg.typecode)
        return response

    # op: ISnapshot_getId
    def ISnapshot_getId(self, request, **kw):
        if isinstance(request, ISnapshot_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getIdResultMsg.typecode)
        return response

    # op: ISnapshot_getName
    def ISnapshot_getName(self, request, **kw):
        if isinstance(request, ISnapshot_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getNameResultMsg.typecode)
        return response

    # op: ISnapshot_setName
    def ISnapshot_setName(self, request, **kw):
        if isinstance(request, ISnapshot_setNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_setNameResultMsg.typecode)
        return response

    # op: ISnapshot_getDescription
    def ISnapshot_getDescription(self, request, **kw):
        if isinstance(request, ISnapshot_getDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getDescriptionResultMsg.typecode)
        return response

    # op: ISnapshot_setDescription
    def ISnapshot_setDescription(self, request, **kw):
        if isinstance(request, ISnapshot_setDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_setDescriptionResultMsg.typecode)
        return response

    # op: ISnapshot_getTimeStamp
    def ISnapshot_getTimeStamp(self, request, **kw):
        if isinstance(request, ISnapshot_getTimeStampRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getTimeStampResultMsg.typecode)
        return response

    # op: ISnapshot_getOnline
    def ISnapshot_getOnline(self, request, **kw):
        if isinstance(request, ISnapshot_getOnlineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getOnlineResultMsg.typecode)
        return response

    # op: ISnapshot_getMachine
    def ISnapshot_getMachine(self, request, **kw):
        if isinstance(request, ISnapshot_getMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getMachineResultMsg.typecode)
        return response

    # op: ISnapshot_getParent
    def ISnapshot_getParent(self, request, **kw):
        if isinstance(request, ISnapshot_getParentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getParentResultMsg.typecode)
        return response

    # op: ISnapshot_getChildren
    def ISnapshot_getChildren(self, request, **kw):
        if isinstance(request, ISnapshot_getChildrenRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getChildrenResultMsg.typecode)
        return response

    # op: ISnapshot_getChildrenCount
    def ISnapshot_getChildrenCount(self, request, **kw):
        if isinstance(request, ISnapshot_getChildrenCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getChildrenCountResultMsg.typecode)
        return response

    # op: IMedium_getId
    def IMedium_getId(self, request, **kw):
        if isinstance(request, IMedium_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getIdResultMsg.typecode)
        return response

    # op: IMedium_getDescription
    def IMedium_getDescription(self, request, **kw):
        if isinstance(request, IMedium_getDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getDescriptionResultMsg.typecode)
        return response

    # op: IMedium_setDescription
    def IMedium_setDescription(self, request, **kw):
        if isinstance(request, IMedium_setDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_setDescriptionResultMsg.typecode)
        return response

    # op: IMedium_getState
    def IMedium_getState(self, request, **kw):
        if isinstance(request, IMedium_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getStateResultMsg.typecode)
        return response

    # op: IMedium_getVariant
    def IMedium_getVariant(self, request, **kw):
        if isinstance(request, IMedium_getVariantRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getVariantResultMsg.typecode)
        return response

    # op: IMedium_getLocation
    def IMedium_getLocation(self, request, **kw):
        if isinstance(request, IMedium_getLocationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getLocationResultMsg.typecode)
        return response

    # op: IMedium_setLocation
    def IMedium_setLocation(self, request, **kw):
        if isinstance(request, IMedium_setLocationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_setLocationResultMsg.typecode)
        return response

    # op: IMedium_getName
    def IMedium_getName(self, request, **kw):
        if isinstance(request, IMedium_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getNameResultMsg.typecode)
        return response

    # op: IMedium_getDeviceType
    def IMedium_getDeviceType(self, request, **kw):
        if isinstance(request, IMedium_getDeviceTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getDeviceTypeResultMsg.typecode)
        return response

    # op: IMedium_getHostDrive
    def IMedium_getHostDrive(self, request, **kw):
        if isinstance(request, IMedium_getHostDriveRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getHostDriveResultMsg.typecode)
        return response

    # op: IMedium_getSize
    def IMedium_getSize(self, request, **kw):
        if isinstance(request, IMedium_getSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getSizeResultMsg.typecode)
        return response

    # op: IMedium_getFormat
    def IMedium_getFormat(self, request, **kw):
        if isinstance(request, IMedium_getFormatRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getFormatResultMsg.typecode)
        return response

    # op: IMedium_getMediumFormat
    def IMedium_getMediumFormat(self, request, **kw):
        if isinstance(request, IMedium_getMediumFormatRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getMediumFormatResultMsg.typecode)
        return response

    # op: IMedium_getType
    def IMedium_getType(self, request, **kw):
        if isinstance(request, IMedium_getTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getTypeResultMsg.typecode)
        return response

    # op: IMedium_setType
    def IMedium_setType(self, request, **kw):
        if isinstance(request, IMedium_setTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_setTypeResultMsg.typecode)
        return response

    # op: IMedium_getAllowedTypes
    def IMedium_getAllowedTypes(self, request, **kw):
        if isinstance(request, IMedium_getAllowedTypesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getAllowedTypesResultMsg.typecode)
        return response

    # op: IMedium_getParent
    def IMedium_getParent(self, request, **kw):
        if isinstance(request, IMedium_getParentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getParentResultMsg.typecode)
        return response

    # op: IMedium_getChildren
    def IMedium_getChildren(self, request, **kw):
        if isinstance(request, IMedium_getChildrenRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getChildrenResultMsg.typecode)
        return response

    # op: IMedium_getBase
    def IMedium_getBase(self, request, **kw):
        if isinstance(request, IMedium_getBaseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getBaseResultMsg.typecode)
        return response

    # op: IMedium_getReadOnly
    def IMedium_getReadOnly(self, request, **kw):
        if isinstance(request, IMedium_getReadOnlyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getReadOnlyResultMsg.typecode)
        return response

    # op: IMedium_getLogicalSize
    def IMedium_getLogicalSize(self, request, **kw):
        if isinstance(request, IMedium_getLogicalSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getLogicalSizeResultMsg.typecode)
        return response

    # op: IMedium_getAutoReset
    def IMedium_getAutoReset(self, request, **kw):
        if isinstance(request, IMedium_getAutoResetRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getAutoResetResultMsg.typecode)
        return response

    # op: IMedium_setAutoReset
    def IMedium_setAutoReset(self, request, **kw):
        if isinstance(request, IMedium_setAutoResetRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_setAutoResetResultMsg.typecode)
        return response

    # op: IMedium_getLastAccessError
    def IMedium_getLastAccessError(self, request, **kw):
        if isinstance(request, IMedium_getLastAccessErrorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getLastAccessErrorResultMsg.typecode)
        return response

    # op: IMedium_getMachineIds
    def IMedium_getMachineIds(self, request, **kw):
        if isinstance(request, IMedium_getMachineIdsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getMachineIdsResultMsg.typecode)
        return response

    # op: IMedium_setIDs
    def IMedium_setIDs(self, request, **kw):
        if isinstance(request, IMedium_setIDsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_setIDsResultMsg.typecode)
        return response

    # op: IMedium_refreshState
    def IMedium_refreshState(self, request, **kw):
        if isinstance(request, IMedium_refreshStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_refreshStateResultMsg.typecode)
        return response

    # op: IMedium_getSnapshotIds
    def IMedium_getSnapshotIds(self, request, **kw):
        if isinstance(request, IMedium_getSnapshotIdsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getSnapshotIdsResultMsg.typecode)
        return response

    # op: IMedium_lockRead
    def IMedium_lockRead(self, request, **kw):
        if isinstance(request, IMedium_lockReadRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_lockReadResultMsg.typecode)
        return response

    # op: IMedium_unlockRead
    def IMedium_unlockRead(self, request, **kw):
        if isinstance(request, IMedium_unlockReadRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_unlockReadResultMsg.typecode)
        return response

    # op: IMedium_lockWrite
    def IMedium_lockWrite(self, request, **kw):
        if isinstance(request, IMedium_lockWriteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_lockWriteResultMsg.typecode)
        return response

    # op: IMedium_unlockWrite
    def IMedium_unlockWrite(self, request, **kw):
        if isinstance(request, IMedium_unlockWriteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_unlockWriteResultMsg.typecode)
        return response

    # op: IMedium_close
    def IMedium_close(self, request, **kw):
        if isinstance(request, IMedium_closeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_closeResultMsg.typecode)
        return response

    # op: IMedium_getProperty
    def IMedium_getProperty(self, request, **kw):
        if isinstance(request, IMedium_getPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getPropertyResultMsg.typecode)
        return response

    # op: IMedium_setProperty
    def IMedium_setProperty(self, request, **kw):
        if isinstance(request, IMedium_setPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_setPropertyResultMsg.typecode)
        return response

    # op: IMedium_getProperties
    def IMedium_getProperties(self, request, **kw):
        if isinstance(request, IMedium_getPropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getPropertiesResultMsg.typecode)
        return response

    # op: IMedium_setProperties
    def IMedium_setProperties(self, request, **kw):
        if isinstance(request, IMedium_setPropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_setPropertiesResultMsg.typecode)
        return response

    # op: IMedium_createBaseStorage
    def IMedium_createBaseStorage(self, request, **kw):
        if isinstance(request, IMedium_createBaseStorageRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_createBaseStorageResultMsg.typecode)
        return response

    # op: IMedium_deleteStorage
    def IMedium_deleteStorage(self, request, **kw):
        if isinstance(request, IMedium_deleteStorageRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_deleteStorageResultMsg.typecode)
        return response

    # op: IMedium_createDiffStorage
    def IMedium_createDiffStorage(self, request, **kw):
        if isinstance(request, IMedium_createDiffStorageRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_createDiffStorageResultMsg.typecode)
        return response

    # op: IMedium_mergeTo
    def IMedium_mergeTo(self, request, **kw):
        if isinstance(request, IMedium_mergeToRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_mergeToResultMsg.typecode)
        return response

    # op: IMedium_cloneTo
    def IMedium_cloneTo(self, request, **kw):
        if isinstance(request, IMedium_cloneToRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_cloneToResultMsg.typecode)
        return response

    # op: IMedium_compact
    def IMedium_compact(self, request, **kw):
        if isinstance(request, IMedium_compactRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_compactResultMsg.typecode)
        return response

    # op: IMedium_resize
    def IMedium_resize(self, request, **kw):
        if isinstance(request, IMedium_resizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_resizeResultMsg.typecode)
        return response

    # op: IMedium_reset
    def IMedium_reset(self, request, **kw):
        if isinstance(request, IMedium_resetRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_resetResultMsg.typecode)
        return response

    # op: IMediumFormat_getId
    def IMediumFormat_getId(self, request, **kw):
        if isinstance(request, IMediumFormat_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumFormat_getIdResultMsg.typecode)
        return response

    # op: IMediumFormat_getName
    def IMediumFormat_getName(self, request, **kw):
        if isinstance(request, IMediumFormat_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumFormat_getNameResultMsg.typecode)
        return response

    # op: IMediumFormat_getCapabilities
    def IMediumFormat_getCapabilities(self, request, **kw):
        if isinstance(request, IMediumFormat_getCapabilitiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumFormat_getCapabilitiesResultMsg.typecode)
        return response

    # op: IMediumFormat_describeFileExtensions
    def IMediumFormat_describeFileExtensions(self, request, **kw):
        if isinstance(request, IMediumFormat_describeFileExtensionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumFormat_describeFileExtensionsResultMsg.typecode)
        return response

    # op: IMediumFormat_describeProperties
    def IMediumFormat_describeProperties(self, request, **kw):
        if isinstance(request, IMediumFormat_describePropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumFormat_describePropertiesResultMsg.typecode)
        return response

    # op: IKeyboard_getEventSource
    def IKeyboard_getEventSource(self, request, **kw):
        if isinstance(request, IKeyboard_getEventSourceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IKeyboard_getEventSourceResultMsg.typecode)
        return response

    # op: IKeyboard_putScancode
    def IKeyboard_putScancode(self, request, **kw):
        if isinstance(request, IKeyboard_putScancodeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IKeyboard_putScancodeResultMsg.typecode)
        return response

    # op: IKeyboard_putScancodes
    def IKeyboard_putScancodes(self, request, **kw):
        if isinstance(request, IKeyboard_putScancodesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IKeyboard_putScancodesResultMsg.typecode)
        return response

    # op: IKeyboard_putCAD
    def IKeyboard_putCAD(self, request, **kw):
        if isinstance(request, IKeyboard_putCADRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IKeyboard_putCADResultMsg.typecode)
        return response

    # op: IMouse_getAbsoluteSupported
    def IMouse_getAbsoluteSupported(self, request, **kw):
        if isinstance(request, IMouse_getAbsoluteSupportedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouse_getAbsoluteSupportedResultMsg.typecode)
        return response

    # op: IMouse_getRelativeSupported
    def IMouse_getRelativeSupported(self, request, **kw):
        if isinstance(request, IMouse_getRelativeSupportedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouse_getRelativeSupportedResultMsg.typecode)
        return response

    # op: IMouse_getNeedsHostCursor
    def IMouse_getNeedsHostCursor(self, request, **kw):
        if isinstance(request, IMouse_getNeedsHostCursorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouse_getNeedsHostCursorResultMsg.typecode)
        return response

    # op: IMouse_getEventSource
    def IMouse_getEventSource(self, request, **kw):
        if isinstance(request, IMouse_getEventSourceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouse_getEventSourceResultMsg.typecode)
        return response

    # op: IMouse_putMouseEvent
    def IMouse_putMouseEvent(self, request, **kw):
        if isinstance(request, IMouse_putMouseEventRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouse_putMouseEventResultMsg.typecode)
        return response

    # op: IMouse_putMouseEventAbsolute
    def IMouse_putMouseEventAbsolute(self, request, **kw):
        if isinstance(request, IMouse_putMouseEventAbsoluteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouse_putMouseEventAbsoluteResultMsg.typecode)
        return response

    # op: IDisplay_getScreenResolution
    def IDisplay_getScreenResolution(self, request, **kw):
        if isinstance(request, IDisplay_getScreenResolutionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDisplay_getScreenResolutionResultMsg.typecode)
        return response

    # op: IDisplay_setVideoModeHint
    def IDisplay_setVideoModeHint(self, request, **kw):
        if isinstance(request, IDisplay_setVideoModeHintRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDisplay_setVideoModeHintResultMsg.typecode)
        return response

    # op: IDisplay_setSeamlessMode
    def IDisplay_setSeamlessMode(self, request, **kw):
        if isinstance(request, IDisplay_setSeamlessModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDisplay_setSeamlessModeResultMsg.typecode)
        return response

    # op: IDisplay_takeScreenShotToArray
    def IDisplay_takeScreenShotToArray(self, request, **kw):
        if isinstance(request, IDisplay_takeScreenShotToArrayRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDisplay_takeScreenShotToArrayResultMsg.typecode)
        return response

    # op: IDisplay_takeScreenShotPNGToArray
    def IDisplay_takeScreenShotPNGToArray(self, request, **kw):
        if isinstance(request, IDisplay_takeScreenShotPNGToArrayRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDisplay_takeScreenShotPNGToArrayResultMsg.typecode)
        return response

    # op: IDisplay_invalidateAndUpdate
    def IDisplay_invalidateAndUpdate(self, request, **kw):
        if isinstance(request, IDisplay_invalidateAndUpdateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDisplay_invalidateAndUpdateResultMsg.typecode)
        return response

    # op: IDisplay_resizeCompleted
    def IDisplay_resizeCompleted(self, request, **kw):
        if isinstance(request, IDisplay_resizeCompletedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDisplay_resizeCompletedResultMsg.typecode)
        return response

    # op: INetworkAdapter_getAdapterType
    def INetworkAdapter_getAdapterType(self, request, **kw):
        if isinstance(request, INetworkAdapter_getAdapterTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getAdapterTypeResultMsg.typecode)
        return response

    # op: INetworkAdapter_setAdapterType
    def INetworkAdapter_setAdapterType(self, request, **kw):
        if isinstance(request, INetworkAdapter_setAdapterTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setAdapterTypeResultMsg.typecode)
        return response

    # op: INetworkAdapter_getSlot
    def INetworkAdapter_getSlot(self, request, **kw):
        if isinstance(request, INetworkAdapter_getSlotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getSlotResultMsg.typecode)
        return response

    # op: INetworkAdapter_getEnabled
    def INetworkAdapter_getEnabled(self, request, **kw):
        if isinstance(request, INetworkAdapter_getEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getEnabledResultMsg.typecode)
        return response

    # op: INetworkAdapter_setEnabled
    def INetworkAdapter_setEnabled(self, request, **kw):
        if isinstance(request, INetworkAdapter_setEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setEnabledResultMsg.typecode)
        return response

    # op: INetworkAdapter_getMACAddress
    def INetworkAdapter_getMACAddress(self, request, **kw):
        if isinstance(request, INetworkAdapter_getMACAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getMACAddressResultMsg.typecode)
        return response

    # op: INetworkAdapter_setMACAddress
    def INetworkAdapter_setMACAddress(self, request, **kw):
        if isinstance(request, INetworkAdapter_setMACAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setMACAddressResultMsg.typecode)
        return response

    # op: INetworkAdapter_getAttachmentType
    def INetworkAdapter_getAttachmentType(self, request, **kw):
        if isinstance(request, INetworkAdapter_getAttachmentTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getAttachmentTypeResultMsg.typecode)
        return response

    # op: INetworkAdapter_setAttachmentType
    def INetworkAdapter_setAttachmentType(self, request, **kw):
        if isinstance(request, INetworkAdapter_setAttachmentTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setAttachmentTypeResultMsg.typecode)
        return response

    # op: INetworkAdapter_getBridgedInterface
    def INetworkAdapter_getBridgedInterface(self, request, **kw):
        if isinstance(request, INetworkAdapter_getBridgedInterfaceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getBridgedInterfaceResultMsg.typecode)
        return response

    # op: INetworkAdapter_setBridgedInterface
    def INetworkAdapter_setBridgedInterface(self, request, **kw):
        if isinstance(request, INetworkAdapter_setBridgedInterfaceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setBridgedInterfaceResultMsg.typecode)
        return response

    # op: INetworkAdapter_getHostOnlyInterface
    def INetworkAdapter_getHostOnlyInterface(self, request, **kw):
        if isinstance(request, INetworkAdapter_getHostOnlyInterfaceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getHostOnlyInterfaceResultMsg.typecode)
        return response

    # op: INetworkAdapter_setHostOnlyInterface
    def INetworkAdapter_setHostOnlyInterface(self, request, **kw):
        if isinstance(request, INetworkAdapter_setHostOnlyInterfaceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setHostOnlyInterfaceResultMsg.typecode)
        return response

    # op: INetworkAdapter_getInternalNetwork
    def INetworkAdapter_getInternalNetwork(self, request, **kw):
        if isinstance(request, INetworkAdapter_getInternalNetworkRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getInternalNetworkResultMsg.typecode)
        return response

    # op: INetworkAdapter_setInternalNetwork
    def INetworkAdapter_setInternalNetwork(self, request, **kw):
        if isinstance(request, INetworkAdapter_setInternalNetworkRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setInternalNetworkResultMsg.typecode)
        return response

    # op: INetworkAdapter_getNATNetwork
    def INetworkAdapter_getNATNetwork(self, request, **kw):
        if isinstance(request, INetworkAdapter_getNATNetworkRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getNATNetworkResultMsg.typecode)
        return response

    # op: INetworkAdapter_setNATNetwork
    def INetworkAdapter_setNATNetwork(self, request, **kw):
        if isinstance(request, INetworkAdapter_setNATNetworkRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setNATNetworkResultMsg.typecode)
        return response

    # op: INetworkAdapter_getGenericDriver
    def INetworkAdapter_getGenericDriver(self, request, **kw):
        if isinstance(request, INetworkAdapter_getGenericDriverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getGenericDriverResultMsg.typecode)
        return response

    # op: INetworkAdapter_setGenericDriver
    def INetworkAdapter_setGenericDriver(self, request, **kw):
        if isinstance(request, INetworkAdapter_setGenericDriverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setGenericDriverResultMsg.typecode)
        return response

    # op: INetworkAdapter_getCableConnected
    def INetworkAdapter_getCableConnected(self, request, **kw):
        if isinstance(request, INetworkAdapter_getCableConnectedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getCableConnectedResultMsg.typecode)
        return response

    # op: INetworkAdapter_setCableConnected
    def INetworkAdapter_setCableConnected(self, request, **kw):
        if isinstance(request, INetworkAdapter_setCableConnectedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setCableConnectedResultMsg.typecode)
        return response

    # op: INetworkAdapter_getLineSpeed
    def INetworkAdapter_getLineSpeed(self, request, **kw):
        if isinstance(request, INetworkAdapter_getLineSpeedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getLineSpeedResultMsg.typecode)
        return response

    # op: INetworkAdapter_setLineSpeed
    def INetworkAdapter_setLineSpeed(self, request, **kw):
        if isinstance(request, INetworkAdapter_setLineSpeedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setLineSpeedResultMsg.typecode)
        return response

    # op: INetworkAdapter_getPromiscModePolicy
    def INetworkAdapter_getPromiscModePolicy(self, request, **kw):
        if isinstance(request, INetworkAdapter_getPromiscModePolicyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getPromiscModePolicyResultMsg.typecode)
        return response

    # op: INetworkAdapter_setPromiscModePolicy
    def INetworkAdapter_setPromiscModePolicy(self, request, **kw):
        if isinstance(request, INetworkAdapter_setPromiscModePolicyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setPromiscModePolicyResultMsg.typecode)
        return response

    # op: INetworkAdapter_getTraceEnabled
    def INetworkAdapter_getTraceEnabled(self, request, **kw):
        if isinstance(request, INetworkAdapter_getTraceEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getTraceEnabledResultMsg.typecode)
        return response

    # op: INetworkAdapter_setTraceEnabled
    def INetworkAdapter_setTraceEnabled(self, request, **kw):
        if isinstance(request, INetworkAdapter_setTraceEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setTraceEnabledResultMsg.typecode)
        return response

    # op: INetworkAdapter_getTraceFile
    def INetworkAdapter_getTraceFile(self, request, **kw):
        if isinstance(request, INetworkAdapter_getTraceFileRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getTraceFileResultMsg.typecode)
        return response

    # op: INetworkAdapter_setTraceFile
    def INetworkAdapter_setTraceFile(self, request, **kw):
        if isinstance(request, INetworkAdapter_setTraceFileRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setTraceFileResultMsg.typecode)
        return response

    # op: INetworkAdapter_getNatDriver
    def INetworkAdapter_getNatDriver(self, request, **kw):
        if isinstance(request, INetworkAdapter_getNatDriverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getNatDriverResultMsg.typecode)
        return response

    # op: INetworkAdapter_getBootPriority
    def INetworkAdapter_getBootPriority(self, request, **kw):
        if isinstance(request, INetworkAdapter_getBootPriorityRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getBootPriorityResultMsg.typecode)
        return response

    # op: INetworkAdapter_setBootPriority
    def INetworkAdapter_setBootPriority(self, request, **kw):
        if isinstance(request, INetworkAdapter_setBootPriorityRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setBootPriorityResultMsg.typecode)
        return response

    # op: INetworkAdapter_getBandwidthGroup
    def INetworkAdapter_getBandwidthGroup(self, request, **kw):
        if isinstance(request, INetworkAdapter_getBandwidthGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getBandwidthGroupResultMsg.typecode)
        return response

    # op: INetworkAdapter_setBandwidthGroup
    def INetworkAdapter_setBandwidthGroup(self, request, **kw):
        if isinstance(request, INetworkAdapter_setBandwidthGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setBandwidthGroupResultMsg.typecode)
        return response

    # op: INetworkAdapter_getProperty
    def INetworkAdapter_getProperty(self, request, **kw):
        if isinstance(request, INetworkAdapter_getPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getPropertyResultMsg.typecode)
        return response

    # op: INetworkAdapter_setProperty
    def INetworkAdapter_setProperty(self, request, **kw):
        if isinstance(request, INetworkAdapter_setPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setPropertyResultMsg.typecode)
        return response

    # op: INetworkAdapter_getProperties
    def INetworkAdapter_getProperties(self, request, **kw):
        if isinstance(request, INetworkAdapter_getPropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getPropertiesResultMsg.typecode)
        return response

    # op: ISerialPort_getSlot
    def ISerialPort_getSlot(self, request, **kw):
        if isinstance(request, ISerialPort_getSlotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_getSlotResultMsg.typecode)
        return response

    # op: ISerialPort_getEnabled
    def ISerialPort_getEnabled(self, request, **kw):
        if isinstance(request, ISerialPort_getEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_getEnabledResultMsg.typecode)
        return response

    # op: ISerialPort_setEnabled
    def ISerialPort_setEnabled(self, request, **kw):
        if isinstance(request, ISerialPort_setEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_setEnabledResultMsg.typecode)
        return response

    # op: ISerialPort_getIOBase
    def ISerialPort_getIOBase(self, request, **kw):
        if isinstance(request, ISerialPort_getIOBaseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_getIOBaseResultMsg.typecode)
        return response

    # op: ISerialPort_setIOBase
    def ISerialPort_setIOBase(self, request, **kw):
        if isinstance(request, ISerialPort_setIOBaseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_setIOBaseResultMsg.typecode)
        return response

    # op: ISerialPort_getIRQ
    def ISerialPort_getIRQ(self, request, **kw):
        if isinstance(request, ISerialPort_getIRQRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_getIRQResultMsg.typecode)
        return response

    # op: ISerialPort_setIRQ
    def ISerialPort_setIRQ(self, request, **kw):
        if isinstance(request, ISerialPort_setIRQRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_setIRQResultMsg.typecode)
        return response

    # op: ISerialPort_getHostMode
    def ISerialPort_getHostMode(self, request, **kw):
        if isinstance(request, ISerialPort_getHostModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_getHostModeResultMsg.typecode)
        return response

    # op: ISerialPort_setHostMode
    def ISerialPort_setHostMode(self, request, **kw):
        if isinstance(request, ISerialPort_setHostModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_setHostModeResultMsg.typecode)
        return response

    # op: ISerialPort_getServer
    def ISerialPort_getServer(self, request, **kw):
        if isinstance(request, ISerialPort_getServerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_getServerResultMsg.typecode)
        return response

    # op: ISerialPort_setServer
    def ISerialPort_setServer(self, request, **kw):
        if isinstance(request, ISerialPort_setServerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_setServerResultMsg.typecode)
        return response

    # op: ISerialPort_getPath
    def ISerialPort_getPath(self, request, **kw):
        if isinstance(request, ISerialPort_getPathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_getPathResultMsg.typecode)
        return response

    # op: ISerialPort_setPath
    def ISerialPort_setPath(self, request, **kw):
        if isinstance(request, ISerialPort_setPathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_setPathResultMsg.typecode)
        return response

    # op: IParallelPort_getSlot
    def IParallelPort_getSlot(self, request, **kw):
        if isinstance(request, IParallelPort_getSlotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_getSlotResultMsg.typecode)
        return response

    # op: IParallelPort_getEnabled
    def IParallelPort_getEnabled(self, request, **kw):
        if isinstance(request, IParallelPort_getEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_getEnabledResultMsg.typecode)
        return response

    # op: IParallelPort_setEnabled
    def IParallelPort_setEnabled(self, request, **kw):
        if isinstance(request, IParallelPort_setEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_setEnabledResultMsg.typecode)
        return response

    # op: IParallelPort_getIOBase
    def IParallelPort_getIOBase(self, request, **kw):
        if isinstance(request, IParallelPort_getIOBaseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_getIOBaseResultMsg.typecode)
        return response

    # op: IParallelPort_setIOBase
    def IParallelPort_setIOBase(self, request, **kw):
        if isinstance(request, IParallelPort_setIOBaseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_setIOBaseResultMsg.typecode)
        return response

    # op: IParallelPort_getIRQ
    def IParallelPort_getIRQ(self, request, **kw):
        if isinstance(request, IParallelPort_getIRQRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_getIRQResultMsg.typecode)
        return response

    # op: IParallelPort_setIRQ
    def IParallelPort_setIRQ(self, request, **kw):
        if isinstance(request, IParallelPort_setIRQRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_setIRQResultMsg.typecode)
        return response

    # op: IParallelPort_getPath
    def IParallelPort_getPath(self, request, **kw):
        if isinstance(request, IParallelPort_getPathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_getPathResultMsg.typecode)
        return response

    # op: IParallelPort_setPath
    def IParallelPort_setPath(self, request, **kw):
        if isinstance(request, IParallelPort_setPathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_setPathResultMsg.typecode)
        return response

    # op: IUSBController_getEnabled
    def IUSBController_getEnabled(self, request, **kw):
        if isinstance(request, IUSBController_getEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_getEnabledResultMsg.typecode)
        return response

    # op: IUSBController_setEnabled
    def IUSBController_setEnabled(self, request, **kw):
        if isinstance(request, IUSBController_setEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_setEnabledResultMsg.typecode)
        return response

    # op: IUSBController_getEnabledEhci
    def IUSBController_getEnabledEhci(self, request, **kw):
        if isinstance(request, IUSBController_getEnabledEhciRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_getEnabledEhciResultMsg.typecode)
        return response

    # op: IUSBController_setEnabledEhci
    def IUSBController_setEnabledEhci(self, request, **kw):
        if isinstance(request, IUSBController_setEnabledEhciRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_setEnabledEhciResultMsg.typecode)
        return response

    # op: IUSBController_getProxyAvailable
    def IUSBController_getProxyAvailable(self, request, **kw):
        if isinstance(request, IUSBController_getProxyAvailableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_getProxyAvailableResultMsg.typecode)
        return response

    # op: IUSBController_getUSBStandard
    def IUSBController_getUSBStandard(self, request, **kw):
        if isinstance(request, IUSBController_getUSBStandardRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_getUSBStandardResultMsg.typecode)
        return response

    # op: IUSBController_getDeviceFilters
    def IUSBController_getDeviceFilters(self, request, **kw):
        if isinstance(request, IUSBController_getDeviceFiltersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_getDeviceFiltersResultMsg.typecode)
        return response

    # op: IUSBController_createDeviceFilter
    def IUSBController_createDeviceFilter(self, request, **kw):
        if isinstance(request, IUSBController_createDeviceFilterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_createDeviceFilterResultMsg.typecode)
        return response

    # op: IUSBController_insertDeviceFilter
    def IUSBController_insertDeviceFilter(self, request, **kw):
        if isinstance(request, IUSBController_insertDeviceFilterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_insertDeviceFilterResultMsg.typecode)
        return response

    # op: IUSBController_removeDeviceFilter
    def IUSBController_removeDeviceFilter(self, request, **kw):
        if isinstance(request, IUSBController_removeDeviceFilterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_removeDeviceFilterResultMsg.typecode)
        return response

    # op: IUSBDevice_getId
    def IUSBDevice_getId(self, request, **kw):
        if isinstance(request, IUSBDevice_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getIdResultMsg.typecode)
        return response

    # op: IUSBDevice_getVendorId
    def IUSBDevice_getVendorId(self, request, **kw):
        if isinstance(request, IUSBDevice_getVendorIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getVendorIdResultMsg.typecode)
        return response

    # op: IUSBDevice_getProductId
    def IUSBDevice_getProductId(self, request, **kw):
        if isinstance(request, IUSBDevice_getProductIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getProductIdResultMsg.typecode)
        return response

    # op: IUSBDevice_getRevision
    def IUSBDevice_getRevision(self, request, **kw):
        if isinstance(request, IUSBDevice_getRevisionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getRevisionResultMsg.typecode)
        return response

    # op: IUSBDevice_getManufacturer
    def IUSBDevice_getManufacturer(self, request, **kw):
        if isinstance(request, IUSBDevice_getManufacturerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getManufacturerResultMsg.typecode)
        return response

    # op: IUSBDevice_getProduct
    def IUSBDevice_getProduct(self, request, **kw):
        if isinstance(request, IUSBDevice_getProductRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getProductResultMsg.typecode)
        return response

    # op: IUSBDevice_getSerialNumber
    def IUSBDevice_getSerialNumber(self, request, **kw):
        if isinstance(request, IUSBDevice_getSerialNumberRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getSerialNumberResultMsg.typecode)
        return response

    # op: IUSBDevice_getAddress
    def IUSBDevice_getAddress(self, request, **kw):
        if isinstance(request, IUSBDevice_getAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getAddressResultMsg.typecode)
        return response

    # op: IUSBDevice_getPort
    def IUSBDevice_getPort(self, request, **kw):
        if isinstance(request, IUSBDevice_getPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getPortResultMsg.typecode)
        return response

    # op: IUSBDevice_getVersion
    def IUSBDevice_getVersion(self, request, **kw):
        if isinstance(request, IUSBDevice_getVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getVersionResultMsg.typecode)
        return response

    # op: IUSBDevice_getPortVersion
    def IUSBDevice_getPortVersion(self, request, **kw):
        if isinstance(request, IUSBDevice_getPortVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getPortVersionResultMsg.typecode)
        return response

    # op: IUSBDevice_getRemote
    def IUSBDevice_getRemote(self, request, **kw):
        if isinstance(request, IUSBDevice_getRemoteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getRemoteResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getName
    def IUSBDeviceFilter_getName(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getNameResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setName
    def IUSBDeviceFilter_setName(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_setNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setNameResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getActive
    def IUSBDeviceFilter_getActive(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_getActiveRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getActiveResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setActive
    def IUSBDeviceFilter_setActive(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_setActiveRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setActiveResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getVendorId
    def IUSBDeviceFilter_getVendorId(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_getVendorIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getVendorIdResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setVendorId
    def IUSBDeviceFilter_setVendorId(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_setVendorIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setVendorIdResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getProductId
    def IUSBDeviceFilter_getProductId(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_getProductIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getProductIdResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setProductId
    def IUSBDeviceFilter_setProductId(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_setProductIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setProductIdResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getRevision
    def IUSBDeviceFilter_getRevision(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_getRevisionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getRevisionResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setRevision
    def IUSBDeviceFilter_setRevision(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_setRevisionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setRevisionResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getManufacturer
    def IUSBDeviceFilter_getManufacturer(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_getManufacturerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getManufacturerResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setManufacturer
    def IUSBDeviceFilter_setManufacturer(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_setManufacturerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setManufacturerResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getProduct
    def IUSBDeviceFilter_getProduct(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_getProductRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getProductResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setProduct
    def IUSBDeviceFilter_setProduct(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_setProductRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setProductResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getSerialNumber
    def IUSBDeviceFilter_getSerialNumber(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_getSerialNumberRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getSerialNumberResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setSerialNumber
    def IUSBDeviceFilter_setSerialNumber(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_setSerialNumberRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setSerialNumberResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getPort
    def IUSBDeviceFilter_getPort(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_getPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getPortResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setPort
    def IUSBDeviceFilter_setPort(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_setPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setPortResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getRemote
    def IUSBDeviceFilter_getRemote(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_getRemoteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getRemoteResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setRemote
    def IUSBDeviceFilter_setRemote(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_setRemoteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setRemoteResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getMaskedInterfaces
    def IUSBDeviceFilter_getMaskedInterfaces(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_getMaskedInterfacesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getMaskedInterfacesResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setMaskedInterfaces
    def IUSBDeviceFilter_setMaskedInterfaces(self, request, **kw):
        if isinstance(request, IUSBDeviceFilter_setMaskedInterfacesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setMaskedInterfacesResultMsg.typecode)
        return response

    # op: IHostUSBDevice_getState
    def IHostUSBDevice_getState(self, request, **kw):
        if isinstance(request, IHostUSBDevice_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostUSBDevice_getStateResultMsg.typecode)
        return response

    # op: IHostUSBDeviceFilter_getAction
    def IHostUSBDeviceFilter_getAction(self, request, **kw):
        if isinstance(request, IHostUSBDeviceFilter_getActionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostUSBDeviceFilter_getActionResultMsg.typecode)
        return response

    # op: IHostUSBDeviceFilter_setAction
    def IHostUSBDeviceFilter_setAction(self, request, **kw):
        if isinstance(request, IHostUSBDeviceFilter_setActionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostUSBDeviceFilter_setActionResultMsg.typecode)
        return response

    # op: IAudioAdapter_getEnabled
    def IAudioAdapter_getEnabled(self, request, **kw):
        if isinstance(request, IAudioAdapter_getEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAudioAdapter_getEnabledResultMsg.typecode)
        return response

    # op: IAudioAdapter_setEnabled
    def IAudioAdapter_setEnabled(self, request, **kw):
        if isinstance(request, IAudioAdapter_setEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAudioAdapter_setEnabledResultMsg.typecode)
        return response

    # op: IAudioAdapter_getAudioController
    def IAudioAdapter_getAudioController(self, request, **kw):
        if isinstance(request, IAudioAdapter_getAudioControllerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAudioAdapter_getAudioControllerResultMsg.typecode)
        return response

    # op: IAudioAdapter_setAudioController
    def IAudioAdapter_setAudioController(self, request, **kw):
        if isinstance(request, IAudioAdapter_setAudioControllerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAudioAdapter_setAudioControllerResultMsg.typecode)
        return response

    # op: IAudioAdapter_getAudioDriver
    def IAudioAdapter_getAudioDriver(self, request, **kw):
        if isinstance(request, IAudioAdapter_getAudioDriverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAudioAdapter_getAudioDriverResultMsg.typecode)
        return response

    # op: IAudioAdapter_setAudioDriver
    def IAudioAdapter_setAudioDriver(self, request, **kw):
        if isinstance(request, IAudioAdapter_setAudioDriverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAudioAdapter_setAudioDriverResultMsg.typecode)
        return response

    # op: IVRDEServer_getEnabled
    def IVRDEServer_getEnabled(self, request, **kw):
        if isinstance(request, IVRDEServer_getEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getEnabledResultMsg.typecode)
        return response

    # op: IVRDEServer_setEnabled
    def IVRDEServer_setEnabled(self, request, **kw):
        if isinstance(request, IVRDEServer_setEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setEnabledResultMsg.typecode)
        return response

    # op: IVRDEServer_getAuthType
    def IVRDEServer_getAuthType(self, request, **kw):
        if isinstance(request, IVRDEServer_getAuthTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getAuthTypeResultMsg.typecode)
        return response

    # op: IVRDEServer_setAuthType
    def IVRDEServer_setAuthType(self, request, **kw):
        if isinstance(request, IVRDEServer_setAuthTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setAuthTypeResultMsg.typecode)
        return response

    # op: IVRDEServer_getAuthTimeout
    def IVRDEServer_getAuthTimeout(self, request, **kw):
        if isinstance(request, IVRDEServer_getAuthTimeoutRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getAuthTimeoutResultMsg.typecode)
        return response

    # op: IVRDEServer_setAuthTimeout
    def IVRDEServer_setAuthTimeout(self, request, **kw):
        if isinstance(request, IVRDEServer_setAuthTimeoutRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setAuthTimeoutResultMsg.typecode)
        return response

    # op: IVRDEServer_getAllowMultiConnection
    def IVRDEServer_getAllowMultiConnection(self, request, **kw):
        if isinstance(request, IVRDEServer_getAllowMultiConnectionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getAllowMultiConnectionResultMsg.typecode)
        return response

    # op: IVRDEServer_setAllowMultiConnection
    def IVRDEServer_setAllowMultiConnection(self, request, **kw):
        if isinstance(request, IVRDEServer_setAllowMultiConnectionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setAllowMultiConnectionResultMsg.typecode)
        return response

    # op: IVRDEServer_getReuseSingleConnection
    def IVRDEServer_getReuseSingleConnection(self, request, **kw):
        if isinstance(request, IVRDEServer_getReuseSingleConnectionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getReuseSingleConnectionResultMsg.typecode)
        return response

    # op: IVRDEServer_setReuseSingleConnection
    def IVRDEServer_setReuseSingleConnection(self, request, **kw):
        if isinstance(request, IVRDEServer_setReuseSingleConnectionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setReuseSingleConnectionResultMsg.typecode)
        return response

    # op: IVRDEServer_getVRDEExtPack
    def IVRDEServer_getVRDEExtPack(self, request, **kw):
        if isinstance(request, IVRDEServer_getVRDEExtPackRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getVRDEExtPackResultMsg.typecode)
        return response

    # op: IVRDEServer_setVRDEExtPack
    def IVRDEServer_setVRDEExtPack(self, request, **kw):
        if isinstance(request, IVRDEServer_setVRDEExtPackRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setVRDEExtPackResultMsg.typecode)
        return response

    # op: IVRDEServer_getAuthLibrary
    def IVRDEServer_getAuthLibrary(self, request, **kw):
        if isinstance(request, IVRDEServer_getAuthLibraryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getAuthLibraryResultMsg.typecode)
        return response

    # op: IVRDEServer_setAuthLibrary
    def IVRDEServer_setAuthLibrary(self, request, **kw):
        if isinstance(request, IVRDEServer_setAuthLibraryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setAuthLibraryResultMsg.typecode)
        return response

    # op: IVRDEServer_getVRDEProperties
    def IVRDEServer_getVRDEProperties(self, request, **kw):
        if isinstance(request, IVRDEServer_getVRDEPropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getVRDEPropertiesResultMsg.typecode)
        return response

    # op: IVRDEServer_setVRDEProperty
    def IVRDEServer_setVRDEProperty(self, request, **kw):
        if isinstance(request, IVRDEServer_setVRDEPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setVRDEPropertyResultMsg.typecode)
        return response

    # op: IVRDEServer_getVRDEProperty
    def IVRDEServer_getVRDEProperty(self, request, **kw):
        if isinstance(request, IVRDEServer_getVRDEPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getVRDEPropertyResultMsg.typecode)
        return response

    # op: ISession_getState
    def ISession_getState(self, request, **kw):
        if isinstance(request, ISession_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISession_getStateResultMsg.typecode)
        return response

    # op: ISession_getType
    def ISession_getType(self, request, **kw):
        if isinstance(request, ISession_getTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISession_getTypeResultMsg.typecode)
        return response

    # op: ISession_getMachine
    def ISession_getMachine(self, request, **kw):
        if isinstance(request, ISession_getMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISession_getMachineResultMsg.typecode)
        return response

    # op: ISession_getConsole
    def ISession_getConsole(self, request, **kw):
        if isinstance(request, ISession_getConsoleRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISession_getConsoleResultMsg.typecode)
        return response

    # op: ISession_unlockMachine
    def ISession_unlockMachine(self, request, **kw):
        if isinstance(request, ISession_unlockMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISession_unlockMachineResultMsg.typecode)
        return response

    # op: IStorageController_getName
    def IStorageController_getName(self, request, **kw):
        if isinstance(request, IStorageController_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getNameResultMsg.typecode)
        return response

    # op: IStorageController_getMaxDevicesPerPortCount
    def IStorageController_getMaxDevicesPerPortCount(self, request, **kw):
        if isinstance(request, IStorageController_getMaxDevicesPerPortCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getMaxDevicesPerPortCountResultMsg.typecode)
        return response

    # op: IStorageController_getMinPortCount
    def IStorageController_getMinPortCount(self, request, **kw):
        if isinstance(request, IStorageController_getMinPortCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getMinPortCountResultMsg.typecode)
        return response

    # op: IStorageController_getMaxPortCount
    def IStorageController_getMaxPortCount(self, request, **kw):
        if isinstance(request, IStorageController_getMaxPortCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getMaxPortCountResultMsg.typecode)
        return response

    # op: IStorageController_getInstance
    def IStorageController_getInstance(self, request, **kw):
        if isinstance(request, IStorageController_getInstanceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getInstanceResultMsg.typecode)
        return response

    # op: IStorageController_setInstance
    def IStorageController_setInstance(self, request, **kw):
        if isinstance(request, IStorageController_setInstanceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_setInstanceResultMsg.typecode)
        return response

    # op: IStorageController_getPortCount
    def IStorageController_getPortCount(self, request, **kw):
        if isinstance(request, IStorageController_getPortCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getPortCountResultMsg.typecode)
        return response

    # op: IStorageController_setPortCount
    def IStorageController_setPortCount(self, request, **kw):
        if isinstance(request, IStorageController_setPortCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_setPortCountResultMsg.typecode)
        return response

    # op: IStorageController_getBus
    def IStorageController_getBus(self, request, **kw):
        if isinstance(request, IStorageController_getBusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getBusResultMsg.typecode)
        return response

    # op: IStorageController_getControllerType
    def IStorageController_getControllerType(self, request, **kw):
        if isinstance(request, IStorageController_getControllerTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getControllerTypeResultMsg.typecode)
        return response

    # op: IStorageController_setControllerType
    def IStorageController_setControllerType(self, request, **kw):
        if isinstance(request, IStorageController_setControllerTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_setControllerTypeResultMsg.typecode)
        return response

    # op: IStorageController_getUseHostIOCache
    def IStorageController_getUseHostIOCache(self, request, **kw):
        if isinstance(request, IStorageController_getUseHostIOCacheRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getUseHostIOCacheResultMsg.typecode)
        return response

    # op: IStorageController_setUseHostIOCache
    def IStorageController_setUseHostIOCache(self, request, **kw):
        if isinstance(request, IStorageController_setUseHostIOCacheRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_setUseHostIOCacheResultMsg.typecode)
        return response

    # op: IStorageController_getBootable
    def IStorageController_getBootable(self, request, **kw):
        if isinstance(request, IStorageController_getBootableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getBootableResultMsg.typecode)
        return response

    # op: IStorageController_getIDEEmulationPort
    def IStorageController_getIDEEmulationPort(self, request, **kw):
        if isinstance(request, IStorageController_getIDEEmulationPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getIDEEmulationPortResultMsg.typecode)
        return response

    # op: IStorageController_setIDEEmulationPort
    def IStorageController_setIDEEmulationPort(self, request, **kw):
        if isinstance(request, IStorageController_setIDEEmulationPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_setIDEEmulationPortResultMsg.typecode)
        return response

    # op: IManagedObjectRef_getInterfaceName
    def IManagedObjectRef_getInterfaceName(self, request, **kw):
        if isinstance(request, IManagedObjectRef_getInterfaceNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IManagedObjectRef_getInterfaceNameResultMsg.typecode)
        return response

    # op: IManagedObjectRef_release
    def IManagedObjectRef_release(self, request, **kw):
        if isinstance(request, IManagedObjectRef_releaseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IManagedObjectRef_releaseResultMsg.typecode)
        return response

    # op: IWebsessionManager_logon
    def IWebsessionManager_logon(self, request, **kw):
        if isinstance(request, IWebsessionManager_logonRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IWebsessionManager_logonResultMsg.typecode)
        return response

    # op: IWebsessionManager_getSessionObject
    def IWebsessionManager_getSessionObject(self, request, **kw):
        if isinstance(request, IWebsessionManager_getSessionObjectRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IWebsessionManager_getSessionObjectResultMsg.typecode)
        return response

    # op: IWebsessionManager_logoff
    def IWebsessionManager_logoff(self, request, **kw):
        if isinstance(request, IWebsessionManager_logoffRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IWebsessionManager_logoffResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getMetricName
    def IPerformanceMetric_getMetricName(self, request, **kw):
        if isinstance(request, IPerformanceMetric_getMetricNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getMetricNameResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getObject
    def IPerformanceMetric_getObject(self, request, **kw):
        if isinstance(request, IPerformanceMetric_getObjectRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getObjectResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getDescription
    def IPerformanceMetric_getDescription(self, request, **kw):
        if isinstance(request, IPerformanceMetric_getDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getDescriptionResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getPeriod
    def IPerformanceMetric_getPeriod(self, request, **kw):
        if isinstance(request, IPerformanceMetric_getPeriodRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getPeriodResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getCount
    def IPerformanceMetric_getCount(self, request, **kw):
        if isinstance(request, IPerformanceMetric_getCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getCountResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getUnit
    def IPerformanceMetric_getUnit(self, request, **kw):
        if isinstance(request, IPerformanceMetric_getUnitRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getUnitResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getMinimumValue
    def IPerformanceMetric_getMinimumValue(self, request, **kw):
        if isinstance(request, IPerformanceMetric_getMinimumValueRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getMinimumValueResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getMaximumValue
    def IPerformanceMetric_getMaximumValue(self, request, **kw):
        if isinstance(request, IPerformanceMetric_getMaximumValueRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getMaximumValueResultMsg.typecode)
        return response

    # op: IPerformanceCollector_getMetricNames
    def IPerformanceCollector_getMetricNames(self, request, **kw):
        if isinstance(request, IPerformanceCollector_getMetricNamesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceCollector_getMetricNamesResultMsg.typecode)
        return response

    # op: IPerformanceCollector_getMetrics
    def IPerformanceCollector_getMetrics(self, request, **kw):
        if isinstance(request, IPerformanceCollector_getMetricsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceCollector_getMetricsResultMsg.typecode)
        return response

    # op: IPerformanceCollector_setupMetrics
    def IPerformanceCollector_setupMetrics(self, request, **kw):
        if isinstance(request, IPerformanceCollector_setupMetricsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceCollector_setupMetricsResultMsg.typecode)
        return response

    # op: IPerformanceCollector_enableMetrics
    def IPerformanceCollector_enableMetrics(self, request, **kw):
        if isinstance(request, IPerformanceCollector_enableMetricsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceCollector_enableMetricsResultMsg.typecode)
        return response

    # op: IPerformanceCollector_disableMetrics
    def IPerformanceCollector_disableMetrics(self, request, **kw):
        if isinstance(request, IPerformanceCollector_disableMetricsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceCollector_disableMetricsResultMsg.typecode)
        return response

    # op: IPerformanceCollector_queryMetricsData
    def IPerformanceCollector_queryMetricsData(self, request, **kw):
        if isinstance(request, IPerformanceCollector_queryMetricsDataRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceCollector_queryMetricsDataResultMsg.typecode)
        return response

    # op: INATEngine_getNetwork
    def INATEngine_getNetwork(self, request, **kw):
        if isinstance(request, INATEngine_getNetworkRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getNetworkResultMsg.typecode)
        return response

    # op: INATEngine_setNetwork
    def INATEngine_setNetwork(self, request, **kw):
        if isinstance(request, INATEngine_setNetworkRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setNetworkResultMsg.typecode)
        return response

    # op: INATEngine_getHostIP
    def INATEngine_getHostIP(self, request, **kw):
        if isinstance(request, INATEngine_getHostIPRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getHostIPResultMsg.typecode)
        return response

    # op: INATEngine_setHostIP
    def INATEngine_setHostIP(self, request, **kw):
        if isinstance(request, INATEngine_setHostIPRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setHostIPResultMsg.typecode)
        return response

    # op: INATEngine_getTftpPrefix
    def INATEngine_getTftpPrefix(self, request, **kw):
        if isinstance(request, INATEngine_getTftpPrefixRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getTftpPrefixResultMsg.typecode)
        return response

    # op: INATEngine_setTftpPrefix
    def INATEngine_setTftpPrefix(self, request, **kw):
        if isinstance(request, INATEngine_setTftpPrefixRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setTftpPrefixResultMsg.typecode)
        return response

    # op: INATEngine_getTftpBootFile
    def INATEngine_getTftpBootFile(self, request, **kw):
        if isinstance(request, INATEngine_getTftpBootFileRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getTftpBootFileResultMsg.typecode)
        return response

    # op: INATEngine_setTftpBootFile
    def INATEngine_setTftpBootFile(self, request, **kw):
        if isinstance(request, INATEngine_setTftpBootFileRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setTftpBootFileResultMsg.typecode)
        return response

    # op: INATEngine_getTftpNextServer
    def INATEngine_getTftpNextServer(self, request, **kw):
        if isinstance(request, INATEngine_getTftpNextServerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getTftpNextServerResultMsg.typecode)
        return response

    # op: INATEngine_setTftpNextServer
    def INATEngine_setTftpNextServer(self, request, **kw):
        if isinstance(request, INATEngine_setTftpNextServerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setTftpNextServerResultMsg.typecode)
        return response

    # op: INATEngine_getAliasMode
    def INATEngine_getAliasMode(self, request, **kw):
        if isinstance(request, INATEngine_getAliasModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getAliasModeResultMsg.typecode)
        return response

    # op: INATEngine_setAliasMode
    def INATEngine_setAliasMode(self, request, **kw):
        if isinstance(request, INATEngine_setAliasModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setAliasModeResultMsg.typecode)
        return response

    # op: INATEngine_getDnsPassDomain
    def INATEngine_getDnsPassDomain(self, request, **kw):
        if isinstance(request, INATEngine_getDnsPassDomainRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getDnsPassDomainResultMsg.typecode)
        return response

    # op: INATEngine_setDnsPassDomain
    def INATEngine_setDnsPassDomain(self, request, **kw):
        if isinstance(request, INATEngine_setDnsPassDomainRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setDnsPassDomainResultMsg.typecode)
        return response

    # op: INATEngine_getDnsProxy
    def INATEngine_getDnsProxy(self, request, **kw):
        if isinstance(request, INATEngine_getDnsProxyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getDnsProxyResultMsg.typecode)
        return response

    # op: INATEngine_setDnsProxy
    def INATEngine_setDnsProxy(self, request, **kw):
        if isinstance(request, INATEngine_setDnsProxyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setDnsProxyResultMsg.typecode)
        return response

    # op: INATEngine_getDnsUseHostResolver
    def INATEngine_getDnsUseHostResolver(self, request, **kw):
        if isinstance(request, INATEngine_getDnsUseHostResolverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getDnsUseHostResolverResultMsg.typecode)
        return response

    # op: INATEngine_setDnsUseHostResolver
    def INATEngine_setDnsUseHostResolver(self, request, **kw):
        if isinstance(request, INATEngine_setDnsUseHostResolverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setDnsUseHostResolverResultMsg.typecode)
        return response

    # op: INATEngine_getRedirects
    def INATEngine_getRedirects(self, request, **kw):
        if isinstance(request, INATEngine_getRedirectsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getRedirectsResultMsg.typecode)
        return response

    # op: INATEngine_setNetworkSettings
    def INATEngine_setNetworkSettings(self, request, **kw):
        if isinstance(request, INATEngine_setNetworkSettingsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setNetworkSettingsResultMsg.typecode)
        return response

    # op: INATEngine_getNetworkSettings
    def INATEngine_getNetworkSettings(self, request, **kw):
        if isinstance(request, INATEngine_getNetworkSettingsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getNetworkSettingsResultMsg.typecode)
        return response

    # op: INATEngine_addRedirect
    def INATEngine_addRedirect(self, request, **kw):
        if isinstance(request, INATEngine_addRedirectRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_addRedirectResultMsg.typecode)
        return response

    # op: INATEngine_removeRedirect
    def INATEngine_removeRedirect(self, request, **kw):
        if isinstance(request, INATEngine_removeRedirectRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_removeRedirectResultMsg.typecode)
        return response

    # op: IBandwidthGroup_getName
    def IBandwidthGroup_getName(self, request, **kw):
        if isinstance(request, IBandwidthGroup_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthGroup_getNameResultMsg.typecode)
        return response

    # op: IBandwidthGroup_getType
    def IBandwidthGroup_getType(self, request, **kw):
        if isinstance(request, IBandwidthGroup_getTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthGroup_getTypeResultMsg.typecode)
        return response

    # op: IBandwidthGroup_getReference
    def IBandwidthGroup_getReference(self, request, **kw):
        if isinstance(request, IBandwidthGroup_getReferenceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthGroup_getReferenceResultMsg.typecode)
        return response

    # op: IBandwidthGroup_getMaxMbPerSec
    def IBandwidthGroup_getMaxMbPerSec(self, request, **kw):
        if isinstance(request, IBandwidthGroup_getMaxMbPerSecRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthGroup_getMaxMbPerSecResultMsg.typecode)
        return response

    # op: IBandwidthGroup_setMaxMbPerSec
    def IBandwidthGroup_setMaxMbPerSec(self, request, **kw):
        if isinstance(request, IBandwidthGroup_setMaxMbPerSecRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthGroup_setMaxMbPerSecResultMsg.typecode)
        return response

    # op: IBandwidthControl_getNumGroups
    def IBandwidthControl_getNumGroups(self, request, **kw):
        if isinstance(request, IBandwidthControl_getNumGroupsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthControl_getNumGroupsResultMsg.typecode)
        return response

    # op: IBandwidthControl_createBandwidthGroup
    def IBandwidthControl_createBandwidthGroup(self, request, **kw):
        if isinstance(request, IBandwidthControl_createBandwidthGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthControl_createBandwidthGroupResultMsg.typecode)
        return response

    # op: IBandwidthControl_deleteBandwidthGroup
    def IBandwidthControl_deleteBandwidthGroup(self, request, **kw):
        if isinstance(request, IBandwidthControl_deleteBandwidthGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthControl_deleteBandwidthGroupResultMsg.typecode)
        return response

    # op: IBandwidthControl_getBandwidthGroup
    def IBandwidthControl_getBandwidthGroup(self, request, **kw):
        if isinstance(request, IBandwidthControl_getBandwidthGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthControl_getBandwidthGroupResultMsg.typecode)
        return response

    # op: IBandwidthControl_getAllBandwidthGroups
    def IBandwidthControl_getAllBandwidthGroups(self, request, **kw):
        if isinstance(request, IBandwidthControl_getAllBandwidthGroupsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthControl_getAllBandwidthGroupsResultMsg.typecode)
        return response

    # op: IEventSource_createListener
    def IEventSource_createListener(self, request, **kw):
        if isinstance(request, IEventSource_createListenerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSource_createListenerResultMsg.typecode)
        return response

    # op: IEventSource_createAggregator
    def IEventSource_createAggregator(self, request, **kw):
        if isinstance(request, IEventSource_createAggregatorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSource_createAggregatorResultMsg.typecode)
        return response

    # op: IEventSource_registerListener
    def IEventSource_registerListener(self, request, **kw):
        if isinstance(request, IEventSource_registerListenerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSource_registerListenerResultMsg.typecode)
        return response

    # op: IEventSource_unregisterListener
    def IEventSource_unregisterListener(self, request, **kw):
        if isinstance(request, IEventSource_unregisterListenerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSource_unregisterListenerResultMsg.typecode)
        return response

    # op: IEventSource_fireEvent
    def IEventSource_fireEvent(self, request, **kw):
        if isinstance(request, IEventSource_fireEventRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSource_fireEventResultMsg.typecode)
        return response

    # op: IEventSource_getEvent
    def IEventSource_getEvent(self, request, **kw):
        if isinstance(request, IEventSource_getEventRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSource_getEventResultMsg.typecode)
        return response

    # op: IEventSource_eventProcessed
    def IEventSource_eventProcessed(self, request, **kw):
        if isinstance(request, IEventSource_eventProcessedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSource_eventProcessedResultMsg.typecode)
        return response

    # op: IEventListener_handleEvent
    def IEventListener_handleEvent(self, request, **kw):
        if isinstance(request, IEventListener_handleEventRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventListener_handleEventResultMsg.typecode)
        return response

    # op: IEvent_getType
    def IEvent_getType(self, request, **kw):
        if isinstance(request, IEvent_getTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEvent_getTypeResultMsg.typecode)
        return response

    # op: IEvent_getSource
    def IEvent_getSource(self, request, **kw):
        if isinstance(request, IEvent_getSourceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEvent_getSourceResultMsg.typecode)
        return response

    # op: IEvent_getWaitable
    def IEvent_getWaitable(self, request, **kw):
        if isinstance(request, IEvent_getWaitableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEvent_getWaitableResultMsg.typecode)
        return response

    # op: IEvent_setProcessed
    def IEvent_setProcessed(self, request, **kw):
        if isinstance(request, IEvent_setProcessedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEvent_setProcessedResultMsg.typecode)
        return response

    # op: IEvent_waitProcessed
    def IEvent_waitProcessed(self, request, **kw):
        if isinstance(request, IEvent_waitProcessedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEvent_waitProcessedResultMsg.typecode)
        return response

    # op: IReusableEvent_getGeneration
    def IReusableEvent_getGeneration(self, request, **kw):
        if isinstance(request, IReusableEvent_getGenerationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IReusableEvent_getGenerationResultMsg.typecode)
        return response

    # op: IReusableEvent_reuse
    def IReusableEvent_reuse(self, request, **kw):
        if isinstance(request, IReusableEvent_reuseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IReusableEvent_reuseResultMsg.typecode)
        return response

    # op: IMachineEvent_getMachineId
    def IMachineEvent_getMachineId(self, request, **kw):
        if isinstance(request, IMachineEvent_getMachineIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachineEvent_getMachineIdResultMsg.typecode)
        return response

    # op: IMachineStateChangedEvent_getState
    def IMachineStateChangedEvent_getState(self, request, **kw):
        if isinstance(request, IMachineStateChangedEvent_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachineStateChangedEvent_getStateResultMsg.typecode)
        return response

    # op: IMachineDataChangedEvent_getTemporary
    def IMachineDataChangedEvent_getTemporary(self, request, **kw):
        if isinstance(request, IMachineDataChangedEvent_getTemporaryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachineDataChangedEvent_getTemporaryResultMsg.typecode)
        return response

    # op: IMediumRegisteredEvent_getMediumId
    def IMediumRegisteredEvent_getMediumId(self, request, **kw):
        if isinstance(request, IMediumRegisteredEvent_getMediumIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumRegisteredEvent_getMediumIdResultMsg.typecode)
        return response

    # op: IMediumRegisteredEvent_getMediumType
    def IMediumRegisteredEvent_getMediumType(self, request, **kw):
        if isinstance(request, IMediumRegisteredEvent_getMediumTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumRegisteredEvent_getMediumTypeResultMsg.typecode)
        return response

    # op: IMediumRegisteredEvent_getRegistered
    def IMediumRegisteredEvent_getRegistered(self, request, **kw):
        if isinstance(request, IMediumRegisteredEvent_getRegisteredRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumRegisteredEvent_getRegisteredResultMsg.typecode)
        return response

    # op: IMachineRegisteredEvent_getRegistered
    def IMachineRegisteredEvent_getRegistered(self, request, **kw):
        if isinstance(request, IMachineRegisteredEvent_getRegisteredRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachineRegisteredEvent_getRegisteredResultMsg.typecode)
        return response

    # op: ISessionStateChangedEvent_getState
    def ISessionStateChangedEvent_getState(self, request, **kw):
        if isinstance(request, ISessionStateChangedEvent_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISessionStateChangedEvent_getStateResultMsg.typecode)
        return response

    # op: IGuestPropertyChangedEvent_getName
    def IGuestPropertyChangedEvent_getName(self, request, **kw):
        if isinstance(request, IGuestPropertyChangedEvent_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestPropertyChangedEvent_getNameResultMsg.typecode)
        return response

    # op: IGuestPropertyChangedEvent_getValue
    def IGuestPropertyChangedEvent_getValue(self, request, **kw):
        if isinstance(request, IGuestPropertyChangedEvent_getValueRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestPropertyChangedEvent_getValueResultMsg.typecode)
        return response

    # op: IGuestPropertyChangedEvent_getFlags
    def IGuestPropertyChangedEvent_getFlags(self, request, **kw):
        if isinstance(request, IGuestPropertyChangedEvent_getFlagsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestPropertyChangedEvent_getFlagsResultMsg.typecode)
        return response

    # op: ISnapshotEvent_getSnapshotId
    def ISnapshotEvent_getSnapshotId(self, request, **kw):
        if isinstance(request, ISnapshotEvent_getSnapshotIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshotEvent_getSnapshotIdResultMsg.typecode)
        return response

    # op: IMousePointerShapeChangedEvent_getVisible
    def IMousePointerShapeChangedEvent_getVisible(self, request, **kw):
        if isinstance(request, IMousePointerShapeChangedEvent_getVisibleRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMousePointerShapeChangedEvent_getVisibleResultMsg.typecode)
        return response

    # op: IMousePointerShapeChangedEvent_getAlpha
    def IMousePointerShapeChangedEvent_getAlpha(self, request, **kw):
        if isinstance(request, IMousePointerShapeChangedEvent_getAlphaRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMousePointerShapeChangedEvent_getAlphaResultMsg.typecode)
        return response

    # op: IMousePointerShapeChangedEvent_getXhot
    def IMousePointerShapeChangedEvent_getXhot(self, request, **kw):
        if isinstance(request, IMousePointerShapeChangedEvent_getXhotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMousePointerShapeChangedEvent_getXhotResultMsg.typecode)
        return response

    # op: IMousePointerShapeChangedEvent_getYhot
    def IMousePointerShapeChangedEvent_getYhot(self, request, **kw):
        if isinstance(request, IMousePointerShapeChangedEvent_getYhotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMousePointerShapeChangedEvent_getYhotResultMsg.typecode)
        return response

    # op: IMousePointerShapeChangedEvent_getWidth
    def IMousePointerShapeChangedEvent_getWidth(self, request, **kw):
        if isinstance(request, IMousePointerShapeChangedEvent_getWidthRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMousePointerShapeChangedEvent_getWidthResultMsg.typecode)
        return response

    # op: IMousePointerShapeChangedEvent_getHeight
    def IMousePointerShapeChangedEvent_getHeight(self, request, **kw):
        if isinstance(request, IMousePointerShapeChangedEvent_getHeightRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMousePointerShapeChangedEvent_getHeightResultMsg.typecode)
        return response

    # op: IMousePointerShapeChangedEvent_getShape
    def IMousePointerShapeChangedEvent_getShape(self, request, **kw):
        if isinstance(request, IMousePointerShapeChangedEvent_getShapeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMousePointerShapeChangedEvent_getShapeResultMsg.typecode)
        return response

    # op: IMouseCapabilityChangedEvent_getSupportsAbsolute
    def IMouseCapabilityChangedEvent_getSupportsAbsolute(self, request, **kw):
        if isinstance(request, IMouseCapabilityChangedEvent_getSupportsAbsoluteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouseCapabilityChangedEvent_getSupportsAbsoluteResultMsg.typecode)
        return response

    # op: IMouseCapabilityChangedEvent_getSupportsRelative
    def IMouseCapabilityChangedEvent_getSupportsRelative(self, request, **kw):
        if isinstance(request, IMouseCapabilityChangedEvent_getSupportsRelativeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouseCapabilityChangedEvent_getSupportsRelativeResultMsg.typecode)
        return response

    # op: IMouseCapabilityChangedEvent_getNeedsHostCursor
    def IMouseCapabilityChangedEvent_getNeedsHostCursor(self, request, **kw):
        if isinstance(request, IMouseCapabilityChangedEvent_getNeedsHostCursorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouseCapabilityChangedEvent_getNeedsHostCursorResultMsg.typecode)
        return response

    # op: IKeyboardLedsChangedEvent_getNumLock
    def IKeyboardLedsChangedEvent_getNumLock(self, request, **kw):
        if isinstance(request, IKeyboardLedsChangedEvent_getNumLockRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IKeyboardLedsChangedEvent_getNumLockResultMsg.typecode)
        return response

    # op: IKeyboardLedsChangedEvent_getCapsLock
    def IKeyboardLedsChangedEvent_getCapsLock(self, request, **kw):
        if isinstance(request, IKeyboardLedsChangedEvent_getCapsLockRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IKeyboardLedsChangedEvent_getCapsLockResultMsg.typecode)
        return response

    # op: IKeyboardLedsChangedEvent_getScrollLock
    def IKeyboardLedsChangedEvent_getScrollLock(self, request, **kw):
        if isinstance(request, IKeyboardLedsChangedEvent_getScrollLockRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IKeyboardLedsChangedEvent_getScrollLockResultMsg.typecode)
        return response

    # op: IStateChangedEvent_getState
    def IStateChangedEvent_getState(self, request, **kw):
        if isinstance(request, IStateChangedEvent_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStateChangedEvent_getStateResultMsg.typecode)
        return response

    # op: INetworkAdapterChangedEvent_getNetworkAdapter
    def INetworkAdapterChangedEvent_getNetworkAdapter(self, request, **kw):
        if isinstance(request, INetworkAdapterChangedEvent_getNetworkAdapterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapterChangedEvent_getNetworkAdapterResultMsg.typecode)
        return response

    # op: ISerialPortChangedEvent_getSerialPort
    def ISerialPortChangedEvent_getSerialPort(self, request, **kw):
        if isinstance(request, ISerialPortChangedEvent_getSerialPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPortChangedEvent_getSerialPortResultMsg.typecode)
        return response

    # op: IParallelPortChangedEvent_getParallelPort
    def IParallelPortChangedEvent_getParallelPort(self, request, **kw):
        if isinstance(request, IParallelPortChangedEvent_getParallelPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPortChangedEvent_getParallelPortResultMsg.typecode)
        return response

    # op: IMediumChangedEvent_getMediumAttachment
    def IMediumChangedEvent_getMediumAttachment(self, request, **kw):
        if isinstance(request, IMediumChangedEvent_getMediumAttachmentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumChangedEvent_getMediumAttachmentResultMsg.typecode)
        return response

    # op: ICPUChangedEvent_getCpu
    def ICPUChangedEvent_getCpu(self, request, **kw):
        if isinstance(request, ICPUChangedEvent_getCpuRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ICPUChangedEvent_getCpuResultMsg.typecode)
        return response

    # op: ICPUChangedEvent_getAdd
    def ICPUChangedEvent_getAdd(self, request, **kw):
        if isinstance(request, ICPUChangedEvent_getAddRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ICPUChangedEvent_getAddResultMsg.typecode)
        return response

    # op: ICPUExecutionCapChangedEvent_getExecutionCap
    def ICPUExecutionCapChangedEvent_getExecutionCap(self, request, **kw):
        if isinstance(request, ICPUExecutionCapChangedEvent_getExecutionCapRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ICPUExecutionCapChangedEvent_getExecutionCapResultMsg.typecode)
        return response

    # op: IGuestKeyboardEvent_getScancodes
    def IGuestKeyboardEvent_getScancodes(self, request, **kw):
        if isinstance(request, IGuestKeyboardEvent_getScancodesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestKeyboardEvent_getScancodesResultMsg.typecode)
        return response

    # op: IGuestMouseEvent_getAbsolute
    def IGuestMouseEvent_getAbsolute(self, request, **kw):
        if isinstance(request, IGuestMouseEvent_getAbsoluteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMouseEvent_getAbsoluteResultMsg.typecode)
        return response

    # op: IGuestMouseEvent_getX
    def IGuestMouseEvent_getX(self, request, **kw):
        if isinstance(request, IGuestMouseEvent_getXRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMouseEvent_getXResultMsg.typecode)
        return response

    # op: IGuestMouseEvent_getY
    def IGuestMouseEvent_getY(self, request, **kw):
        if isinstance(request, IGuestMouseEvent_getYRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMouseEvent_getYResultMsg.typecode)
        return response

    # op: IGuestMouseEvent_getZ
    def IGuestMouseEvent_getZ(self, request, **kw):
        if isinstance(request, IGuestMouseEvent_getZRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMouseEvent_getZResultMsg.typecode)
        return response

    # op: IGuestMouseEvent_getW
    def IGuestMouseEvent_getW(self, request, **kw):
        if isinstance(request, IGuestMouseEvent_getWRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMouseEvent_getWResultMsg.typecode)
        return response

    # op: IGuestMouseEvent_getButtons
    def IGuestMouseEvent_getButtons(self, request, **kw):
        if isinstance(request, IGuestMouseEvent_getButtonsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMouseEvent_getButtonsResultMsg.typecode)
        return response

    # op: IUSBDeviceStateChangedEvent_getDevice
    def IUSBDeviceStateChangedEvent_getDevice(self, request, **kw):
        if isinstance(request, IUSBDeviceStateChangedEvent_getDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceStateChangedEvent_getDeviceResultMsg.typecode)
        return response

    # op: IUSBDeviceStateChangedEvent_getAttached
    def IUSBDeviceStateChangedEvent_getAttached(self, request, **kw):
        if isinstance(request, IUSBDeviceStateChangedEvent_getAttachedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceStateChangedEvent_getAttachedResultMsg.typecode)
        return response

    # op: IUSBDeviceStateChangedEvent_getError
    def IUSBDeviceStateChangedEvent_getError(self, request, **kw):
        if isinstance(request, IUSBDeviceStateChangedEvent_getErrorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceStateChangedEvent_getErrorResultMsg.typecode)
        return response

    # op: ISharedFolderChangedEvent_getScope
    def ISharedFolderChangedEvent_getScope(self, request, **kw):
        if isinstance(request, ISharedFolderChangedEvent_getScopeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISharedFolderChangedEvent_getScopeResultMsg.typecode)
        return response

    # op: IRuntimeErrorEvent_getFatal
    def IRuntimeErrorEvent_getFatal(self, request, **kw):
        if isinstance(request, IRuntimeErrorEvent_getFatalRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IRuntimeErrorEvent_getFatalResultMsg.typecode)
        return response

    # op: IRuntimeErrorEvent_getId
    def IRuntimeErrorEvent_getId(self, request, **kw):
        if isinstance(request, IRuntimeErrorEvent_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IRuntimeErrorEvent_getIdResultMsg.typecode)
        return response

    # op: IRuntimeErrorEvent_getMessage
    def IRuntimeErrorEvent_getMessage(self, request, **kw):
        if isinstance(request, IRuntimeErrorEvent_getMessageRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IRuntimeErrorEvent_getMessageResultMsg.typecode)
        return response

    # op: IEventSourceChangedEvent_getListener
    def IEventSourceChangedEvent_getListener(self, request, **kw):
        if isinstance(request, IEventSourceChangedEvent_getListenerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSourceChangedEvent_getListenerResultMsg.typecode)
        return response

    # op: IEventSourceChangedEvent_getAdd
    def IEventSourceChangedEvent_getAdd(self, request, **kw):
        if isinstance(request, IEventSourceChangedEvent_getAddRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSourceChangedEvent_getAddResultMsg.typecode)
        return response

    # op: IExtraDataChangedEvent_getMachineId
    def IExtraDataChangedEvent_getMachineId(self, request, **kw):
        if isinstance(request, IExtraDataChangedEvent_getMachineIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IExtraDataChangedEvent_getMachineIdResultMsg.typecode)
        return response

    # op: IExtraDataChangedEvent_getKey
    def IExtraDataChangedEvent_getKey(self, request, **kw):
        if isinstance(request, IExtraDataChangedEvent_getKeyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IExtraDataChangedEvent_getKeyResultMsg.typecode)
        return response

    # op: IExtraDataChangedEvent_getValue
    def IExtraDataChangedEvent_getValue(self, request, **kw):
        if isinstance(request, IExtraDataChangedEvent_getValueRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IExtraDataChangedEvent_getValueResultMsg.typecode)
        return response

    # op: IVetoEvent_addVeto
    def IVetoEvent_addVeto(self, request, **kw):
        if isinstance(request, IVetoEvent_addVetoRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVetoEvent_addVetoResultMsg.typecode)
        return response

    # op: IVetoEvent_isVetoed
    def IVetoEvent_isVetoed(self, request, **kw):
        if isinstance(request, IVetoEvent_isVetoedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVetoEvent_isVetoedResultMsg.typecode)
        return response

    # op: IVetoEvent_getVetos
    def IVetoEvent_getVetos(self, request, **kw):
        if isinstance(request, IVetoEvent_getVetosRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVetoEvent_getVetosResultMsg.typecode)
        return response

    # op: IExtraDataCanChangeEvent_getMachineId
    def IExtraDataCanChangeEvent_getMachineId(self, request, **kw):
        if isinstance(request, IExtraDataCanChangeEvent_getMachineIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IExtraDataCanChangeEvent_getMachineIdResultMsg.typecode)
        return response

    # op: IExtraDataCanChangeEvent_getKey
    def IExtraDataCanChangeEvent_getKey(self, request, **kw):
        if isinstance(request, IExtraDataCanChangeEvent_getKeyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IExtraDataCanChangeEvent_getKeyResultMsg.typecode)
        return response

    # op: IExtraDataCanChangeEvent_getValue
    def IExtraDataCanChangeEvent_getValue(self, request, **kw):
        if isinstance(request, IExtraDataCanChangeEvent_getValueRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IExtraDataCanChangeEvent_getValueResultMsg.typecode)
        return response

    # op: IShowWindowEvent_getWinId
    def IShowWindowEvent_getWinId(self, request, **kw):
        if isinstance(request, IShowWindowEvent_getWinIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IShowWindowEvent_getWinIdResultMsg.typecode)
        return response

    # op: IShowWindowEvent_setWinId
    def IShowWindowEvent_setWinId(self, request, **kw):
        if isinstance(request, IShowWindowEvent_setWinIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IShowWindowEvent_setWinIdResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getSlot
    def INATRedirectEvent_getSlot(self, request, **kw):
        if isinstance(request, INATRedirectEvent_getSlotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getSlotResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getRemove
    def INATRedirectEvent_getRemove(self, request, **kw):
        if isinstance(request, INATRedirectEvent_getRemoveRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getRemoveResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getName
    def INATRedirectEvent_getName(self, request, **kw):
        if isinstance(request, INATRedirectEvent_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getNameResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getProto
    def INATRedirectEvent_getProto(self, request, **kw):
        if isinstance(request, INATRedirectEvent_getProtoRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getProtoResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getHostIp
    def INATRedirectEvent_getHostIp(self, request, **kw):
        if isinstance(request, INATRedirectEvent_getHostIpRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getHostIpResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getHostPort
    def INATRedirectEvent_getHostPort(self, request, **kw):
        if isinstance(request, INATRedirectEvent_getHostPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getHostPortResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getGuestIp
    def INATRedirectEvent_getGuestIp(self, request, **kw):
        if isinstance(request, INATRedirectEvent_getGuestIpRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getGuestIpResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getGuestPort
    def INATRedirectEvent_getGuestPort(self, request, **kw):
        if isinstance(request, INATRedirectEvent_getGuestPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getGuestPortResultMsg.typecode)
        return response

    # op: IHostPciDevicePlugEvent_getPlugged
    def IHostPciDevicePlugEvent_getPlugged(self, request, **kw):
        if isinstance(request, IHostPciDevicePlugEvent_getPluggedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostPciDevicePlugEvent_getPluggedResultMsg.typecode)
        return response

    # op: IHostPciDevicePlugEvent_getSuccess
    def IHostPciDevicePlugEvent_getSuccess(self, request, **kw):
        if isinstance(request, IHostPciDevicePlugEvent_getSuccessRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostPciDevicePlugEvent_getSuccessResultMsg.typecode)
        return response

    # op: IHostPciDevicePlugEvent_getAttachment
    def IHostPciDevicePlugEvent_getAttachment(self, request, **kw):
        if isinstance(request, IHostPciDevicePlugEvent_getAttachmentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostPciDevicePlugEvent_getAttachmentResultMsg.typecode)
        return response

    # op: IHostPciDevicePlugEvent_getMessage
    def IHostPciDevicePlugEvent_getMessage(self, request, **kw):
        if isinstance(request, IHostPciDevicePlugEvent_getMessageRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostPciDevicePlugEvent_getMessageResultMsg.typecode)
        return response

    # op: IVBoxSVCAvailabilityChangedEvent_getAvailable
    def IVBoxSVCAvailabilityChangedEvent_getAvailable(self, request, **kw):
        if isinstance(request, IVBoxSVCAvailabilityChangedEvent_getAvailableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVBoxSVCAvailabilityChangedEvent_getAvailableResultMsg.typecode)
        return response

    # op: IBandwidthGroupChangedEvent_getBandwidthGroup
    def IBandwidthGroupChangedEvent_getBandwidthGroup(self, request, **kw):
        if isinstance(request, IBandwidthGroupChangedEvent_getBandwidthGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthGroupChangedEvent_getBandwidthGroupResultMsg.typecode)
        return response

    # op: IGuestMonitorChangedEvent_getChangeType
    def IGuestMonitorChangedEvent_getChangeType(self, request, **kw):
        if isinstance(request, IGuestMonitorChangedEvent_getChangeTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMonitorChangedEvent_getChangeTypeResultMsg.typecode)
        return response

    # op: IGuestMonitorChangedEvent_getScreenId
    def IGuestMonitorChangedEvent_getScreenId(self, request, **kw):
        if isinstance(request, IGuestMonitorChangedEvent_getScreenIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMonitorChangedEvent_getScreenIdResultMsg.typecode)
        return response

    # op: IGuestMonitorChangedEvent_getOriginX
    def IGuestMonitorChangedEvent_getOriginX(self, request, **kw):
        if isinstance(request, IGuestMonitorChangedEvent_getOriginXRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMonitorChangedEvent_getOriginXResultMsg.typecode)
        return response

    # op: IGuestMonitorChangedEvent_getOriginY
    def IGuestMonitorChangedEvent_getOriginY(self, request, **kw):
        if isinstance(request, IGuestMonitorChangedEvent_getOriginYRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMonitorChangedEvent_getOriginYResultMsg.typecode)
        return response

    # op: IGuestMonitorChangedEvent_getWidth
    def IGuestMonitorChangedEvent_getWidth(self, request, **kw):
        if isinstance(request, IGuestMonitorChangedEvent_getWidthRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMonitorChangedEvent_getWidthResultMsg.typecode)
        return response

    # op: IGuestMonitorChangedEvent_getHeight
    def IGuestMonitorChangedEvent_getHeight(self, request, **kw):
        if isinstance(request, IGuestMonitorChangedEvent_getHeightRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMonitorChangedEvent_getHeightResultMsg.typecode)
        return response

    # op: IStorageDeviceChangedEvent_getStorageDevice
    def IStorageDeviceChangedEvent_getStorageDevice(self, request, **kw):
        if isinstance(request, IStorageDeviceChangedEvent_getStorageDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageDeviceChangedEvent_getStorageDeviceResultMsg.typecode)
        return response

    # op: IStorageDeviceChangedEvent_getRemoved
    def IStorageDeviceChangedEvent_getRemoved(self, request, **kw):
        if isinstance(request, IStorageDeviceChangedEvent_getRemovedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageDeviceChangedEvent_getRemovedResultMsg.typecode)
        return response

IVirtualBoxErrorInfo_getResultCodeRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBoxErrorInfo_getResultCode").pyclass

IVirtualBoxErrorInfo_getResultCodeResultMsg = GED("http://www.virtualbox.org/", "IVirtualBoxErrorInfo_getResultCodeResponse").pyclass

IVirtualBoxErrorInfo_getInterfaceIDRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBoxErrorInfo_getInterfaceID").pyclass

IVirtualBoxErrorInfo_getInterfaceIDResultMsg = GED("http://www.virtualbox.org/", "IVirtualBoxErrorInfo_getInterfaceIDResponse").pyclass

IVirtualBoxErrorInfo_getComponentRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBoxErrorInfo_getComponent").pyclass

IVirtualBoxErrorInfo_getComponentResultMsg = GED("http://www.virtualbox.org/", "IVirtualBoxErrorInfo_getComponentResponse").pyclass

IVirtualBoxErrorInfo_getTextRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBoxErrorInfo_getText").pyclass

IVirtualBoxErrorInfo_getTextResultMsg = GED("http://www.virtualbox.org/", "IVirtualBoxErrorInfo_getTextResponse").pyclass

IVirtualBoxErrorInfo_getNextRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBoxErrorInfo_getNext").pyclass

IVirtualBoxErrorInfo_getNextResultMsg = GED("http://www.virtualbox.org/", "IVirtualBoxErrorInfo_getNextResponse").pyclass

IDHCPServer_getEnabledRequestMsg = GED("http://www.virtualbox.org/", "IDHCPServer_getEnabled").pyclass

IDHCPServer_getEnabledResultMsg = GED("http://www.virtualbox.org/", "IDHCPServer_getEnabledResponse").pyclass

IDHCPServer_setEnabledRequestMsg = GED("http://www.virtualbox.org/", "IDHCPServer_setEnabled").pyclass

IDHCPServer_setEnabledResultMsg = GED("http://www.virtualbox.org/", "IDHCPServer_setEnabledResponse").pyclass

IDHCPServer_getIPAddressRequestMsg = GED("http://www.virtualbox.org/", "IDHCPServer_getIPAddress").pyclass

IDHCPServer_getIPAddressResultMsg = GED("http://www.virtualbox.org/", "IDHCPServer_getIPAddressResponse").pyclass

IDHCPServer_getNetworkMaskRequestMsg = GED("http://www.virtualbox.org/", "IDHCPServer_getNetworkMask").pyclass

IDHCPServer_getNetworkMaskResultMsg = GED("http://www.virtualbox.org/", "IDHCPServer_getNetworkMaskResponse").pyclass

IDHCPServer_getNetworkNameRequestMsg = GED("http://www.virtualbox.org/", "IDHCPServer_getNetworkName").pyclass

IDHCPServer_getNetworkNameResultMsg = GED("http://www.virtualbox.org/", "IDHCPServer_getNetworkNameResponse").pyclass

IDHCPServer_getLowerIPRequestMsg = GED("http://www.virtualbox.org/", "IDHCPServer_getLowerIP").pyclass

IDHCPServer_getLowerIPResultMsg = GED("http://www.virtualbox.org/", "IDHCPServer_getLowerIPResponse").pyclass

IDHCPServer_getUpperIPRequestMsg = GED("http://www.virtualbox.org/", "IDHCPServer_getUpperIP").pyclass

IDHCPServer_getUpperIPResultMsg = GED("http://www.virtualbox.org/", "IDHCPServer_getUpperIPResponse").pyclass

IDHCPServer_setConfigurationRequestMsg = GED("http://www.virtualbox.org/", "IDHCPServer_setConfiguration").pyclass

IDHCPServer_setConfigurationResultMsg = GED("http://www.virtualbox.org/", "IDHCPServer_setConfigurationResponse").pyclass

IDHCPServer_startRequestMsg = GED("http://www.virtualbox.org/", "IDHCPServer_start").pyclass

IDHCPServer_startResultMsg = GED("http://www.virtualbox.org/", "IDHCPServer_startResponse").pyclass

IDHCPServer_stopRequestMsg = GED("http://www.virtualbox.org/", "IDHCPServer_stop").pyclass

IDHCPServer_stopResultMsg = GED("http://www.virtualbox.org/", "IDHCPServer_stopResponse").pyclass

IVirtualBox_getVersionRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getVersion").pyclass

IVirtualBox_getVersionResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getVersionResponse").pyclass

IVirtualBox_getRevisionRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getRevision").pyclass

IVirtualBox_getRevisionResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getRevisionResponse").pyclass

IVirtualBox_getPackageTypeRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getPackageType").pyclass

IVirtualBox_getPackageTypeResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getPackageTypeResponse").pyclass

IVirtualBox_getAPIVersionRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getAPIVersion").pyclass

IVirtualBox_getAPIVersionResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getAPIVersionResponse").pyclass

IVirtualBox_getHomeFolderRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getHomeFolder").pyclass

IVirtualBox_getHomeFolderResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getHomeFolderResponse").pyclass

IVirtualBox_getSettingsFilePathRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getSettingsFilePath").pyclass

IVirtualBox_getSettingsFilePathResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getSettingsFilePathResponse").pyclass

IVirtualBox_getHostRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getHost").pyclass

IVirtualBox_getHostResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getHostResponse").pyclass

IVirtualBox_getSystemPropertiesRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getSystemProperties").pyclass

IVirtualBox_getSystemPropertiesResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getSystemPropertiesResponse").pyclass

IVirtualBox_getMachinesRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getMachines").pyclass

IVirtualBox_getMachinesResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getMachinesResponse").pyclass

IVirtualBox_getHardDisksRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getHardDisks").pyclass

IVirtualBox_getHardDisksResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getHardDisksResponse").pyclass

IVirtualBox_getDVDImagesRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getDVDImages").pyclass

IVirtualBox_getDVDImagesResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getDVDImagesResponse").pyclass

IVirtualBox_getFloppyImagesRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getFloppyImages").pyclass

IVirtualBox_getFloppyImagesResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getFloppyImagesResponse").pyclass

IVirtualBox_getProgressOperationsRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getProgressOperations").pyclass

IVirtualBox_getProgressOperationsResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getProgressOperationsResponse").pyclass

IVirtualBox_getGuestOSTypesRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getGuestOSTypes").pyclass

IVirtualBox_getGuestOSTypesResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getGuestOSTypesResponse").pyclass

IVirtualBox_getSharedFoldersRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getSharedFolders").pyclass

IVirtualBox_getSharedFoldersResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getSharedFoldersResponse").pyclass

IVirtualBox_getPerformanceCollectorRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getPerformanceCollector").pyclass

IVirtualBox_getPerformanceCollectorResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getPerformanceCollectorResponse").pyclass

IVirtualBox_getDHCPServersRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getDHCPServers").pyclass

IVirtualBox_getDHCPServersResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getDHCPServersResponse").pyclass

IVirtualBox_getEventSourceRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getEventSource").pyclass

IVirtualBox_getEventSourceResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getEventSourceResponse").pyclass

IVirtualBox_getInternalNetworksRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getInternalNetworks").pyclass

IVirtualBox_getInternalNetworksResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getInternalNetworksResponse").pyclass

IVirtualBox_getGenericNetworkDriversRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getGenericNetworkDrivers").pyclass

IVirtualBox_getGenericNetworkDriversResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getGenericNetworkDriversResponse").pyclass

IVirtualBox_composeMachineFilenameRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_composeMachineFilename").pyclass

IVirtualBox_composeMachineFilenameResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_composeMachineFilenameResponse").pyclass

IVirtualBox_createMachineRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_createMachine").pyclass

IVirtualBox_createMachineResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_createMachineResponse").pyclass

IVirtualBox_openMachineRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_openMachine").pyclass

IVirtualBox_openMachineResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_openMachineResponse").pyclass

IVirtualBox_registerMachineRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_registerMachine").pyclass

IVirtualBox_registerMachineResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_registerMachineResponse").pyclass

IVirtualBox_findMachineRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_findMachine").pyclass

IVirtualBox_findMachineResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_findMachineResponse").pyclass

IVirtualBox_createApplianceRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_createAppliance").pyclass

IVirtualBox_createApplianceResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_createApplianceResponse").pyclass

IVirtualBox_createHardDiskRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_createHardDisk").pyclass

IVirtualBox_createHardDiskResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_createHardDiskResponse").pyclass

IVirtualBox_openMediumRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_openMedium").pyclass

IVirtualBox_openMediumResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_openMediumResponse").pyclass

IVirtualBox_findMediumRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_findMedium").pyclass

IVirtualBox_findMediumResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_findMediumResponse").pyclass

IVirtualBox_getGuestOSTypeRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getGuestOSType").pyclass

IVirtualBox_getGuestOSTypeResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getGuestOSTypeResponse").pyclass

IVirtualBox_createSharedFolderRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_createSharedFolder").pyclass

IVirtualBox_createSharedFolderResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_createSharedFolderResponse").pyclass

IVirtualBox_removeSharedFolderRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_removeSharedFolder").pyclass

IVirtualBox_removeSharedFolderResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_removeSharedFolderResponse").pyclass

IVirtualBox_getExtraDataKeysRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getExtraDataKeys").pyclass

IVirtualBox_getExtraDataKeysResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getExtraDataKeysResponse").pyclass

IVirtualBox_getExtraDataRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getExtraData").pyclass

IVirtualBox_getExtraDataResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_getExtraDataResponse").pyclass

IVirtualBox_setExtraDataRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_setExtraData").pyclass

IVirtualBox_setExtraDataResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_setExtraDataResponse").pyclass

IVirtualBox_createDHCPServerRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_createDHCPServer").pyclass

IVirtualBox_createDHCPServerResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_createDHCPServerResponse").pyclass

IVirtualBox_findDHCPServerByNetworkNameRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_findDHCPServerByNetworkName").pyclass

IVirtualBox_findDHCPServerByNetworkNameResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_findDHCPServerByNetworkNameResponse").pyclass

IVirtualBox_removeDHCPServerRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_removeDHCPServer").pyclass

IVirtualBox_removeDHCPServerResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_removeDHCPServerResponse").pyclass

IVirtualBox_checkFirmwarePresentRequestMsg = GED("http://www.virtualbox.org/", "IVirtualBox_checkFirmwarePresent").pyclass

IVirtualBox_checkFirmwarePresentResultMsg = GED("http://www.virtualbox.org/", "IVirtualBox_checkFirmwarePresentResponse").pyclass

IVFSExplorer_getPathRequestMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_getPath").pyclass

IVFSExplorer_getPathResultMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_getPathResponse").pyclass

IVFSExplorer_getTypeRequestMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_getType").pyclass

IVFSExplorer_getTypeResultMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_getTypeResponse").pyclass

IVFSExplorer_updateRequestMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_update").pyclass

IVFSExplorer_updateResultMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_updateResponse").pyclass

IVFSExplorer_cdRequestMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_cd").pyclass

IVFSExplorer_cdResultMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_cdResponse").pyclass

IVFSExplorer_cdUpRequestMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_cdUp").pyclass

IVFSExplorer_cdUpResultMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_cdUpResponse").pyclass

IVFSExplorer_entryListRequestMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_entryList").pyclass

IVFSExplorer_entryListResultMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_entryListResponse").pyclass

IVFSExplorer_existsRequestMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_exists").pyclass

IVFSExplorer_existsResultMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_existsResponse").pyclass

IVFSExplorer_removeRequestMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_remove").pyclass

IVFSExplorer_removeResultMsg = GED("http://www.virtualbox.org/", "IVFSExplorer_removeResponse").pyclass

IAppliance_getPathRequestMsg = GED("http://www.virtualbox.org/", "IAppliance_getPath").pyclass

IAppliance_getPathResultMsg = GED("http://www.virtualbox.org/", "IAppliance_getPathResponse").pyclass

IAppliance_getDisksRequestMsg = GED("http://www.virtualbox.org/", "IAppliance_getDisks").pyclass

IAppliance_getDisksResultMsg = GED("http://www.virtualbox.org/", "IAppliance_getDisksResponse").pyclass

IAppliance_getVirtualSystemDescriptionsRequestMsg = GED("http://www.virtualbox.org/", "IAppliance_getVirtualSystemDescriptions").pyclass

IAppliance_getVirtualSystemDescriptionsResultMsg = GED("http://www.virtualbox.org/", "IAppliance_getVirtualSystemDescriptionsResponse").pyclass

IAppliance_getMachinesRequestMsg = GED("http://www.virtualbox.org/", "IAppliance_getMachines").pyclass

IAppliance_getMachinesResultMsg = GED("http://www.virtualbox.org/", "IAppliance_getMachinesResponse").pyclass

IAppliance_readRequestMsg = GED("http://www.virtualbox.org/", "IAppliance_read").pyclass

IAppliance_readResultMsg = GED("http://www.virtualbox.org/", "IAppliance_readResponse").pyclass

IAppliance_interpretRequestMsg = GED("http://www.virtualbox.org/", "IAppliance_interpret").pyclass

IAppliance_interpretResultMsg = GED("http://www.virtualbox.org/", "IAppliance_interpretResponse").pyclass

IAppliance_importMachinesRequestMsg = GED("http://www.virtualbox.org/", "IAppliance_importMachines").pyclass

IAppliance_importMachinesResultMsg = GED("http://www.virtualbox.org/", "IAppliance_importMachinesResponse").pyclass

IAppliance_createVFSExplorerRequestMsg = GED("http://www.virtualbox.org/", "IAppliance_createVFSExplorer").pyclass

IAppliance_createVFSExplorerResultMsg = GED("http://www.virtualbox.org/", "IAppliance_createVFSExplorerResponse").pyclass

IAppliance_writeRequestMsg = GED("http://www.virtualbox.org/", "IAppliance_write").pyclass

IAppliance_writeResultMsg = GED("http://www.virtualbox.org/", "IAppliance_writeResponse").pyclass

IAppliance_getWarningsRequestMsg = GED("http://www.virtualbox.org/", "IAppliance_getWarnings").pyclass

IAppliance_getWarningsResultMsg = GED("http://www.virtualbox.org/", "IAppliance_getWarningsResponse").pyclass

IVirtualSystemDescription_getCountRequestMsg = GED("http://www.virtualbox.org/", "IVirtualSystemDescription_getCount").pyclass

IVirtualSystemDescription_getCountResultMsg = GED("http://www.virtualbox.org/", "IVirtualSystemDescription_getCountResponse").pyclass

IVirtualSystemDescription_getDescriptionRequestMsg = GED("http://www.virtualbox.org/", "IVirtualSystemDescription_getDescription").pyclass

IVirtualSystemDescription_getDescriptionResultMsg = GED("http://www.virtualbox.org/", "IVirtualSystemDescription_getDescriptionResponse").pyclass

IVirtualSystemDescription_getDescriptionByTypeRequestMsg = GED("http://www.virtualbox.org/", "IVirtualSystemDescription_getDescriptionByType").pyclass

IVirtualSystemDescription_getDescriptionByTypeResultMsg = GED("http://www.virtualbox.org/", "IVirtualSystemDescription_getDescriptionByTypeResponse").pyclass

IVirtualSystemDescription_getValuesByTypeRequestMsg = GED("http://www.virtualbox.org/", "IVirtualSystemDescription_getValuesByType").pyclass

IVirtualSystemDescription_getValuesByTypeResultMsg = GED("http://www.virtualbox.org/", "IVirtualSystemDescription_getValuesByTypeResponse").pyclass

IVirtualSystemDescription_setFinalValuesRequestMsg = GED("http://www.virtualbox.org/", "IVirtualSystemDescription_setFinalValues").pyclass

IVirtualSystemDescription_setFinalValuesResultMsg = GED("http://www.virtualbox.org/", "IVirtualSystemDescription_setFinalValuesResponse").pyclass

IVirtualSystemDescription_addDescriptionRequestMsg = GED("http://www.virtualbox.org/", "IVirtualSystemDescription_addDescription").pyclass

IVirtualSystemDescription_addDescriptionResultMsg = GED("http://www.virtualbox.org/", "IVirtualSystemDescription_addDescriptionResponse").pyclass

IBIOSSettings_getLogoFadeInRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getLogoFadeIn").pyclass

IBIOSSettings_getLogoFadeInResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getLogoFadeInResponse").pyclass

IBIOSSettings_setLogoFadeInRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setLogoFadeIn").pyclass

IBIOSSettings_setLogoFadeInResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setLogoFadeInResponse").pyclass

IBIOSSettings_getLogoFadeOutRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getLogoFadeOut").pyclass

IBIOSSettings_getLogoFadeOutResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getLogoFadeOutResponse").pyclass

IBIOSSettings_setLogoFadeOutRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setLogoFadeOut").pyclass

IBIOSSettings_setLogoFadeOutResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setLogoFadeOutResponse").pyclass

IBIOSSettings_getLogoDisplayTimeRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getLogoDisplayTime").pyclass

IBIOSSettings_getLogoDisplayTimeResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getLogoDisplayTimeResponse").pyclass

IBIOSSettings_setLogoDisplayTimeRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setLogoDisplayTime").pyclass

IBIOSSettings_setLogoDisplayTimeResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setLogoDisplayTimeResponse").pyclass

IBIOSSettings_getLogoImagePathRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getLogoImagePath").pyclass

IBIOSSettings_getLogoImagePathResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getLogoImagePathResponse").pyclass

IBIOSSettings_setLogoImagePathRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setLogoImagePath").pyclass

IBIOSSettings_setLogoImagePathResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setLogoImagePathResponse").pyclass

IBIOSSettings_getBootMenuModeRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getBootMenuMode").pyclass

IBIOSSettings_getBootMenuModeResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getBootMenuModeResponse").pyclass

IBIOSSettings_setBootMenuModeRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setBootMenuMode").pyclass

IBIOSSettings_setBootMenuModeResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setBootMenuModeResponse").pyclass

IBIOSSettings_getACPIEnabledRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getACPIEnabled").pyclass

IBIOSSettings_getACPIEnabledResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getACPIEnabledResponse").pyclass

IBIOSSettings_setACPIEnabledRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setACPIEnabled").pyclass

IBIOSSettings_setACPIEnabledResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setACPIEnabledResponse").pyclass

IBIOSSettings_getIOAPICEnabledRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getIOAPICEnabled").pyclass

IBIOSSettings_getIOAPICEnabledResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getIOAPICEnabledResponse").pyclass

IBIOSSettings_setIOAPICEnabledRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setIOAPICEnabled").pyclass

IBIOSSettings_setIOAPICEnabledResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setIOAPICEnabledResponse").pyclass

IBIOSSettings_getTimeOffsetRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getTimeOffset").pyclass

IBIOSSettings_getTimeOffsetResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getTimeOffsetResponse").pyclass

IBIOSSettings_setTimeOffsetRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setTimeOffset").pyclass

IBIOSSettings_setTimeOffsetResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setTimeOffsetResponse").pyclass

IBIOSSettings_getPXEDebugEnabledRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getPXEDebugEnabled").pyclass

IBIOSSettings_getPXEDebugEnabledResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_getPXEDebugEnabledResponse").pyclass

IBIOSSettings_setPXEDebugEnabledRequestMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setPXEDebugEnabled").pyclass

IBIOSSettings_setPXEDebugEnabledResultMsg = GED("http://www.virtualbox.org/", "IBIOSSettings_setPXEDebugEnabledResponse").pyclass

IMachine_getParentRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getParent").pyclass

IMachine_getParentResultMsg = GED("http://www.virtualbox.org/", "IMachine_getParentResponse").pyclass

IMachine_getAccessibleRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getAccessible").pyclass

IMachine_getAccessibleResultMsg = GED("http://www.virtualbox.org/", "IMachine_getAccessibleResponse").pyclass

IMachine_getAccessErrorRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getAccessError").pyclass

IMachine_getAccessErrorResultMsg = GED("http://www.virtualbox.org/", "IMachine_getAccessErrorResponse").pyclass

IMachine_getNameRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getName").pyclass

IMachine_getNameResultMsg = GED("http://www.virtualbox.org/", "IMachine_getNameResponse").pyclass

IMachine_setNameRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setName").pyclass

IMachine_setNameResultMsg = GED("http://www.virtualbox.org/", "IMachine_setNameResponse").pyclass

IMachine_getDescriptionRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getDescription").pyclass

IMachine_getDescriptionResultMsg = GED("http://www.virtualbox.org/", "IMachine_getDescriptionResponse").pyclass

IMachine_setDescriptionRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setDescription").pyclass

IMachine_setDescriptionResultMsg = GED("http://www.virtualbox.org/", "IMachine_setDescriptionResponse").pyclass

IMachine_getIdRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getId").pyclass

IMachine_getIdResultMsg = GED("http://www.virtualbox.org/", "IMachine_getIdResponse").pyclass

IMachine_getOSTypeIdRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getOSTypeId").pyclass

IMachine_getOSTypeIdResultMsg = GED("http://www.virtualbox.org/", "IMachine_getOSTypeIdResponse").pyclass

IMachine_setOSTypeIdRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setOSTypeId").pyclass

IMachine_setOSTypeIdResultMsg = GED("http://www.virtualbox.org/", "IMachine_setOSTypeIdResponse").pyclass

IMachine_getHardwareVersionRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getHardwareVersion").pyclass

IMachine_getHardwareVersionResultMsg = GED("http://www.virtualbox.org/", "IMachine_getHardwareVersionResponse").pyclass

IMachine_setHardwareVersionRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setHardwareVersion").pyclass

IMachine_setHardwareVersionResultMsg = GED("http://www.virtualbox.org/", "IMachine_setHardwareVersionResponse").pyclass

IMachine_getHardwareUUIDRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getHardwareUUID").pyclass

IMachine_getHardwareUUIDResultMsg = GED("http://www.virtualbox.org/", "IMachine_getHardwareUUIDResponse").pyclass

IMachine_setHardwareUUIDRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setHardwareUUID").pyclass

IMachine_setHardwareUUIDResultMsg = GED("http://www.virtualbox.org/", "IMachine_setHardwareUUIDResponse").pyclass

IMachine_getCPUCountRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getCPUCount").pyclass

IMachine_getCPUCountResultMsg = GED("http://www.virtualbox.org/", "IMachine_getCPUCountResponse").pyclass

IMachine_setCPUCountRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setCPUCount").pyclass

IMachine_setCPUCountResultMsg = GED("http://www.virtualbox.org/", "IMachine_setCPUCountResponse").pyclass

IMachine_getCPUHotPlugEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getCPUHotPlugEnabled").pyclass

IMachine_getCPUHotPlugEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_getCPUHotPlugEnabledResponse").pyclass

IMachine_setCPUHotPlugEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setCPUHotPlugEnabled").pyclass

IMachine_setCPUHotPlugEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_setCPUHotPlugEnabledResponse").pyclass

IMachine_getCPUExecutionCapRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getCPUExecutionCap").pyclass

IMachine_getCPUExecutionCapResultMsg = GED("http://www.virtualbox.org/", "IMachine_getCPUExecutionCapResponse").pyclass

IMachine_setCPUExecutionCapRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setCPUExecutionCap").pyclass

IMachine_setCPUExecutionCapResultMsg = GED("http://www.virtualbox.org/", "IMachine_setCPUExecutionCapResponse").pyclass

IMachine_getMemorySizeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getMemorySize").pyclass

IMachine_getMemorySizeResultMsg = GED("http://www.virtualbox.org/", "IMachine_getMemorySizeResponse").pyclass

IMachine_setMemorySizeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setMemorySize").pyclass

IMachine_setMemorySizeResultMsg = GED("http://www.virtualbox.org/", "IMachine_setMemorySizeResponse").pyclass

IMachine_getMemoryBalloonSizeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getMemoryBalloonSize").pyclass

IMachine_getMemoryBalloonSizeResultMsg = GED("http://www.virtualbox.org/", "IMachine_getMemoryBalloonSizeResponse").pyclass

IMachine_setMemoryBalloonSizeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setMemoryBalloonSize").pyclass

IMachine_setMemoryBalloonSizeResultMsg = GED("http://www.virtualbox.org/", "IMachine_setMemoryBalloonSizeResponse").pyclass

IMachine_getPageFusionEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getPageFusionEnabled").pyclass

IMachine_getPageFusionEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_getPageFusionEnabledResponse").pyclass

IMachine_setPageFusionEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setPageFusionEnabled").pyclass

IMachine_setPageFusionEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_setPageFusionEnabledResponse").pyclass

IMachine_getVRAMSizeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getVRAMSize").pyclass

IMachine_getVRAMSizeResultMsg = GED("http://www.virtualbox.org/", "IMachine_getVRAMSizeResponse").pyclass

IMachine_setVRAMSizeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setVRAMSize").pyclass

IMachine_setVRAMSizeResultMsg = GED("http://www.virtualbox.org/", "IMachine_setVRAMSizeResponse").pyclass

IMachine_getAccelerate3DEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getAccelerate3DEnabled").pyclass

IMachine_getAccelerate3DEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_getAccelerate3DEnabledResponse").pyclass

IMachine_setAccelerate3DEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setAccelerate3DEnabled").pyclass

IMachine_setAccelerate3DEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_setAccelerate3DEnabledResponse").pyclass

IMachine_getAccelerate2DVideoEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getAccelerate2DVideoEnabled").pyclass

IMachine_getAccelerate2DVideoEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_getAccelerate2DVideoEnabledResponse").pyclass

IMachine_setAccelerate2DVideoEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setAccelerate2DVideoEnabled").pyclass

IMachine_setAccelerate2DVideoEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_setAccelerate2DVideoEnabledResponse").pyclass

IMachine_getMonitorCountRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getMonitorCount").pyclass

IMachine_getMonitorCountResultMsg = GED("http://www.virtualbox.org/", "IMachine_getMonitorCountResponse").pyclass

IMachine_setMonitorCountRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setMonitorCount").pyclass

IMachine_setMonitorCountResultMsg = GED("http://www.virtualbox.org/", "IMachine_setMonitorCountResponse").pyclass

IMachine_getBIOSSettingsRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getBIOSSettings").pyclass

IMachine_getBIOSSettingsResultMsg = GED("http://www.virtualbox.org/", "IMachine_getBIOSSettingsResponse").pyclass

IMachine_getFirmwareTypeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getFirmwareType").pyclass

IMachine_getFirmwareTypeResultMsg = GED("http://www.virtualbox.org/", "IMachine_getFirmwareTypeResponse").pyclass

IMachine_setFirmwareTypeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setFirmwareType").pyclass

IMachine_setFirmwareTypeResultMsg = GED("http://www.virtualbox.org/", "IMachine_setFirmwareTypeResponse").pyclass

IMachine_getPointingHidTypeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getPointingHidType").pyclass

IMachine_getPointingHidTypeResultMsg = GED("http://www.virtualbox.org/", "IMachine_getPointingHidTypeResponse").pyclass

IMachine_setPointingHidTypeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setPointingHidType").pyclass

IMachine_setPointingHidTypeResultMsg = GED("http://www.virtualbox.org/", "IMachine_setPointingHidTypeResponse").pyclass

IMachine_getKeyboardHidTypeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getKeyboardHidType").pyclass

IMachine_getKeyboardHidTypeResultMsg = GED("http://www.virtualbox.org/", "IMachine_getKeyboardHidTypeResponse").pyclass

IMachine_setKeyboardHidTypeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setKeyboardHidType").pyclass

IMachine_setKeyboardHidTypeResultMsg = GED("http://www.virtualbox.org/", "IMachine_setKeyboardHidTypeResponse").pyclass

IMachine_getHpetEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getHpetEnabled").pyclass

IMachine_getHpetEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_getHpetEnabledResponse").pyclass

IMachine_setHpetEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setHpetEnabled").pyclass

IMachine_setHpetEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_setHpetEnabledResponse").pyclass

IMachine_getChipsetTypeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getChipsetType").pyclass

IMachine_getChipsetTypeResultMsg = GED("http://www.virtualbox.org/", "IMachine_getChipsetTypeResponse").pyclass

IMachine_setChipsetTypeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setChipsetType").pyclass

IMachine_setChipsetTypeResultMsg = GED("http://www.virtualbox.org/", "IMachine_setChipsetTypeResponse").pyclass

IMachine_getSnapshotFolderRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getSnapshotFolder").pyclass

IMachine_getSnapshotFolderResultMsg = GED("http://www.virtualbox.org/", "IMachine_getSnapshotFolderResponse").pyclass

IMachine_setSnapshotFolderRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setSnapshotFolder").pyclass

IMachine_setSnapshotFolderResultMsg = GED("http://www.virtualbox.org/", "IMachine_setSnapshotFolderResponse").pyclass

IMachine_getVRDEServerRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getVRDEServer").pyclass

IMachine_getVRDEServerResultMsg = GED("http://www.virtualbox.org/", "IMachine_getVRDEServerResponse").pyclass

IMachine_getEmulatedUSBWebcameraEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getEmulatedUSBWebcameraEnabled").pyclass

IMachine_getEmulatedUSBWebcameraEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_getEmulatedUSBWebcameraEnabledResponse").pyclass

IMachine_setEmulatedUSBWebcameraEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setEmulatedUSBWebcameraEnabled").pyclass

IMachine_setEmulatedUSBWebcameraEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_setEmulatedUSBWebcameraEnabledResponse").pyclass

IMachine_getEmulatedUSBCardReaderEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getEmulatedUSBCardReaderEnabled").pyclass

IMachine_getEmulatedUSBCardReaderEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_getEmulatedUSBCardReaderEnabledResponse").pyclass

IMachine_setEmulatedUSBCardReaderEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setEmulatedUSBCardReaderEnabled").pyclass

IMachine_setEmulatedUSBCardReaderEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_setEmulatedUSBCardReaderEnabledResponse").pyclass

IMachine_getMediumAttachmentsRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getMediumAttachments").pyclass

IMachine_getMediumAttachmentsResultMsg = GED("http://www.virtualbox.org/", "IMachine_getMediumAttachmentsResponse").pyclass

IMachine_getUSBControllerRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getUSBController").pyclass

IMachine_getUSBControllerResultMsg = GED("http://www.virtualbox.org/", "IMachine_getUSBControllerResponse").pyclass

IMachine_getAudioAdapterRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getAudioAdapter").pyclass

IMachine_getAudioAdapterResultMsg = GED("http://www.virtualbox.org/", "IMachine_getAudioAdapterResponse").pyclass

IMachine_getStorageControllersRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getStorageControllers").pyclass

IMachine_getStorageControllersResultMsg = GED("http://www.virtualbox.org/", "IMachine_getStorageControllersResponse").pyclass

IMachine_getSettingsFilePathRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getSettingsFilePath").pyclass

IMachine_getSettingsFilePathResultMsg = GED("http://www.virtualbox.org/", "IMachine_getSettingsFilePathResponse").pyclass

IMachine_getSettingsModifiedRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getSettingsModified").pyclass

IMachine_getSettingsModifiedResultMsg = GED("http://www.virtualbox.org/", "IMachine_getSettingsModifiedResponse").pyclass

IMachine_getSessionStateRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getSessionState").pyclass

IMachine_getSessionStateResultMsg = GED("http://www.virtualbox.org/", "IMachine_getSessionStateResponse").pyclass

IMachine_getSessionTypeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getSessionType").pyclass

IMachine_getSessionTypeResultMsg = GED("http://www.virtualbox.org/", "IMachine_getSessionTypeResponse").pyclass

IMachine_getSessionPidRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getSessionPid").pyclass

IMachine_getSessionPidResultMsg = GED("http://www.virtualbox.org/", "IMachine_getSessionPidResponse").pyclass

IMachine_getStateRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getState").pyclass

IMachine_getStateResultMsg = GED("http://www.virtualbox.org/", "IMachine_getStateResponse").pyclass

IMachine_getLastStateChangeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getLastStateChange").pyclass

IMachine_getLastStateChangeResultMsg = GED("http://www.virtualbox.org/", "IMachine_getLastStateChangeResponse").pyclass

IMachine_getStateFilePathRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getStateFilePath").pyclass

IMachine_getStateFilePathResultMsg = GED("http://www.virtualbox.org/", "IMachine_getStateFilePathResponse").pyclass

IMachine_getLogFolderRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getLogFolder").pyclass

IMachine_getLogFolderResultMsg = GED("http://www.virtualbox.org/", "IMachine_getLogFolderResponse").pyclass

IMachine_getCurrentSnapshotRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getCurrentSnapshot").pyclass

IMachine_getCurrentSnapshotResultMsg = GED("http://www.virtualbox.org/", "IMachine_getCurrentSnapshotResponse").pyclass

IMachine_getSnapshotCountRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getSnapshotCount").pyclass

IMachine_getSnapshotCountResultMsg = GED("http://www.virtualbox.org/", "IMachine_getSnapshotCountResponse").pyclass

IMachine_getCurrentStateModifiedRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getCurrentStateModified").pyclass

IMachine_getCurrentStateModifiedResultMsg = GED("http://www.virtualbox.org/", "IMachine_getCurrentStateModifiedResponse").pyclass

IMachine_getSharedFoldersRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getSharedFolders").pyclass

IMachine_getSharedFoldersResultMsg = GED("http://www.virtualbox.org/", "IMachine_getSharedFoldersResponse").pyclass

IMachine_getClipboardModeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getClipboardMode").pyclass

IMachine_getClipboardModeResultMsg = GED("http://www.virtualbox.org/", "IMachine_getClipboardModeResponse").pyclass

IMachine_setClipboardModeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setClipboardMode").pyclass

IMachine_setClipboardModeResultMsg = GED("http://www.virtualbox.org/", "IMachine_setClipboardModeResponse").pyclass

IMachine_getGuestPropertyNotificationPatternsRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getGuestPropertyNotificationPatterns").pyclass

IMachine_getGuestPropertyNotificationPatternsResultMsg = GED("http://www.virtualbox.org/", "IMachine_getGuestPropertyNotificationPatternsResponse").pyclass

IMachine_setGuestPropertyNotificationPatternsRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setGuestPropertyNotificationPatterns").pyclass

IMachine_setGuestPropertyNotificationPatternsResultMsg = GED("http://www.virtualbox.org/", "IMachine_setGuestPropertyNotificationPatternsResponse").pyclass

IMachine_getTeleporterEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getTeleporterEnabled").pyclass

IMachine_getTeleporterEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_getTeleporterEnabledResponse").pyclass

IMachine_setTeleporterEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setTeleporterEnabled").pyclass

IMachine_setTeleporterEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_setTeleporterEnabledResponse").pyclass

IMachine_getTeleporterPortRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getTeleporterPort").pyclass

IMachine_getTeleporterPortResultMsg = GED("http://www.virtualbox.org/", "IMachine_getTeleporterPortResponse").pyclass

IMachine_setTeleporterPortRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setTeleporterPort").pyclass

IMachine_setTeleporterPortResultMsg = GED("http://www.virtualbox.org/", "IMachine_setTeleporterPortResponse").pyclass

IMachine_getTeleporterAddressRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getTeleporterAddress").pyclass

IMachine_getTeleporterAddressResultMsg = GED("http://www.virtualbox.org/", "IMachine_getTeleporterAddressResponse").pyclass

IMachine_setTeleporterAddressRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setTeleporterAddress").pyclass

IMachine_setTeleporterAddressResultMsg = GED("http://www.virtualbox.org/", "IMachine_setTeleporterAddressResponse").pyclass

IMachine_getTeleporterPasswordRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getTeleporterPassword").pyclass

IMachine_getTeleporterPasswordResultMsg = GED("http://www.virtualbox.org/", "IMachine_getTeleporterPasswordResponse").pyclass

IMachine_setTeleporterPasswordRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setTeleporterPassword").pyclass

IMachine_setTeleporterPasswordResultMsg = GED("http://www.virtualbox.org/", "IMachine_setTeleporterPasswordResponse").pyclass

IMachine_getFaultToleranceStateRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getFaultToleranceState").pyclass

IMachine_getFaultToleranceStateResultMsg = GED("http://www.virtualbox.org/", "IMachine_getFaultToleranceStateResponse").pyclass

IMachine_setFaultToleranceStateRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setFaultToleranceState").pyclass

IMachine_setFaultToleranceStateResultMsg = GED("http://www.virtualbox.org/", "IMachine_setFaultToleranceStateResponse").pyclass

IMachine_getFaultTolerancePortRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getFaultTolerancePort").pyclass

IMachine_getFaultTolerancePortResultMsg = GED("http://www.virtualbox.org/", "IMachine_getFaultTolerancePortResponse").pyclass

IMachine_setFaultTolerancePortRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setFaultTolerancePort").pyclass

IMachine_setFaultTolerancePortResultMsg = GED("http://www.virtualbox.org/", "IMachine_setFaultTolerancePortResponse").pyclass

IMachine_getFaultToleranceAddressRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getFaultToleranceAddress").pyclass

IMachine_getFaultToleranceAddressResultMsg = GED("http://www.virtualbox.org/", "IMachine_getFaultToleranceAddressResponse").pyclass

IMachine_setFaultToleranceAddressRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setFaultToleranceAddress").pyclass

IMachine_setFaultToleranceAddressResultMsg = GED("http://www.virtualbox.org/", "IMachine_setFaultToleranceAddressResponse").pyclass

IMachine_getFaultTolerancePasswordRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getFaultTolerancePassword").pyclass

IMachine_getFaultTolerancePasswordResultMsg = GED("http://www.virtualbox.org/", "IMachine_getFaultTolerancePasswordResponse").pyclass

IMachine_setFaultTolerancePasswordRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setFaultTolerancePassword").pyclass

IMachine_setFaultTolerancePasswordResultMsg = GED("http://www.virtualbox.org/", "IMachine_setFaultTolerancePasswordResponse").pyclass

IMachine_getFaultToleranceSyncIntervalRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getFaultToleranceSyncInterval").pyclass

IMachine_getFaultToleranceSyncIntervalResultMsg = GED("http://www.virtualbox.org/", "IMachine_getFaultToleranceSyncIntervalResponse").pyclass

IMachine_setFaultToleranceSyncIntervalRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setFaultToleranceSyncInterval").pyclass

IMachine_setFaultToleranceSyncIntervalResultMsg = GED("http://www.virtualbox.org/", "IMachine_setFaultToleranceSyncIntervalResponse").pyclass

IMachine_getRTCUseUTCRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getRTCUseUTC").pyclass

IMachine_getRTCUseUTCResultMsg = GED("http://www.virtualbox.org/", "IMachine_getRTCUseUTCResponse").pyclass

IMachine_setRTCUseUTCRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setRTCUseUTC").pyclass

IMachine_setRTCUseUTCResultMsg = GED("http://www.virtualbox.org/", "IMachine_setRTCUseUTCResponse").pyclass

IMachine_getIoCacheEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getIoCacheEnabled").pyclass

IMachine_getIoCacheEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_getIoCacheEnabledResponse").pyclass

IMachine_setIoCacheEnabledRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setIoCacheEnabled").pyclass

IMachine_setIoCacheEnabledResultMsg = GED("http://www.virtualbox.org/", "IMachine_setIoCacheEnabledResponse").pyclass

IMachine_getIoCacheSizeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getIoCacheSize").pyclass

IMachine_getIoCacheSizeResultMsg = GED("http://www.virtualbox.org/", "IMachine_getIoCacheSizeResponse").pyclass

IMachine_setIoCacheSizeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setIoCacheSize").pyclass

IMachine_setIoCacheSizeResultMsg = GED("http://www.virtualbox.org/", "IMachine_setIoCacheSizeResponse").pyclass

IMachine_getBandwidthControlRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getBandwidthControl").pyclass

IMachine_getBandwidthControlResultMsg = GED("http://www.virtualbox.org/", "IMachine_getBandwidthControlResponse").pyclass

IMachine_getPciDeviceAssignmentsRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getPciDeviceAssignments").pyclass

IMachine_getPciDeviceAssignmentsResultMsg = GED("http://www.virtualbox.org/", "IMachine_getPciDeviceAssignmentsResponse").pyclass

IMachine_lockMachineRequestMsg = GED("http://www.virtualbox.org/", "IMachine_lockMachine").pyclass

IMachine_lockMachineResultMsg = GED("http://www.virtualbox.org/", "IMachine_lockMachineResponse").pyclass

IMachine_launchVMProcessRequestMsg = GED("http://www.virtualbox.org/", "IMachine_launchVMProcess").pyclass

IMachine_launchVMProcessResultMsg = GED("http://www.virtualbox.org/", "IMachine_launchVMProcessResponse").pyclass

IMachine_setBootOrderRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setBootOrder").pyclass

IMachine_setBootOrderResultMsg = GED("http://www.virtualbox.org/", "IMachine_setBootOrderResponse").pyclass

IMachine_getBootOrderRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getBootOrder").pyclass

IMachine_getBootOrderResultMsg = GED("http://www.virtualbox.org/", "IMachine_getBootOrderResponse").pyclass

IMachine_attachDeviceRequestMsg = GED("http://www.virtualbox.org/", "IMachine_attachDevice").pyclass

IMachine_attachDeviceResultMsg = GED("http://www.virtualbox.org/", "IMachine_attachDeviceResponse").pyclass

IMachine_detachDeviceRequestMsg = GED("http://www.virtualbox.org/", "IMachine_detachDevice").pyclass

IMachine_detachDeviceResultMsg = GED("http://www.virtualbox.org/", "IMachine_detachDeviceResponse").pyclass

IMachine_passthroughDeviceRequestMsg = GED("http://www.virtualbox.org/", "IMachine_passthroughDevice").pyclass

IMachine_passthroughDeviceResultMsg = GED("http://www.virtualbox.org/", "IMachine_passthroughDeviceResponse").pyclass

IMachine_temporaryEjectDeviceRequestMsg = GED("http://www.virtualbox.org/", "IMachine_temporaryEjectDevice").pyclass

IMachine_temporaryEjectDeviceResultMsg = GED("http://www.virtualbox.org/", "IMachine_temporaryEjectDeviceResponse").pyclass

IMachine_nonRotationalDeviceRequestMsg = GED("http://www.virtualbox.org/", "IMachine_nonRotationalDevice").pyclass

IMachine_nonRotationalDeviceResultMsg = GED("http://www.virtualbox.org/", "IMachine_nonRotationalDeviceResponse").pyclass

IMachine_setBandwidthGroupForDeviceRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setBandwidthGroupForDevice").pyclass

IMachine_setBandwidthGroupForDeviceResultMsg = GED("http://www.virtualbox.org/", "IMachine_setBandwidthGroupForDeviceResponse").pyclass

IMachine_mountMediumRequestMsg = GED("http://www.virtualbox.org/", "IMachine_mountMedium").pyclass

IMachine_mountMediumResultMsg = GED("http://www.virtualbox.org/", "IMachine_mountMediumResponse").pyclass

IMachine_getMediumRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getMedium").pyclass

IMachine_getMediumResultMsg = GED("http://www.virtualbox.org/", "IMachine_getMediumResponse").pyclass

IMachine_getMediumAttachmentsOfControllerRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getMediumAttachmentsOfController").pyclass

IMachine_getMediumAttachmentsOfControllerResultMsg = GED("http://www.virtualbox.org/", "IMachine_getMediumAttachmentsOfControllerResponse").pyclass

IMachine_getMediumAttachmentRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getMediumAttachment").pyclass

IMachine_getMediumAttachmentResultMsg = GED("http://www.virtualbox.org/", "IMachine_getMediumAttachmentResponse").pyclass

IMachine_attachHostPciDeviceRequestMsg = GED("http://www.virtualbox.org/", "IMachine_attachHostPciDevice").pyclass

IMachine_attachHostPciDeviceResultMsg = GED("http://www.virtualbox.org/", "IMachine_attachHostPciDeviceResponse").pyclass

IMachine_detachHostPciDeviceRequestMsg = GED("http://www.virtualbox.org/", "IMachine_detachHostPciDevice").pyclass

IMachine_detachHostPciDeviceResultMsg = GED("http://www.virtualbox.org/", "IMachine_detachHostPciDeviceResponse").pyclass

IMachine_getNetworkAdapterRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getNetworkAdapter").pyclass

IMachine_getNetworkAdapterResultMsg = GED("http://www.virtualbox.org/", "IMachine_getNetworkAdapterResponse").pyclass

IMachine_addStorageControllerRequestMsg = GED("http://www.virtualbox.org/", "IMachine_addStorageController").pyclass

IMachine_addStorageControllerResultMsg = GED("http://www.virtualbox.org/", "IMachine_addStorageControllerResponse").pyclass

IMachine_getStorageControllerByNameRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getStorageControllerByName").pyclass

IMachine_getStorageControllerByNameResultMsg = GED("http://www.virtualbox.org/", "IMachine_getStorageControllerByNameResponse").pyclass

IMachine_getStorageControllerByInstanceRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getStorageControllerByInstance").pyclass

IMachine_getStorageControllerByInstanceResultMsg = GED("http://www.virtualbox.org/", "IMachine_getStorageControllerByInstanceResponse").pyclass

IMachine_removeStorageControllerRequestMsg = GED("http://www.virtualbox.org/", "IMachine_removeStorageController").pyclass

IMachine_removeStorageControllerResultMsg = GED("http://www.virtualbox.org/", "IMachine_removeStorageControllerResponse").pyclass

IMachine_setStorageControllerBootableRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setStorageControllerBootable").pyclass

IMachine_setStorageControllerBootableResultMsg = GED("http://www.virtualbox.org/", "IMachine_setStorageControllerBootableResponse").pyclass

IMachine_getSerialPortRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getSerialPort").pyclass

IMachine_getSerialPortResultMsg = GED("http://www.virtualbox.org/", "IMachine_getSerialPortResponse").pyclass

IMachine_getParallelPortRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getParallelPort").pyclass

IMachine_getParallelPortResultMsg = GED("http://www.virtualbox.org/", "IMachine_getParallelPortResponse").pyclass

IMachine_getExtraDataKeysRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getExtraDataKeys").pyclass

IMachine_getExtraDataKeysResultMsg = GED("http://www.virtualbox.org/", "IMachine_getExtraDataKeysResponse").pyclass

IMachine_getExtraDataRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getExtraData").pyclass

IMachine_getExtraDataResultMsg = GED("http://www.virtualbox.org/", "IMachine_getExtraDataResponse").pyclass

IMachine_setExtraDataRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setExtraData").pyclass

IMachine_setExtraDataResultMsg = GED("http://www.virtualbox.org/", "IMachine_setExtraDataResponse").pyclass

IMachine_getCPUPropertyRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getCPUProperty").pyclass

IMachine_getCPUPropertyResultMsg = GED("http://www.virtualbox.org/", "IMachine_getCPUPropertyResponse").pyclass

IMachine_setCPUPropertyRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setCPUProperty").pyclass

IMachine_setCPUPropertyResultMsg = GED("http://www.virtualbox.org/", "IMachine_setCPUPropertyResponse").pyclass

IMachine_getCPUIDLeafRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getCPUIDLeaf").pyclass

IMachine_getCPUIDLeafResultMsg = GED("http://www.virtualbox.org/", "IMachine_getCPUIDLeafResponse").pyclass

IMachine_setCPUIDLeafRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setCPUIDLeaf").pyclass

IMachine_setCPUIDLeafResultMsg = GED("http://www.virtualbox.org/", "IMachine_setCPUIDLeafResponse").pyclass

IMachine_removeCPUIDLeafRequestMsg = GED("http://www.virtualbox.org/", "IMachine_removeCPUIDLeaf").pyclass

IMachine_removeCPUIDLeafResultMsg = GED("http://www.virtualbox.org/", "IMachine_removeCPUIDLeafResponse").pyclass

IMachine_removeAllCPUIDLeavesRequestMsg = GED("http://www.virtualbox.org/", "IMachine_removeAllCPUIDLeaves").pyclass

IMachine_removeAllCPUIDLeavesResultMsg = GED("http://www.virtualbox.org/", "IMachine_removeAllCPUIDLeavesResponse").pyclass

IMachine_getHWVirtExPropertyRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getHWVirtExProperty").pyclass

IMachine_getHWVirtExPropertyResultMsg = GED("http://www.virtualbox.org/", "IMachine_getHWVirtExPropertyResponse").pyclass

IMachine_setHWVirtExPropertyRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setHWVirtExProperty").pyclass

IMachine_setHWVirtExPropertyResultMsg = GED("http://www.virtualbox.org/", "IMachine_setHWVirtExPropertyResponse").pyclass

IMachine_saveSettingsRequestMsg = GED("http://www.virtualbox.org/", "IMachine_saveSettings").pyclass

IMachine_saveSettingsResultMsg = GED("http://www.virtualbox.org/", "IMachine_saveSettingsResponse").pyclass

IMachine_discardSettingsRequestMsg = GED("http://www.virtualbox.org/", "IMachine_discardSettings").pyclass

IMachine_discardSettingsResultMsg = GED("http://www.virtualbox.org/", "IMachine_discardSettingsResponse").pyclass

IMachine_unregisterRequestMsg = GED("http://www.virtualbox.org/", "IMachine_unregister").pyclass

IMachine_unregisterResultMsg = GED("http://www.virtualbox.org/", "IMachine_unregisterResponse").pyclass

IMachine_deleteRequestMsg = GED("http://www.virtualbox.org/", "IMachine_delete").pyclass

IMachine_deleteResultMsg = GED("http://www.virtualbox.org/", "IMachine_deleteResponse").pyclass

IMachine_exportRequestMsg = GED("http://www.virtualbox.org/", "IMachine_export").pyclass

IMachine_exportResultMsg = GED("http://www.virtualbox.org/", "IMachine_exportResponse").pyclass

IMachine_findSnapshotRequestMsg = GED("http://www.virtualbox.org/", "IMachine_findSnapshot").pyclass

IMachine_findSnapshotResultMsg = GED("http://www.virtualbox.org/", "IMachine_findSnapshotResponse").pyclass

IMachine_createSharedFolderRequestMsg = GED("http://www.virtualbox.org/", "IMachine_createSharedFolder").pyclass

IMachine_createSharedFolderResultMsg = GED("http://www.virtualbox.org/", "IMachine_createSharedFolderResponse").pyclass

IMachine_removeSharedFolderRequestMsg = GED("http://www.virtualbox.org/", "IMachine_removeSharedFolder").pyclass

IMachine_removeSharedFolderResultMsg = GED("http://www.virtualbox.org/", "IMachine_removeSharedFolderResponse").pyclass

IMachine_canShowConsoleWindowRequestMsg = GED("http://www.virtualbox.org/", "IMachine_canShowConsoleWindow").pyclass

IMachine_canShowConsoleWindowResultMsg = GED("http://www.virtualbox.org/", "IMachine_canShowConsoleWindowResponse").pyclass

IMachine_showConsoleWindowRequestMsg = GED("http://www.virtualbox.org/", "IMachine_showConsoleWindow").pyclass

IMachine_showConsoleWindowResultMsg = GED("http://www.virtualbox.org/", "IMachine_showConsoleWindowResponse").pyclass

IMachine_getGuestPropertyRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getGuestProperty").pyclass

IMachine_getGuestPropertyResultMsg = GED("http://www.virtualbox.org/", "IMachine_getGuestPropertyResponse").pyclass

IMachine_getGuestPropertyValueRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getGuestPropertyValue").pyclass

IMachine_getGuestPropertyValueResultMsg = GED("http://www.virtualbox.org/", "IMachine_getGuestPropertyValueResponse").pyclass

IMachine_getGuestPropertyTimestampRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getGuestPropertyTimestamp").pyclass

IMachine_getGuestPropertyTimestampResultMsg = GED("http://www.virtualbox.org/", "IMachine_getGuestPropertyTimestampResponse").pyclass

IMachine_setGuestPropertyRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setGuestProperty").pyclass

IMachine_setGuestPropertyResultMsg = GED("http://www.virtualbox.org/", "IMachine_setGuestPropertyResponse").pyclass

IMachine_setGuestPropertyValueRequestMsg = GED("http://www.virtualbox.org/", "IMachine_setGuestPropertyValue").pyclass

IMachine_setGuestPropertyValueResultMsg = GED("http://www.virtualbox.org/", "IMachine_setGuestPropertyValueResponse").pyclass

IMachine_enumerateGuestPropertiesRequestMsg = GED("http://www.virtualbox.org/", "IMachine_enumerateGuestProperties").pyclass

IMachine_enumerateGuestPropertiesResultMsg = GED("http://www.virtualbox.org/", "IMachine_enumerateGuestPropertiesResponse").pyclass

IMachine_querySavedGuestSizeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_querySavedGuestSize").pyclass

IMachine_querySavedGuestSizeResultMsg = GED("http://www.virtualbox.org/", "IMachine_querySavedGuestSizeResponse").pyclass

IMachine_querySavedThumbnailSizeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_querySavedThumbnailSize").pyclass

IMachine_querySavedThumbnailSizeResultMsg = GED("http://www.virtualbox.org/", "IMachine_querySavedThumbnailSizeResponse").pyclass

IMachine_readSavedThumbnailToArrayRequestMsg = GED("http://www.virtualbox.org/", "IMachine_readSavedThumbnailToArray").pyclass

IMachine_readSavedThumbnailToArrayResultMsg = GED("http://www.virtualbox.org/", "IMachine_readSavedThumbnailToArrayResponse").pyclass

IMachine_readSavedThumbnailPNGToArrayRequestMsg = GED("http://www.virtualbox.org/", "IMachine_readSavedThumbnailPNGToArray").pyclass

IMachine_readSavedThumbnailPNGToArrayResultMsg = GED("http://www.virtualbox.org/", "IMachine_readSavedThumbnailPNGToArrayResponse").pyclass

IMachine_querySavedScreenshotPNGSizeRequestMsg = GED("http://www.virtualbox.org/", "IMachine_querySavedScreenshotPNGSize").pyclass

IMachine_querySavedScreenshotPNGSizeResultMsg = GED("http://www.virtualbox.org/", "IMachine_querySavedScreenshotPNGSizeResponse").pyclass

IMachine_readSavedScreenshotPNGToArrayRequestMsg = GED("http://www.virtualbox.org/", "IMachine_readSavedScreenshotPNGToArray").pyclass

IMachine_readSavedScreenshotPNGToArrayResultMsg = GED("http://www.virtualbox.org/", "IMachine_readSavedScreenshotPNGToArrayResponse").pyclass

IMachine_hotPlugCPURequestMsg = GED("http://www.virtualbox.org/", "IMachine_hotPlugCPU").pyclass

IMachine_hotPlugCPUResultMsg = GED("http://www.virtualbox.org/", "IMachine_hotPlugCPUResponse").pyclass

IMachine_hotUnplugCPURequestMsg = GED("http://www.virtualbox.org/", "IMachine_hotUnplugCPU").pyclass

IMachine_hotUnplugCPUResultMsg = GED("http://www.virtualbox.org/", "IMachine_hotUnplugCPUResponse").pyclass

IMachine_getCPUStatusRequestMsg = GED("http://www.virtualbox.org/", "IMachine_getCPUStatus").pyclass

IMachine_getCPUStatusResultMsg = GED("http://www.virtualbox.org/", "IMachine_getCPUStatusResponse").pyclass

IMachine_queryLogFilenameRequestMsg = GED("http://www.virtualbox.org/", "IMachine_queryLogFilename").pyclass

IMachine_queryLogFilenameResultMsg = GED("http://www.virtualbox.org/", "IMachine_queryLogFilenameResponse").pyclass

IMachine_readLogRequestMsg = GED("http://www.virtualbox.org/", "IMachine_readLog").pyclass

IMachine_readLogResultMsg = GED("http://www.virtualbox.org/", "IMachine_readLogResponse").pyclass

IMachine_cloneToRequestMsg = GED("http://www.virtualbox.org/", "IMachine_cloneTo").pyclass

IMachine_cloneToResultMsg = GED("http://www.virtualbox.org/", "IMachine_cloneToResponse").pyclass

IConsole_getMachineRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getMachine").pyclass

IConsole_getMachineResultMsg = GED("http://www.virtualbox.org/", "IConsole_getMachineResponse").pyclass

IConsole_getStateRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getState").pyclass

IConsole_getStateResultMsg = GED("http://www.virtualbox.org/", "IConsole_getStateResponse").pyclass

IConsole_getGuestRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getGuest").pyclass

IConsole_getGuestResultMsg = GED("http://www.virtualbox.org/", "IConsole_getGuestResponse").pyclass

IConsole_getKeyboardRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getKeyboard").pyclass

IConsole_getKeyboardResultMsg = GED("http://www.virtualbox.org/", "IConsole_getKeyboardResponse").pyclass

IConsole_getMouseRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getMouse").pyclass

IConsole_getMouseResultMsg = GED("http://www.virtualbox.org/", "IConsole_getMouseResponse").pyclass

IConsole_getDisplayRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getDisplay").pyclass

IConsole_getDisplayResultMsg = GED("http://www.virtualbox.org/", "IConsole_getDisplayResponse").pyclass

IConsole_getUSBDevicesRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getUSBDevices").pyclass

IConsole_getUSBDevicesResultMsg = GED("http://www.virtualbox.org/", "IConsole_getUSBDevicesResponse").pyclass

IConsole_getRemoteUSBDevicesRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getRemoteUSBDevices").pyclass

IConsole_getRemoteUSBDevicesResultMsg = GED("http://www.virtualbox.org/", "IConsole_getRemoteUSBDevicesResponse").pyclass

IConsole_getSharedFoldersRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getSharedFolders").pyclass

IConsole_getSharedFoldersResultMsg = GED("http://www.virtualbox.org/", "IConsole_getSharedFoldersResponse").pyclass

IConsole_getVRDEServerInfoRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getVRDEServerInfo").pyclass

IConsole_getVRDEServerInfoResultMsg = GED("http://www.virtualbox.org/", "IConsole_getVRDEServerInfoResponse").pyclass

IConsole_getEventSourceRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getEventSource").pyclass

IConsole_getEventSourceResultMsg = GED("http://www.virtualbox.org/", "IConsole_getEventSourceResponse").pyclass

IConsole_getAttachedPciDevicesRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getAttachedPciDevices").pyclass

IConsole_getAttachedPciDevicesResultMsg = GED("http://www.virtualbox.org/", "IConsole_getAttachedPciDevicesResponse").pyclass

IConsole_getUseHostClipboardRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getUseHostClipboard").pyclass

IConsole_getUseHostClipboardResultMsg = GED("http://www.virtualbox.org/", "IConsole_getUseHostClipboardResponse").pyclass

IConsole_setUseHostClipboardRequestMsg = GED("http://www.virtualbox.org/", "IConsole_setUseHostClipboard").pyclass

IConsole_setUseHostClipboardResultMsg = GED("http://www.virtualbox.org/", "IConsole_setUseHostClipboardResponse").pyclass

IConsole_powerUpRequestMsg = GED("http://www.virtualbox.org/", "IConsole_powerUp").pyclass

IConsole_powerUpResultMsg = GED("http://www.virtualbox.org/", "IConsole_powerUpResponse").pyclass

IConsole_powerUpPausedRequestMsg = GED("http://www.virtualbox.org/", "IConsole_powerUpPaused").pyclass

IConsole_powerUpPausedResultMsg = GED("http://www.virtualbox.org/", "IConsole_powerUpPausedResponse").pyclass

IConsole_powerDownRequestMsg = GED("http://www.virtualbox.org/", "IConsole_powerDown").pyclass

IConsole_powerDownResultMsg = GED("http://www.virtualbox.org/", "IConsole_powerDownResponse").pyclass

IConsole_resetRequestMsg = GED("http://www.virtualbox.org/", "IConsole_reset").pyclass

IConsole_resetResultMsg = GED("http://www.virtualbox.org/", "IConsole_resetResponse").pyclass

IConsole_pauseRequestMsg = GED("http://www.virtualbox.org/", "IConsole_pause").pyclass

IConsole_pauseResultMsg = GED("http://www.virtualbox.org/", "IConsole_pauseResponse").pyclass

IConsole_resumeRequestMsg = GED("http://www.virtualbox.org/", "IConsole_resume").pyclass

IConsole_resumeResultMsg = GED("http://www.virtualbox.org/", "IConsole_resumeResponse").pyclass

IConsole_powerButtonRequestMsg = GED("http://www.virtualbox.org/", "IConsole_powerButton").pyclass

IConsole_powerButtonResultMsg = GED("http://www.virtualbox.org/", "IConsole_powerButtonResponse").pyclass

IConsole_sleepButtonRequestMsg = GED("http://www.virtualbox.org/", "IConsole_sleepButton").pyclass

IConsole_sleepButtonResultMsg = GED("http://www.virtualbox.org/", "IConsole_sleepButtonResponse").pyclass

IConsole_getPowerButtonHandledRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getPowerButtonHandled").pyclass

IConsole_getPowerButtonHandledResultMsg = GED("http://www.virtualbox.org/", "IConsole_getPowerButtonHandledResponse").pyclass

IConsole_getGuestEnteredACPIModeRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getGuestEnteredACPIMode").pyclass

IConsole_getGuestEnteredACPIModeResultMsg = GED("http://www.virtualbox.org/", "IConsole_getGuestEnteredACPIModeResponse").pyclass

IConsole_saveStateRequestMsg = GED("http://www.virtualbox.org/", "IConsole_saveState").pyclass

IConsole_saveStateResultMsg = GED("http://www.virtualbox.org/", "IConsole_saveStateResponse").pyclass

IConsole_adoptSavedStateRequestMsg = GED("http://www.virtualbox.org/", "IConsole_adoptSavedState").pyclass

IConsole_adoptSavedStateResultMsg = GED("http://www.virtualbox.org/", "IConsole_adoptSavedStateResponse").pyclass

IConsole_discardSavedStateRequestMsg = GED("http://www.virtualbox.org/", "IConsole_discardSavedState").pyclass

IConsole_discardSavedStateResultMsg = GED("http://www.virtualbox.org/", "IConsole_discardSavedStateResponse").pyclass

IConsole_getDeviceActivityRequestMsg = GED("http://www.virtualbox.org/", "IConsole_getDeviceActivity").pyclass

IConsole_getDeviceActivityResultMsg = GED("http://www.virtualbox.org/", "IConsole_getDeviceActivityResponse").pyclass

IConsole_attachUSBDeviceRequestMsg = GED("http://www.virtualbox.org/", "IConsole_attachUSBDevice").pyclass

IConsole_attachUSBDeviceResultMsg = GED("http://www.virtualbox.org/", "IConsole_attachUSBDeviceResponse").pyclass

IConsole_detachUSBDeviceRequestMsg = GED("http://www.virtualbox.org/", "IConsole_detachUSBDevice").pyclass

IConsole_detachUSBDeviceResultMsg = GED("http://www.virtualbox.org/", "IConsole_detachUSBDeviceResponse").pyclass

IConsole_findUSBDeviceByAddressRequestMsg = GED("http://www.virtualbox.org/", "IConsole_findUSBDeviceByAddress").pyclass

IConsole_findUSBDeviceByAddressResultMsg = GED("http://www.virtualbox.org/", "IConsole_findUSBDeviceByAddressResponse").pyclass

IConsole_findUSBDeviceByIdRequestMsg = GED("http://www.virtualbox.org/", "IConsole_findUSBDeviceById").pyclass

IConsole_findUSBDeviceByIdResultMsg = GED("http://www.virtualbox.org/", "IConsole_findUSBDeviceByIdResponse").pyclass

IConsole_createSharedFolderRequestMsg = GED("http://www.virtualbox.org/", "IConsole_createSharedFolder").pyclass

IConsole_createSharedFolderResultMsg = GED("http://www.virtualbox.org/", "IConsole_createSharedFolderResponse").pyclass

IConsole_removeSharedFolderRequestMsg = GED("http://www.virtualbox.org/", "IConsole_removeSharedFolder").pyclass

IConsole_removeSharedFolderResultMsg = GED("http://www.virtualbox.org/", "IConsole_removeSharedFolderResponse").pyclass

IConsole_takeSnapshotRequestMsg = GED("http://www.virtualbox.org/", "IConsole_takeSnapshot").pyclass

IConsole_takeSnapshotResultMsg = GED("http://www.virtualbox.org/", "IConsole_takeSnapshotResponse").pyclass

IConsole_deleteSnapshotRequestMsg = GED("http://www.virtualbox.org/", "IConsole_deleteSnapshot").pyclass

IConsole_deleteSnapshotResultMsg = GED("http://www.virtualbox.org/", "IConsole_deleteSnapshotResponse").pyclass

IConsole_deleteSnapshotAndAllChildrenRequestMsg = GED("http://www.virtualbox.org/", "IConsole_deleteSnapshotAndAllChildren").pyclass

IConsole_deleteSnapshotAndAllChildrenResultMsg = GED("http://www.virtualbox.org/", "IConsole_deleteSnapshotAndAllChildrenResponse").pyclass

IConsole_deleteSnapshotRangeRequestMsg = GED("http://www.virtualbox.org/", "IConsole_deleteSnapshotRange").pyclass

IConsole_deleteSnapshotRangeResultMsg = GED("http://www.virtualbox.org/", "IConsole_deleteSnapshotRangeResponse").pyclass

IConsole_restoreSnapshotRequestMsg = GED("http://www.virtualbox.org/", "IConsole_restoreSnapshot").pyclass

IConsole_restoreSnapshotResultMsg = GED("http://www.virtualbox.org/", "IConsole_restoreSnapshotResponse").pyclass

IConsole_teleportRequestMsg = GED("http://www.virtualbox.org/", "IConsole_teleport").pyclass

IConsole_teleportResultMsg = GED("http://www.virtualbox.org/", "IConsole_teleportResponse").pyclass

IHostNetworkInterface_getNameRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getName").pyclass

IHostNetworkInterface_getNameResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getNameResponse").pyclass

IHostNetworkInterface_getIdRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getId").pyclass

IHostNetworkInterface_getIdResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getIdResponse").pyclass

IHostNetworkInterface_getNetworkNameRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getNetworkName").pyclass

IHostNetworkInterface_getNetworkNameResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getNetworkNameResponse").pyclass

IHostNetworkInterface_getDhcpEnabledRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getDhcpEnabled").pyclass

IHostNetworkInterface_getDhcpEnabledResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getDhcpEnabledResponse").pyclass

IHostNetworkInterface_getIPAddressRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getIPAddress").pyclass

IHostNetworkInterface_getIPAddressResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getIPAddressResponse").pyclass

IHostNetworkInterface_getNetworkMaskRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getNetworkMask").pyclass

IHostNetworkInterface_getNetworkMaskResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getNetworkMaskResponse").pyclass

IHostNetworkInterface_getIPV6SupportedRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getIPV6Supported").pyclass

IHostNetworkInterface_getIPV6SupportedResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getIPV6SupportedResponse").pyclass

IHostNetworkInterface_getIPV6AddressRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getIPV6Address").pyclass

IHostNetworkInterface_getIPV6AddressResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getIPV6AddressResponse").pyclass

IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getIPV6NetworkMaskPrefixLength").pyclass

IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse").pyclass

IHostNetworkInterface_getHardwareAddressRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getHardwareAddress").pyclass

IHostNetworkInterface_getHardwareAddressResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getHardwareAddressResponse").pyclass

IHostNetworkInterface_getMediumTypeRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getMediumType").pyclass

IHostNetworkInterface_getMediumTypeResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getMediumTypeResponse").pyclass

IHostNetworkInterface_getStatusRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getStatus").pyclass

IHostNetworkInterface_getStatusResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getStatusResponse").pyclass

IHostNetworkInterface_getInterfaceTypeRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getInterfaceType").pyclass

IHostNetworkInterface_getInterfaceTypeResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_getInterfaceTypeResponse").pyclass

IHostNetworkInterface_enableStaticIpConfigRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_enableStaticIpConfig").pyclass

IHostNetworkInterface_enableStaticIpConfigResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_enableStaticIpConfigResponse").pyclass

IHostNetworkInterface_enableStaticIpConfigV6RequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_enableStaticIpConfigV6").pyclass

IHostNetworkInterface_enableStaticIpConfigV6ResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_enableStaticIpConfigV6Response").pyclass

IHostNetworkInterface_enableDynamicIpConfigRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_enableDynamicIpConfig").pyclass

IHostNetworkInterface_enableDynamicIpConfigResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_enableDynamicIpConfigResponse").pyclass

IHostNetworkInterface_dhcpRediscoverRequestMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_dhcpRediscover").pyclass

IHostNetworkInterface_dhcpRediscoverResultMsg = GED("http://www.virtualbox.org/", "IHostNetworkInterface_dhcpRediscoverResponse").pyclass

IHost_getDVDDrivesRequestMsg = GED("http://www.virtualbox.org/", "IHost_getDVDDrives").pyclass

IHost_getDVDDrivesResultMsg = GED("http://www.virtualbox.org/", "IHost_getDVDDrivesResponse").pyclass

IHost_getFloppyDrivesRequestMsg = GED("http://www.virtualbox.org/", "IHost_getFloppyDrives").pyclass

IHost_getFloppyDrivesResultMsg = GED("http://www.virtualbox.org/", "IHost_getFloppyDrivesResponse").pyclass

IHost_getUSBDevicesRequestMsg = GED("http://www.virtualbox.org/", "IHost_getUSBDevices").pyclass

IHost_getUSBDevicesResultMsg = GED("http://www.virtualbox.org/", "IHost_getUSBDevicesResponse").pyclass

IHost_getUSBDeviceFiltersRequestMsg = GED("http://www.virtualbox.org/", "IHost_getUSBDeviceFilters").pyclass

IHost_getUSBDeviceFiltersResultMsg = GED("http://www.virtualbox.org/", "IHost_getUSBDeviceFiltersResponse").pyclass

IHost_getNetworkInterfacesRequestMsg = GED("http://www.virtualbox.org/", "IHost_getNetworkInterfaces").pyclass

IHost_getNetworkInterfacesResultMsg = GED("http://www.virtualbox.org/", "IHost_getNetworkInterfacesResponse").pyclass

IHost_getProcessorCountRequestMsg = GED("http://www.virtualbox.org/", "IHost_getProcessorCount").pyclass

IHost_getProcessorCountResultMsg = GED("http://www.virtualbox.org/", "IHost_getProcessorCountResponse").pyclass

IHost_getProcessorOnlineCountRequestMsg = GED("http://www.virtualbox.org/", "IHost_getProcessorOnlineCount").pyclass

IHost_getProcessorOnlineCountResultMsg = GED("http://www.virtualbox.org/", "IHost_getProcessorOnlineCountResponse").pyclass

IHost_getProcessorCoreCountRequestMsg = GED("http://www.virtualbox.org/", "IHost_getProcessorCoreCount").pyclass

IHost_getProcessorCoreCountResultMsg = GED("http://www.virtualbox.org/", "IHost_getProcessorCoreCountResponse").pyclass

IHost_getMemorySizeRequestMsg = GED("http://www.virtualbox.org/", "IHost_getMemorySize").pyclass

IHost_getMemorySizeResultMsg = GED("http://www.virtualbox.org/", "IHost_getMemorySizeResponse").pyclass

IHost_getMemoryAvailableRequestMsg = GED("http://www.virtualbox.org/", "IHost_getMemoryAvailable").pyclass

IHost_getMemoryAvailableResultMsg = GED("http://www.virtualbox.org/", "IHost_getMemoryAvailableResponse").pyclass

IHost_getOperatingSystemRequestMsg = GED("http://www.virtualbox.org/", "IHost_getOperatingSystem").pyclass

IHost_getOperatingSystemResultMsg = GED("http://www.virtualbox.org/", "IHost_getOperatingSystemResponse").pyclass

IHost_getOSVersionRequestMsg = GED("http://www.virtualbox.org/", "IHost_getOSVersion").pyclass

IHost_getOSVersionResultMsg = GED("http://www.virtualbox.org/", "IHost_getOSVersionResponse").pyclass

IHost_getUTCTimeRequestMsg = GED("http://www.virtualbox.org/", "IHost_getUTCTime").pyclass

IHost_getUTCTimeResultMsg = GED("http://www.virtualbox.org/", "IHost_getUTCTimeResponse").pyclass

IHost_getAcceleration3DAvailableRequestMsg = GED("http://www.virtualbox.org/", "IHost_getAcceleration3DAvailable").pyclass

IHost_getAcceleration3DAvailableResultMsg = GED("http://www.virtualbox.org/", "IHost_getAcceleration3DAvailableResponse").pyclass

IHost_getProcessorSpeedRequestMsg = GED("http://www.virtualbox.org/", "IHost_getProcessorSpeed").pyclass

IHost_getProcessorSpeedResultMsg = GED("http://www.virtualbox.org/", "IHost_getProcessorSpeedResponse").pyclass

IHost_getProcessorFeatureRequestMsg = GED("http://www.virtualbox.org/", "IHost_getProcessorFeature").pyclass

IHost_getProcessorFeatureResultMsg = GED("http://www.virtualbox.org/", "IHost_getProcessorFeatureResponse").pyclass

IHost_getProcessorDescriptionRequestMsg = GED("http://www.virtualbox.org/", "IHost_getProcessorDescription").pyclass

IHost_getProcessorDescriptionResultMsg = GED("http://www.virtualbox.org/", "IHost_getProcessorDescriptionResponse").pyclass

IHost_getProcessorCPUIDLeafRequestMsg = GED("http://www.virtualbox.org/", "IHost_getProcessorCPUIDLeaf").pyclass

IHost_getProcessorCPUIDLeafResultMsg = GED("http://www.virtualbox.org/", "IHost_getProcessorCPUIDLeafResponse").pyclass

IHost_createHostOnlyNetworkInterfaceRequestMsg = GED("http://www.virtualbox.org/", "IHost_createHostOnlyNetworkInterface").pyclass

IHost_createHostOnlyNetworkInterfaceResultMsg = GED("http://www.virtualbox.org/", "IHost_createHostOnlyNetworkInterfaceResponse").pyclass

IHost_removeHostOnlyNetworkInterfaceRequestMsg = GED("http://www.virtualbox.org/", "IHost_removeHostOnlyNetworkInterface").pyclass

IHost_removeHostOnlyNetworkInterfaceResultMsg = GED("http://www.virtualbox.org/", "IHost_removeHostOnlyNetworkInterfaceResponse").pyclass

IHost_createUSBDeviceFilterRequestMsg = GED("http://www.virtualbox.org/", "IHost_createUSBDeviceFilter").pyclass

IHost_createUSBDeviceFilterResultMsg = GED("http://www.virtualbox.org/", "IHost_createUSBDeviceFilterResponse").pyclass

IHost_insertUSBDeviceFilterRequestMsg = GED("http://www.virtualbox.org/", "IHost_insertUSBDeviceFilter").pyclass

IHost_insertUSBDeviceFilterResultMsg = GED("http://www.virtualbox.org/", "IHost_insertUSBDeviceFilterResponse").pyclass

IHost_removeUSBDeviceFilterRequestMsg = GED("http://www.virtualbox.org/", "IHost_removeUSBDeviceFilter").pyclass

IHost_removeUSBDeviceFilterResultMsg = GED("http://www.virtualbox.org/", "IHost_removeUSBDeviceFilterResponse").pyclass

IHost_findHostDVDDriveRequestMsg = GED("http://www.virtualbox.org/", "IHost_findHostDVDDrive").pyclass

IHost_findHostDVDDriveResultMsg = GED("http://www.virtualbox.org/", "IHost_findHostDVDDriveResponse").pyclass

IHost_findHostFloppyDriveRequestMsg = GED("http://www.virtualbox.org/", "IHost_findHostFloppyDrive").pyclass

IHost_findHostFloppyDriveResultMsg = GED("http://www.virtualbox.org/", "IHost_findHostFloppyDriveResponse").pyclass

IHost_findHostNetworkInterfaceByNameRequestMsg = GED("http://www.virtualbox.org/", "IHost_findHostNetworkInterfaceByName").pyclass

IHost_findHostNetworkInterfaceByNameResultMsg = GED("http://www.virtualbox.org/", "IHost_findHostNetworkInterfaceByNameResponse").pyclass

IHost_findHostNetworkInterfaceByIdRequestMsg = GED("http://www.virtualbox.org/", "IHost_findHostNetworkInterfaceById").pyclass

IHost_findHostNetworkInterfaceByIdResultMsg = GED("http://www.virtualbox.org/", "IHost_findHostNetworkInterfaceByIdResponse").pyclass

IHost_findHostNetworkInterfacesOfTypeRequestMsg = GED("http://www.virtualbox.org/", "IHost_findHostNetworkInterfacesOfType").pyclass

IHost_findHostNetworkInterfacesOfTypeResultMsg = GED("http://www.virtualbox.org/", "IHost_findHostNetworkInterfacesOfTypeResponse").pyclass

IHost_findUSBDeviceByIdRequestMsg = GED("http://www.virtualbox.org/", "IHost_findUSBDeviceById").pyclass

IHost_findUSBDeviceByIdResultMsg = GED("http://www.virtualbox.org/", "IHost_findUSBDeviceByIdResponse").pyclass

IHost_findUSBDeviceByAddressRequestMsg = GED("http://www.virtualbox.org/", "IHost_findUSBDeviceByAddress").pyclass

IHost_findUSBDeviceByAddressResultMsg = GED("http://www.virtualbox.org/", "IHost_findUSBDeviceByAddressResponse").pyclass

IHost_generateMACAddressRequestMsg = GED("http://www.virtualbox.org/", "IHost_generateMACAddress").pyclass

IHost_generateMACAddressResultMsg = GED("http://www.virtualbox.org/", "IHost_generateMACAddressResponse").pyclass

ISystemProperties_getMinGuestRAMRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMinGuestRAM").pyclass

ISystemProperties_getMinGuestRAMResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMinGuestRAMResponse").pyclass

ISystemProperties_getMaxGuestRAMRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxGuestRAM").pyclass

ISystemProperties_getMaxGuestRAMResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxGuestRAMResponse").pyclass

ISystemProperties_getMinGuestVRAMRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMinGuestVRAM").pyclass

ISystemProperties_getMinGuestVRAMResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMinGuestVRAMResponse").pyclass

ISystemProperties_getMaxGuestVRAMRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxGuestVRAM").pyclass

ISystemProperties_getMaxGuestVRAMResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxGuestVRAMResponse").pyclass

ISystemProperties_getMinGuestCPUCountRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMinGuestCPUCount").pyclass

ISystemProperties_getMinGuestCPUCountResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMinGuestCPUCountResponse").pyclass

ISystemProperties_getMaxGuestCPUCountRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxGuestCPUCount").pyclass

ISystemProperties_getMaxGuestCPUCountResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxGuestCPUCountResponse").pyclass

ISystemProperties_getMaxGuestMonitorsRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxGuestMonitors").pyclass

ISystemProperties_getMaxGuestMonitorsResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxGuestMonitorsResponse").pyclass

ISystemProperties_getInfoVDSizeRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getInfoVDSize").pyclass

ISystemProperties_getInfoVDSizeResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getInfoVDSizeResponse").pyclass

ISystemProperties_getSerialPortCountRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getSerialPortCount").pyclass

ISystemProperties_getSerialPortCountResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getSerialPortCountResponse").pyclass

ISystemProperties_getParallelPortCountRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getParallelPortCount").pyclass

ISystemProperties_getParallelPortCountResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getParallelPortCountResponse").pyclass

ISystemProperties_getMaxBootPositionRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxBootPosition").pyclass

ISystemProperties_getMaxBootPositionResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxBootPositionResponse").pyclass

ISystemProperties_getDefaultMachineFolderRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getDefaultMachineFolder").pyclass

ISystemProperties_getDefaultMachineFolderResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getDefaultMachineFolderResponse").pyclass

ISystemProperties_setDefaultMachineFolderRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setDefaultMachineFolder").pyclass

ISystemProperties_setDefaultMachineFolderResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setDefaultMachineFolderResponse").pyclass

ISystemProperties_getMediumFormatsRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMediumFormats").pyclass

ISystemProperties_getMediumFormatsResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMediumFormatsResponse").pyclass

ISystemProperties_getDefaultHardDiskFormatRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getDefaultHardDiskFormat").pyclass

ISystemProperties_getDefaultHardDiskFormatResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getDefaultHardDiskFormatResponse").pyclass

ISystemProperties_setDefaultHardDiskFormatRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setDefaultHardDiskFormat").pyclass

ISystemProperties_setDefaultHardDiskFormatResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setDefaultHardDiskFormatResponse").pyclass

ISystemProperties_getFreeDiskSpaceWarningRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getFreeDiskSpaceWarning").pyclass

ISystemProperties_getFreeDiskSpaceWarningResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getFreeDiskSpaceWarningResponse").pyclass

ISystemProperties_setFreeDiskSpaceWarningRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setFreeDiskSpaceWarning").pyclass

ISystemProperties_setFreeDiskSpaceWarningResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setFreeDiskSpaceWarningResponse").pyclass

ISystemProperties_getFreeDiskSpacePercentWarningRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getFreeDiskSpacePercentWarning").pyclass

ISystemProperties_getFreeDiskSpacePercentWarningResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getFreeDiskSpacePercentWarningResponse").pyclass

ISystemProperties_setFreeDiskSpacePercentWarningRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setFreeDiskSpacePercentWarning").pyclass

ISystemProperties_setFreeDiskSpacePercentWarningResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setFreeDiskSpacePercentWarningResponse").pyclass

ISystemProperties_getFreeDiskSpaceErrorRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getFreeDiskSpaceError").pyclass

ISystemProperties_getFreeDiskSpaceErrorResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getFreeDiskSpaceErrorResponse").pyclass

ISystemProperties_setFreeDiskSpaceErrorRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setFreeDiskSpaceError").pyclass

ISystemProperties_setFreeDiskSpaceErrorResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setFreeDiskSpaceErrorResponse").pyclass

ISystemProperties_getFreeDiskSpacePercentErrorRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getFreeDiskSpacePercentError").pyclass

ISystemProperties_getFreeDiskSpacePercentErrorResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getFreeDiskSpacePercentErrorResponse").pyclass

ISystemProperties_setFreeDiskSpacePercentErrorRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setFreeDiskSpacePercentError").pyclass

ISystemProperties_setFreeDiskSpacePercentErrorResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setFreeDiskSpacePercentErrorResponse").pyclass

ISystemProperties_getVRDEAuthLibraryRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getVRDEAuthLibrary").pyclass

ISystemProperties_getVRDEAuthLibraryResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getVRDEAuthLibraryResponse").pyclass

ISystemProperties_setVRDEAuthLibraryRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setVRDEAuthLibrary").pyclass

ISystemProperties_setVRDEAuthLibraryResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setVRDEAuthLibraryResponse").pyclass

ISystemProperties_getWebServiceAuthLibraryRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getWebServiceAuthLibrary").pyclass

ISystemProperties_getWebServiceAuthLibraryResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getWebServiceAuthLibraryResponse").pyclass

ISystemProperties_setWebServiceAuthLibraryRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setWebServiceAuthLibrary").pyclass

ISystemProperties_setWebServiceAuthLibraryResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setWebServiceAuthLibraryResponse").pyclass

ISystemProperties_getDefaultVRDEExtPackRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getDefaultVRDEExtPack").pyclass

ISystemProperties_getDefaultVRDEExtPackResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getDefaultVRDEExtPackResponse").pyclass

ISystemProperties_setDefaultVRDEExtPackRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setDefaultVRDEExtPack").pyclass

ISystemProperties_setDefaultVRDEExtPackResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setDefaultVRDEExtPackResponse").pyclass

ISystemProperties_getLogHistoryCountRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getLogHistoryCount").pyclass

ISystemProperties_getLogHistoryCountResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getLogHistoryCountResponse").pyclass

ISystemProperties_setLogHistoryCountRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setLogHistoryCount").pyclass

ISystemProperties_setLogHistoryCountResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_setLogHistoryCountResponse").pyclass

ISystemProperties_getDefaultAudioDriverRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getDefaultAudioDriver").pyclass

ISystemProperties_getDefaultAudioDriverResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getDefaultAudioDriverResponse").pyclass

ISystemProperties_getMaxNetworkAdaptersRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxNetworkAdapters").pyclass

ISystemProperties_getMaxNetworkAdaptersResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxNetworkAdaptersResponse").pyclass

ISystemProperties_getMaxNetworkAdaptersOfTypeRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxNetworkAdaptersOfType").pyclass

ISystemProperties_getMaxNetworkAdaptersOfTypeResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxNetworkAdaptersOfTypeResponse").pyclass

ISystemProperties_getMaxDevicesPerPortForStorageBusRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxDevicesPerPortForStorageBus").pyclass

ISystemProperties_getMaxDevicesPerPortForStorageBusResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxDevicesPerPortForStorageBusResponse").pyclass

ISystemProperties_getMinPortCountForStorageBusRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMinPortCountForStorageBus").pyclass

ISystemProperties_getMinPortCountForStorageBusResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMinPortCountForStorageBusResponse").pyclass

ISystemProperties_getMaxPortCountForStorageBusRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxPortCountForStorageBus").pyclass

ISystemProperties_getMaxPortCountForStorageBusResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxPortCountForStorageBusResponse").pyclass

ISystemProperties_getMaxInstancesOfStorageBusRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxInstancesOfStorageBus").pyclass

ISystemProperties_getMaxInstancesOfStorageBusResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getMaxInstancesOfStorageBusResponse").pyclass

ISystemProperties_getDeviceTypesForStorageBusRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getDeviceTypesForStorageBus").pyclass

ISystemProperties_getDeviceTypesForStorageBusResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getDeviceTypesForStorageBusResponse").pyclass

ISystemProperties_getDefaultIoCacheSettingForStorageControllerRequestMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getDefaultIoCacheSettingForStorageController").pyclass

ISystemProperties_getDefaultIoCacheSettingForStorageControllerResultMsg = GED("http://www.virtualbox.org/", "ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse").pyclass

IGuest_getOSTypeIdRequestMsg = GED("http://www.virtualbox.org/", "IGuest_getOSTypeId").pyclass

IGuest_getOSTypeIdResultMsg = GED("http://www.virtualbox.org/", "IGuest_getOSTypeIdResponse").pyclass

IGuest_getAdditionsRunLevelRequestMsg = GED("http://www.virtualbox.org/", "IGuest_getAdditionsRunLevel").pyclass

IGuest_getAdditionsRunLevelResultMsg = GED("http://www.virtualbox.org/", "IGuest_getAdditionsRunLevelResponse").pyclass

IGuest_getAdditionsVersionRequestMsg = GED("http://www.virtualbox.org/", "IGuest_getAdditionsVersion").pyclass

IGuest_getAdditionsVersionResultMsg = GED("http://www.virtualbox.org/", "IGuest_getAdditionsVersionResponse").pyclass

IGuest_getFacilitiesRequestMsg = GED("http://www.virtualbox.org/", "IGuest_getFacilities").pyclass

IGuest_getFacilitiesResultMsg = GED("http://www.virtualbox.org/", "IGuest_getFacilitiesResponse").pyclass

IGuest_getMemoryBalloonSizeRequestMsg = GED("http://www.virtualbox.org/", "IGuest_getMemoryBalloonSize").pyclass

IGuest_getMemoryBalloonSizeResultMsg = GED("http://www.virtualbox.org/", "IGuest_getMemoryBalloonSizeResponse").pyclass

IGuest_setMemoryBalloonSizeRequestMsg = GED("http://www.virtualbox.org/", "IGuest_setMemoryBalloonSize").pyclass

IGuest_setMemoryBalloonSizeResultMsg = GED("http://www.virtualbox.org/", "IGuest_setMemoryBalloonSizeResponse").pyclass

IGuest_getStatisticsUpdateIntervalRequestMsg = GED("http://www.virtualbox.org/", "IGuest_getStatisticsUpdateInterval").pyclass

IGuest_getStatisticsUpdateIntervalResultMsg = GED("http://www.virtualbox.org/", "IGuest_getStatisticsUpdateIntervalResponse").pyclass

IGuest_setStatisticsUpdateIntervalRequestMsg = GED("http://www.virtualbox.org/", "IGuest_setStatisticsUpdateInterval").pyclass

IGuest_setStatisticsUpdateIntervalResultMsg = GED("http://www.virtualbox.org/", "IGuest_setStatisticsUpdateIntervalResponse").pyclass

IGuest_internalGetStatisticsRequestMsg = GED("http://www.virtualbox.org/", "IGuest_internalGetStatistics").pyclass

IGuest_internalGetStatisticsResultMsg = GED("http://www.virtualbox.org/", "IGuest_internalGetStatisticsResponse").pyclass

IGuest_getFacilityStatusRequestMsg = GED("http://www.virtualbox.org/", "IGuest_getFacilityStatus").pyclass

IGuest_getFacilityStatusResultMsg = GED("http://www.virtualbox.org/", "IGuest_getFacilityStatusResponse").pyclass

IGuest_getAdditionsStatusRequestMsg = GED("http://www.virtualbox.org/", "IGuest_getAdditionsStatus").pyclass

IGuest_getAdditionsStatusResultMsg = GED("http://www.virtualbox.org/", "IGuest_getAdditionsStatusResponse").pyclass

IGuest_setCredentialsRequestMsg = GED("http://www.virtualbox.org/", "IGuest_setCredentials").pyclass

IGuest_setCredentialsResultMsg = GED("http://www.virtualbox.org/", "IGuest_setCredentialsResponse").pyclass

IGuest_executeProcessRequestMsg = GED("http://www.virtualbox.org/", "IGuest_executeProcess").pyclass

IGuest_executeProcessResultMsg = GED("http://www.virtualbox.org/", "IGuest_executeProcessResponse").pyclass

IGuest_getProcessOutputRequestMsg = GED("http://www.virtualbox.org/", "IGuest_getProcessOutput").pyclass

IGuest_getProcessOutputResultMsg = GED("http://www.virtualbox.org/", "IGuest_getProcessOutputResponse").pyclass

IGuest_getProcessStatusRequestMsg = GED("http://www.virtualbox.org/", "IGuest_getProcessStatus").pyclass

IGuest_getProcessStatusResultMsg = GED("http://www.virtualbox.org/", "IGuest_getProcessStatusResponse").pyclass

IGuest_copyFromGuestRequestMsg = GED("http://www.virtualbox.org/", "IGuest_copyFromGuest").pyclass

IGuest_copyFromGuestResultMsg = GED("http://www.virtualbox.org/", "IGuest_copyFromGuestResponse").pyclass

IGuest_copyToGuestRequestMsg = GED("http://www.virtualbox.org/", "IGuest_copyToGuest").pyclass

IGuest_copyToGuestResultMsg = GED("http://www.virtualbox.org/", "IGuest_copyToGuestResponse").pyclass

IGuest_directoryCloseRequestMsg = GED("http://www.virtualbox.org/", "IGuest_directoryClose").pyclass

IGuest_directoryCloseResultMsg = GED("http://www.virtualbox.org/", "IGuest_directoryCloseResponse").pyclass

IGuest_directoryCreateRequestMsg = GED("http://www.virtualbox.org/", "IGuest_directoryCreate").pyclass

IGuest_directoryCreateResultMsg = GED("http://www.virtualbox.org/", "IGuest_directoryCreateResponse").pyclass

IGuest_directoryOpenRequestMsg = GED("http://www.virtualbox.org/", "IGuest_directoryOpen").pyclass

IGuest_directoryOpenResultMsg = GED("http://www.virtualbox.org/", "IGuest_directoryOpenResponse").pyclass

IGuest_directoryReadRequestMsg = GED("http://www.virtualbox.org/", "IGuest_directoryRead").pyclass

IGuest_directoryReadResultMsg = GED("http://www.virtualbox.org/", "IGuest_directoryReadResponse").pyclass

IGuest_fileExistsRequestMsg = GED("http://www.virtualbox.org/", "IGuest_fileExists").pyclass

IGuest_fileExistsResultMsg = GED("http://www.virtualbox.org/", "IGuest_fileExistsResponse").pyclass

IGuest_fileQuerySizeRequestMsg = GED("http://www.virtualbox.org/", "IGuest_fileQuerySize").pyclass

IGuest_fileQuerySizeResultMsg = GED("http://www.virtualbox.org/", "IGuest_fileQuerySizeResponse").pyclass

IGuest_setProcessInputRequestMsg = GED("http://www.virtualbox.org/", "IGuest_setProcessInput").pyclass

IGuest_setProcessInputResultMsg = GED("http://www.virtualbox.org/", "IGuest_setProcessInputResponse").pyclass

IGuest_updateGuestAdditionsRequestMsg = GED("http://www.virtualbox.org/", "IGuest_updateGuestAdditions").pyclass

IGuest_updateGuestAdditionsResultMsg = GED("http://www.virtualbox.org/", "IGuest_updateGuestAdditionsResponse").pyclass

IProgress_getIdRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getId").pyclass

IProgress_getIdResultMsg = GED("http://www.virtualbox.org/", "IProgress_getIdResponse").pyclass

IProgress_getDescriptionRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getDescription").pyclass

IProgress_getDescriptionResultMsg = GED("http://www.virtualbox.org/", "IProgress_getDescriptionResponse").pyclass

IProgress_getInitiatorRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getInitiator").pyclass

IProgress_getInitiatorResultMsg = GED("http://www.virtualbox.org/", "IProgress_getInitiatorResponse").pyclass

IProgress_getCancelableRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getCancelable").pyclass

IProgress_getCancelableResultMsg = GED("http://www.virtualbox.org/", "IProgress_getCancelableResponse").pyclass

IProgress_getPercentRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getPercent").pyclass

IProgress_getPercentResultMsg = GED("http://www.virtualbox.org/", "IProgress_getPercentResponse").pyclass

IProgress_getTimeRemainingRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getTimeRemaining").pyclass

IProgress_getTimeRemainingResultMsg = GED("http://www.virtualbox.org/", "IProgress_getTimeRemainingResponse").pyclass

IProgress_getCompletedRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getCompleted").pyclass

IProgress_getCompletedResultMsg = GED("http://www.virtualbox.org/", "IProgress_getCompletedResponse").pyclass

IProgress_getCanceledRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getCanceled").pyclass

IProgress_getCanceledResultMsg = GED("http://www.virtualbox.org/", "IProgress_getCanceledResponse").pyclass

IProgress_getResultCodeRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getResultCode").pyclass

IProgress_getResultCodeResultMsg = GED("http://www.virtualbox.org/", "IProgress_getResultCodeResponse").pyclass

IProgress_getErrorInfoRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getErrorInfo").pyclass

IProgress_getErrorInfoResultMsg = GED("http://www.virtualbox.org/", "IProgress_getErrorInfoResponse").pyclass

IProgress_getOperationCountRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getOperationCount").pyclass

IProgress_getOperationCountResultMsg = GED("http://www.virtualbox.org/", "IProgress_getOperationCountResponse").pyclass

IProgress_getOperationRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getOperation").pyclass

IProgress_getOperationResultMsg = GED("http://www.virtualbox.org/", "IProgress_getOperationResponse").pyclass

IProgress_getOperationDescriptionRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getOperationDescription").pyclass

IProgress_getOperationDescriptionResultMsg = GED("http://www.virtualbox.org/", "IProgress_getOperationDescriptionResponse").pyclass

IProgress_getOperationPercentRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getOperationPercent").pyclass

IProgress_getOperationPercentResultMsg = GED("http://www.virtualbox.org/", "IProgress_getOperationPercentResponse").pyclass

IProgress_getOperationWeightRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getOperationWeight").pyclass

IProgress_getOperationWeightResultMsg = GED("http://www.virtualbox.org/", "IProgress_getOperationWeightResponse").pyclass

IProgress_getTimeoutRequestMsg = GED("http://www.virtualbox.org/", "IProgress_getTimeout").pyclass

IProgress_getTimeoutResultMsg = GED("http://www.virtualbox.org/", "IProgress_getTimeoutResponse").pyclass

IProgress_setTimeoutRequestMsg = GED("http://www.virtualbox.org/", "IProgress_setTimeout").pyclass

IProgress_setTimeoutResultMsg = GED("http://www.virtualbox.org/", "IProgress_setTimeoutResponse").pyclass

IProgress_setCurrentOperationProgressRequestMsg = GED("http://www.virtualbox.org/", "IProgress_setCurrentOperationProgress").pyclass

IProgress_setCurrentOperationProgressResultMsg = GED("http://www.virtualbox.org/", "IProgress_setCurrentOperationProgressResponse").pyclass

IProgress_setNextOperationRequestMsg = GED("http://www.virtualbox.org/", "IProgress_setNextOperation").pyclass

IProgress_setNextOperationResultMsg = GED("http://www.virtualbox.org/", "IProgress_setNextOperationResponse").pyclass

IProgress_waitForCompletionRequestMsg = GED("http://www.virtualbox.org/", "IProgress_waitForCompletion").pyclass

IProgress_waitForCompletionResultMsg = GED("http://www.virtualbox.org/", "IProgress_waitForCompletionResponse").pyclass

IProgress_waitForOperationCompletionRequestMsg = GED("http://www.virtualbox.org/", "IProgress_waitForOperationCompletion").pyclass

IProgress_waitForOperationCompletionResultMsg = GED("http://www.virtualbox.org/", "IProgress_waitForOperationCompletionResponse").pyclass

IProgress_waitForAsyncProgressCompletionRequestMsg = GED("http://www.virtualbox.org/", "IProgress_waitForAsyncProgressCompletion").pyclass

IProgress_waitForAsyncProgressCompletionResultMsg = GED("http://www.virtualbox.org/", "IProgress_waitForAsyncProgressCompletionResponse").pyclass

IProgress_cancelRequestMsg = GED("http://www.virtualbox.org/", "IProgress_cancel").pyclass

IProgress_cancelResultMsg = GED("http://www.virtualbox.org/", "IProgress_cancelResponse").pyclass

ISnapshot_getIdRequestMsg = GED("http://www.virtualbox.org/", "ISnapshot_getId").pyclass

ISnapshot_getIdResultMsg = GED("http://www.virtualbox.org/", "ISnapshot_getIdResponse").pyclass

ISnapshot_getNameRequestMsg = GED("http://www.virtualbox.org/", "ISnapshot_getName").pyclass

ISnapshot_getNameResultMsg = GED("http://www.virtualbox.org/", "ISnapshot_getNameResponse").pyclass

ISnapshot_setNameRequestMsg = GED("http://www.virtualbox.org/", "ISnapshot_setName").pyclass

ISnapshot_setNameResultMsg = GED("http://www.virtualbox.org/", "ISnapshot_setNameResponse").pyclass

ISnapshot_getDescriptionRequestMsg = GED("http://www.virtualbox.org/", "ISnapshot_getDescription").pyclass

ISnapshot_getDescriptionResultMsg = GED("http://www.virtualbox.org/", "ISnapshot_getDescriptionResponse").pyclass

ISnapshot_setDescriptionRequestMsg = GED("http://www.virtualbox.org/", "ISnapshot_setDescription").pyclass

ISnapshot_setDescriptionResultMsg = GED("http://www.virtualbox.org/", "ISnapshot_setDescriptionResponse").pyclass

ISnapshot_getTimeStampRequestMsg = GED("http://www.virtualbox.org/", "ISnapshot_getTimeStamp").pyclass

ISnapshot_getTimeStampResultMsg = GED("http://www.virtualbox.org/", "ISnapshot_getTimeStampResponse").pyclass

ISnapshot_getOnlineRequestMsg = GED("http://www.virtualbox.org/", "ISnapshot_getOnline").pyclass

ISnapshot_getOnlineResultMsg = GED("http://www.virtualbox.org/", "ISnapshot_getOnlineResponse").pyclass

ISnapshot_getMachineRequestMsg = GED("http://www.virtualbox.org/", "ISnapshot_getMachine").pyclass

ISnapshot_getMachineResultMsg = GED("http://www.virtualbox.org/", "ISnapshot_getMachineResponse").pyclass

ISnapshot_getParentRequestMsg = GED("http://www.virtualbox.org/", "ISnapshot_getParent").pyclass

ISnapshot_getParentResultMsg = GED("http://www.virtualbox.org/", "ISnapshot_getParentResponse").pyclass

ISnapshot_getChildrenRequestMsg = GED("http://www.virtualbox.org/", "ISnapshot_getChildren").pyclass

ISnapshot_getChildrenResultMsg = GED("http://www.virtualbox.org/", "ISnapshot_getChildrenResponse").pyclass

ISnapshot_getChildrenCountRequestMsg = GED("http://www.virtualbox.org/", "ISnapshot_getChildrenCount").pyclass

ISnapshot_getChildrenCountResultMsg = GED("http://www.virtualbox.org/", "ISnapshot_getChildrenCountResponse").pyclass

IMedium_getIdRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getId").pyclass

IMedium_getIdResultMsg = GED("http://www.virtualbox.org/", "IMedium_getIdResponse").pyclass

IMedium_getDescriptionRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getDescription").pyclass

IMedium_getDescriptionResultMsg = GED("http://www.virtualbox.org/", "IMedium_getDescriptionResponse").pyclass

IMedium_setDescriptionRequestMsg = GED("http://www.virtualbox.org/", "IMedium_setDescription").pyclass

IMedium_setDescriptionResultMsg = GED("http://www.virtualbox.org/", "IMedium_setDescriptionResponse").pyclass

IMedium_getStateRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getState").pyclass

IMedium_getStateResultMsg = GED("http://www.virtualbox.org/", "IMedium_getStateResponse").pyclass

IMedium_getVariantRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getVariant").pyclass

IMedium_getVariantResultMsg = GED("http://www.virtualbox.org/", "IMedium_getVariantResponse").pyclass

IMedium_getLocationRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getLocation").pyclass

IMedium_getLocationResultMsg = GED("http://www.virtualbox.org/", "IMedium_getLocationResponse").pyclass

IMedium_setLocationRequestMsg = GED("http://www.virtualbox.org/", "IMedium_setLocation").pyclass

IMedium_setLocationResultMsg = GED("http://www.virtualbox.org/", "IMedium_setLocationResponse").pyclass

IMedium_getNameRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getName").pyclass

IMedium_getNameResultMsg = GED("http://www.virtualbox.org/", "IMedium_getNameResponse").pyclass

IMedium_getDeviceTypeRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getDeviceType").pyclass

IMedium_getDeviceTypeResultMsg = GED("http://www.virtualbox.org/", "IMedium_getDeviceTypeResponse").pyclass

IMedium_getHostDriveRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getHostDrive").pyclass

IMedium_getHostDriveResultMsg = GED("http://www.virtualbox.org/", "IMedium_getHostDriveResponse").pyclass

IMedium_getSizeRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getSize").pyclass

IMedium_getSizeResultMsg = GED("http://www.virtualbox.org/", "IMedium_getSizeResponse").pyclass

IMedium_getFormatRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getFormat").pyclass

IMedium_getFormatResultMsg = GED("http://www.virtualbox.org/", "IMedium_getFormatResponse").pyclass

IMedium_getMediumFormatRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getMediumFormat").pyclass

IMedium_getMediumFormatResultMsg = GED("http://www.virtualbox.org/", "IMedium_getMediumFormatResponse").pyclass

IMedium_getTypeRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getType").pyclass

IMedium_getTypeResultMsg = GED("http://www.virtualbox.org/", "IMedium_getTypeResponse").pyclass

IMedium_setTypeRequestMsg = GED("http://www.virtualbox.org/", "IMedium_setType").pyclass

IMedium_setTypeResultMsg = GED("http://www.virtualbox.org/", "IMedium_setTypeResponse").pyclass

IMedium_getAllowedTypesRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getAllowedTypes").pyclass

IMedium_getAllowedTypesResultMsg = GED("http://www.virtualbox.org/", "IMedium_getAllowedTypesResponse").pyclass

IMedium_getParentRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getParent").pyclass

IMedium_getParentResultMsg = GED("http://www.virtualbox.org/", "IMedium_getParentResponse").pyclass

IMedium_getChildrenRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getChildren").pyclass

IMedium_getChildrenResultMsg = GED("http://www.virtualbox.org/", "IMedium_getChildrenResponse").pyclass

IMedium_getBaseRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getBase").pyclass

IMedium_getBaseResultMsg = GED("http://www.virtualbox.org/", "IMedium_getBaseResponse").pyclass

IMedium_getReadOnlyRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getReadOnly").pyclass

IMedium_getReadOnlyResultMsg = GED("http://www.virtualbox.org/", "IMedium_getReadOnlyResponse").pyclass

IMedium_getLogicalSizeRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getLogicalSize").pyclass

IMedium_getLogicalSizeResultMsg = GED("http://www.virtualbox.org/", "IMedium_getLogicalSizeResponse").pyclass

IMedium_getAutoResetRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getAutoReset").pyclass

IMedium_getAutoResetResultMsg = GED("http://www.virtualbox.org/", "IMedium_getAutoResetResponse").pyclass

IMedium_setAutoResetRequestMsg = GED("http://www.virtualbox.org/", "IMedium_setAutoReset").pyclass

IMedium_setAutoResetResultMsg = GED("http://www.virtualbox.org/", "IMedium_setAutoResetResponse").pyclass

IMedium_getLastAccessErrorRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getLastAccessError").pyclass

IMedium_getLastAccessErrorResultMsg = GED("http://www.virtualbox.org/", "IMedium_getLastAccessErrorResponse").pyclass

IMedium_getMachineIdsRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getMachineIds").pyclass

IMedium_getMachineIdsResultMsg = GED("http://www.virtualbox.org/", "IMedium_getMachineIdsResponse").pyclass

IMedium_setIDsRequestMsg = GED("http://www.virtualbox.org/", "IMedium_setIDs").pyclass

IMedium_setIDsResultMsg = GED("http://www.virtualbox.org/", "IMedium_setIDsResponse").pyclass

IMedium_refreshStateRequestMsg = GED("http://www.virtualbox.org/", "IMedium_refreshState").pyclass

IMedium_refreshStateResultMsg = GED("http://www.virtualbox.org/", "IMedium_refreshStateResponse").pyclass

IMedium_getSnapshotIdsRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getSnapshotIds").pyclass

IMedium_getSnapshotIdsResultMsg = GED("http://www.virtualbox.org/", "IMedium_getSnapshotIdsResponse").pyclass

IMedium_lockReadRequestMsg = GED("http://www.virtualbox.org/", "IMedium_lockRead").pyclass

IMedium_lockReadResultMsg = GED("http://www.virtualbox.org/", "IMedium_lockReadResponse").pyclass

IMedium_unlockReadRequestMsg = GED("http://www.virtualbox.org/", "IMedium_unlockRead").pyclass

IMedium_unlockReadResultMsg = GED("http://www.virtualbox.org/", "IMedium_unlockReadResponse").pyclass

IMedium_lockWriteRequestMsg = GED("http://www.virtualbox.org/", "IMedium_lockWrite").pyclass

IMedium_lockWriteResultMsg = GED("http://www.virtualbox.org/", "IMedium_lockWriteResponse").pyclass

IMedium_unlockWriteRequestMsg = GED("http://www.virtualbox.org/", "IMedium_unlockWrite").pyclass

IMedium_unlockWriteResultMsg = GED("http://www.virtualbox.org/", "IMedium_unlockWriteResponse").pyclass

IMedium_closeRequestMsg = GED("http://www.virtualbox.org/", "IMedium_close").pyclass

IMedium_closeResultMsg = GED("http://www.virtualbox.org/", "IMedium_closeResponse").pyclass

IMedium_getPropertyRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getProperty").pyclass

IMedium_getPropertyResultMsg = GED("http://www.virtualbox.org/", "IMedium_getPropertyResponse").pyclass

IMedium_setPropertyRequestMsg = GED("http://www.virtualbox.org/", "IMedium_setProperty").pyclass

IMedium_setPropertyResultMsg = GED("http://www.virtualbox.org/", "IMedium_setPropertyResponse").pyclass

IMedium_getPropertiesRequestMsg = GED("http://www.virtualbox.org/", "IMedium_getProperties").pyclass

IMedium_getPropertiesResultMsg = GED("http://www.virtualbox.org/", "IMedium_getPropertiesResponse").pyclass

IMedium_setPropertiesRequestMsg = GED("http://www.virtualbox.org/", "IMedium_setProperties").pyclass

IMedium_setPropertiesResultMsg = GED("http://www.virtualbox.org/", "IMedium_setPropertiesResponse").pyclass

IMedium_createBaseStorageRequestMsg = GED("http://www.virtualbox.org/", "IMedium_createBaseStorage").pyclass

IMedium_createBaseStorageResultMsg = GED("http://www.virtualbox.org/", "IMedium_createBaseStorageResponse").pyclass

IMedium_deleteStorageRequestMsg = GED("http://www.virtualbox.org/", "IMedium_deleteStorage").pyclass

IMedium_deleteStorageResultMsg = GED("http://www.virtualbox.org/", "IMedium_deleteStorageResponse").pyclass

IMedium_createDiffStorageRequestMsg = GED("http://www.virtualbox.org/", "IMedium_createDiffStorage").pyclass

IMedium_createDiffStorageResultMsg = GED("http://www.virtualbox.org/", "IMedium_createDiffStorageResponse").pyclass

IMedium_mergeToRequestMsg = GED("http://www.virtualbox.org/", "IMedium_mergeTo").pyclass

IMedium_mergeToResultMsg = GED("http://www.virtualbox.org/", "IMedium_mergeToResponse").pyclass

IMedium_cloneToRequestMsg = GED("http://www.virtualbox.org/", "IMedium_cloneTo").pyclass

IMedium_cloneToResultMsg = GED("http://www.virtualbox.org/", "IMedium_cloneToResponse").pyclass

IMedium_compactRequestMsg = GED("http://www.virtualbox.org/", "IMedium_compact").pyclass

IMedium_compactResultMsg = GED("http://www.virtualbox.org/", "IMedium_compactResponse").pyclass

IMedium_resizeRequestMsg = GED("http://www.virtualbox.org/", "IMedium_resize").pyclass

IMedium_resizeResultMsg = GED("http://www.virtualbox.org/", "IMedium_resizeResponse").pyclass

IMedium_resetRequestMsg = GED("http://www.virtualbox.org/", "IMedium_reset").pyclass

IMedium_resetResultMsg = GED("http://www.virtualbox.org/", "IMedium_resetResponse").pyclass

IMediumFormat_getIdRequestMsg = GED("http://www.virtualbox.org/", "IMediumFormat_getId").pyclass

IMediumFormat_getIdResultMsg = GED("http://www.virtualbox.org/", "IMediumFormat_getIdResponse").pyclass

IMediumFormat_getNameRequestMsg = GED("http://www.virtualbox.org/", "IMediumFormat_getName").pyclass

IMediumFormat_getNameResultMsg = GED("http://www.virtualbox.org/", "IMediumFormat_getNameResponse").pyclass

IMediumFormat_getCapabilitiesRequestMsg = GED("http://www.virtualbox.org/", "IMediumFormat_getCapabilities").pyclass

IMediumFormat_getCapabilitiesResultMsg = GED("http://www.virtualbox.org/", "IMediumFormat_getCapabilitiesResponse").pyclass

IMediumFormat_describeFileExtensionsRequestMsg = GED("http://www.virtualbox.org/", "IMediumFormat_describeFileExtensions").pyclass

IMediumFormat_describeFileExtensionsResultMsg = GED("http://www.virtualbox.org/", "IMediumFormat_describeFileExtensionsResponse").pyclass

IMediumFormat_describePropertiesRequestMsg = GED("http://www.virtualbox.org/", "IMediumFormat_describeProperties").pyclass

IMediumFormat_describePropertiesResultMsg = GED("http://www.virtualbox.org/", "IMediumFormat_describePropertiesResponse").pyclass

IKeyboard_getEventSourceRequestMsg = GED("http://www.virtualbox.org/", "IKeyboard_getEventSource").pyclass

IKeyboard_getEventSourceResultMsg = GED("http://www.virtualbox.org/", "IKeyboard_getEventSourceResponse").pyclass

IKeyboard_putScancodeRequestMsg = GED("http://www.virtualbox.org/", "IKeyboard_putScancode").pyclass

IKeyboard_putScancodeResultMsg = GED("http://www.virtualbox.org/", "IKeyboard_putScancodeResponse").pyclass

IKeyboard_putScancodesRequestMsg = GED("http://www.virtualbox.org/", "IKeyboard_putScancodes").pyclass

IKeyboard_putScancodesResultMsg = GED("http://www.virtualbox.org/", "IKeyboard_putScancodesResponse").pyclass

IKeyboard_putCADRequestMsg = GED("http://www.virtualbox.org/", "IKeyboard_putCAD").pyclass

IKeyboard_putCADResultMsg = GED("http://www.virtualbox.org/", "IKeyboard_putCADResponse").pyclass

IMouse_getAbsoluteSupportedRequestMsg = GED("http://www.virtualbox.org/", "IMouse_getAbsoluteSupported").pyclass

IMouse_getAbsoluteSupportedResultMsg = GED("http://www.virtualbox.org/", "IMouse_getAbsoluteSupportedResponse").pyclass

IMouse_getRelativeSupportedRequestMsg = GED("http://www.virtualbox.org/", "IMouse_getRelativeSupported").pyclass

IMouse_getRelativeSupportedResultMsg = GED("http://www.virtualbox.org/", "IMouse_getRelativeSupportedResponse").pyclass

IMouse_getNeedsHostCursorRequestMsg = GED("http://www.virtualbox.org/", "IMouse_getNeedsHostCursor").pyclass

IMouse_getNeedsHostCursorResultMsg = GED("http://www.virtualbox.org/", "IMouse_getNeedsHostCursorResponse").pyclass

IMouse_getEventSourceRequestMsg = GED("http://www.virtualbox.org/", "IMouse_getEventSource").pyclass

IMouse_getEventSourceResultMsg = GED("http://www.virtualbox.org/", "IMouse_getEventSourceResponse").pyclass

IMouse_putMouseEventRequestMsg = GED("http://www.virtualbox.org/", "IMouse_putMouseEvent").pyclass

IMouse_putMouseEventResultMsg = GED("http://www.virtualbox.org/", "IMouse_putMouseEventResponse").pyclass

IMouse_putMouseEventAbsoluteRequestMsg = GED("http://www.virtualbox.org/", "IMouse_putMouseEventAbsolute").pyclass

IMouse_putMouseEventAbsoluteResultMsg = GED("http://www.virtualbox.org/", "IMouse_putMouseEventAbsoluteResponse").pyclass

IDisplay_getScreenResolutionRequestMsg = GED("http://www.virtualbox.org/", "IDisplay_getScreenResolution").pyclass

IDisplay_getScreenResolutionResultMsg = GED("http://www.virtualbox.org/", "IDisplay_getScreenResolutionResponse").pyclass

IDisplay_setVideoModeHintRequestMsg = GED("http://www.virtualbox.org/", "IDisplay_setVideoModeHint").pyclass

IDisplay_setVideoModeHintResultMsg = GED("http://www.virtualbox.org/", "IDisplay_setVideoModeHintResponse").pyclass

IDisplay_setSeamlessModeRequestMsg = GED("http://www.virtualbox.org/", "IDisplay_setSeamlessMode").pyclass

IDisplay_setSeamlessModeResultMsg = GED("http://www.virtualbox.org/", "IDisplay_setSeamlessModeResponse").pyclass

IDisplay_takeScreenShotToArrayRequestMsg = GED("http://www.virtualbox.org/", "IDisplay_takeScreenShotToArray").pyclass

IDisplay_takeScreenShotToArrayResultMsg = GED("http://www.virtualbox.org/", "IDisplay_takeScreenShotToArrayResponse").pyclass

IDisplay_takeScreenShotPNGToArrayRequestMsg = GED("http://www.virtualbox.org/", "IDisplay_takeScreenShotPNGToArray").pyclass

IDisplay_takeScreenShotPNGToArrayResultMsg = GED("http://www.virtualbox.org/", "IDisplay_takeScreenShotPNGToArrayResponse").pyclass

IDisplay_invalidateAndUpdateRequestMsg = GED("http://www.virtualbox.org/", "IDisplay_invalidateAndUpdate").pyclass

IDisplay_invalidateAndUpdateResultMsg = GED("http://www.virtualbox.org/", "IDisplay_invalidateAndUpdateResponse").pyclass

IDisplay_resizeCompletedRequestMsg = GED("http://www.virtualbox.org/", "IDisplay_resizeCompleted").pyclass

IDisplay_resizeCompletedResultMsg = GED("http://www.virtualbox.org/", "IDisplay_resizeCompletedResponse").pyclass

INetworkAdapter_getAdapterTypeRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getAdapterType").pyclass

INetworkAdapter_getAdapterTypeResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getAdapterTypeResponse").pyclass

INetworkAdapter_setAdapterTypeRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setAdapterType").pyclass

INetworkAdapter_setAdapterTypeResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setAdapterTypeResponse").pyclass

INetworkAdapter_getSlotRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getSlot").pyclass

INetworkAdapter_getSlotResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getSlotResponse").pyclass

INetworkAdapter_getEnabledRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getEnabled").pyclass

INetworkAdapter_getEnabledResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getEnabledResponse").pyclass

INetworkAdapter_setEnabledRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setEnabled").pyclass

INetworkAdapter_setEnabledResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setEnabledResponse").pyclass

INetworkAdapter_getMACAddressRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getMACAddress").pyclass

INetworkAdapter_getMACAddressResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getMACAddressResponse").pyclass

INetworkAdapter_setMACAddressRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setMACAddress").pyclass

INetworkAdapter_setMACAddressResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setMACAddressResponse").pyclass

INetworkAdapter_getAttachmentTypeRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getAttachmentType").pyclass

INetworkAdapter_getAttachmentTypeResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getAttachmentTypeResponse").pyclass

INetworkAdapter_setAttachmentTypeRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setAttachmentType").pyclass

INetworkAdapter_setAttachmentTypeResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setAttachmentTypeResponse").pyclass

INetworkAdapter_getBridgedInterfaceRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getBridgedInterface").pyclass

INetworkAdapter_getBridgedInterfaceResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getBridgedInterfaceResponse").pyclass

INetworkAdapter_setBridgedInterfaceRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setBridgedInterface").pyclass

INetworkAdapter_setBridgedInterfaceResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setBridgedInterfaceResponse").pyclass

INetworkAdapter_getHostOnlyInterfaceRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getHostOnlyInterface").pyclass

INetworkAdapter_getHostOnlyInterfaceResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getHostOnlyInterfaceResponse").pyclass

INetworkAdapter_setHostOnlyInterfaceRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setHostOnlyInterface").pyclass

INetworkAdapter_setHostOnlyInterfaceResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setHostOnlyInterfaceResponse").pyclass

INetworkAdapter_getInternalNetworkRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getInternalNetwork").pyclass

INetworkAdapter_getInternalNetworkResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getInternalNetworkResponse").pyclass

INetworkAdapter_setInternalNetworkRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setInternalNetwork").pyclass

INetworkAdapter_setInternalNetworkResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setInternalNetworkResponse").pyclass

INetworkAdapter_getNATNetworkRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getNATNetwork").pyclass

INetworkAdapter_getNATNetworkResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getNATNetworkResponse").pyclass

INetworkAdapter_setNATNetworkRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setNATNetwork").pyclass

INetworkAdapter_setNATNetworkResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setNATNetworkResponse").pyclass

INetworkAdapter_getGenericDriverRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getGenericDriver").pyclass

INetworkAdapter_getGenericDriverResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getGenericDriverResponse").pyclass

INetworkAdapter_setGenericDriverRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setGenericDriver").pyclass

INetworkAdapter_setGenericDriverResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setGenericDriverResponse").pyclass

INetworkAdapter_getCableConnectedRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getCableConnected").pyclass

INetworkAdapter_getCableConnectedResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getCableConnectedResponse").pyclass

INetworkAdapter_setCableConnectedRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setCableConnected").pyclass

INetworkAdapter_setCableConnectedResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setCableConnectedResponse").pyclass

INetworkAdapter_getLineSpeedRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getLineSpeed").pyclass

INetworkAdapter_getLineSpeedResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getLineSpeedResponse").pyclass

INetworkAdapter_setLineSpeedRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setLineSpeed").pyclass

INetworkAdapter_setLineSpeedResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setLineSpeedResponse").pyclass

INetworkAdapter_getPromiscModePolicyRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getPromiscModePolicy").pyclass

INetworkAdapter_getPromiscModePolicyResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getPromiscModePolicyResponse").pyclass

INetworkAdapter_setPromiscModePolicyRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setPromiscModePolicy").pyclass

INetworkAdapter_setPromiscModePolicyResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setPromiscModePolicyResponse").pyclass

INetworkAdapter_getTraceEnabledRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getTraceEnabled").pyclass

INetworkAdapter_getTraceEnabledResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getTraceEnabledResponse").pyclass

INetworkAdapter_setTraceEnabledRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setTraceEnabled").pyclass

INetworkAdapter_setTraceEnabledResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setTraceEnabledResponse").pyclass

INetworkAdapter_getTraceFileRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getTraceFile").pyclass

INetworkAdapter_getTraceFileResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getTraceFileResponse").pyclass

INetworkAdapter_setTraceFileRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setTraceFile").pyclass

INetworkAdapter_setTraceFileResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setTraceFileResponse").pyclass

INetworkAdapter_getNatDriverRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getNatDriver").pyclass

INetworkAdapter_getNatDriverResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getNatDriverResponse").pyclass

INetworkAdapter_getBootPriorityRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getBootPriority").pyclass

INetworkAdapter_getBootPriorityResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getBootPriorityResponse").pyclass

INetworkAdapter_setBootPriorityRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setBootPriority").pyclass

INetworkAdapter_setBootPriorityResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setBootPriorityResponse").pyclass

INetworkAdapter_getBandwidthGroupRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getBandwidthGroup").pyclass

INetworkAdapter_getBandwidthGroupResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getBandwidthGroupResponse").pyclass

INetworkAdapter_setBandwidthGroupRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setBandwidthGroup").pyclass

INetworkAdapter_setBandwidthGroupResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setBandwidthGroupResponse").pyclass

INetworkAdapter_getPropertyRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getProperty").pyclass

INetworkAdapter_getPropertyResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getPropertyResponse").pyclass

INetworkAdapter_setPropertyRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setProperty").pyclass

INetworkAdapter_setPropertyResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_setPropertyResponse").pyclass

INetworkAdapter_getPropertiesRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getProperties").pyclass

INetworkAdapter_getPropertiesResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapter_getPropertiesResponse").pyclass

ISerialPort_getSlotRequestMsg = GED("http://www.virtualbox.org/", "ISerialPort_getSlot").pyclass

ISerialPort_getSlotResultMsg = GED("http://www.virtualbox.org/", "ISerialPort_getSlotResponse").pyclass

ISerialPort_getEnabledRequestMsg = GED("http://www.virtualbox.org/", "ISerialPort_getEnabled").pyclass

ISerialPort_getEnabledResultMsg = GED("http://www.virtualbox.org/", "ISerialPort_getEnabledResponse").pyclass

ISerialPort_setEnabledRequestMsg = GED("http://www.virtualbox.org/", "ISerialPort_setEnabled").pyclass

ISerialPort_setEnabledResultMsg = GED("http://www.virtualbox.org/", "ISerialPort_setEnabledResponse").pyclass

ISerialPort_getIOBaseRequestMsg = GED("http://www.virtualbox.org/", "ISerialPort_getIOBase").pyclass

ISerialPort_getIOBaseResultMsg = GED("http://www.virtualbox.org/", "ISerialPort_getIOBaseResponse").pyclass

ISerialPort_setIOBaseRequestMsg = GED("http://www.virtualbox.org/", "ISerialPort_setIOBase").pyclass

ISerialPort_setIOBaseResultMsg = GED("http://www.virtualbox.org/", "ISerialPort_setIOBaseResponse").pyclass

ISerialPort_getIRQRequestMsg = GED("http://www.virtualbox.org/", "ISerialPort_getIRQ").pyclass

ISerialPort_getIRQResultMsg = GED("http://www.virtualbox.org/", "ISerialPort_getIRQResponse").pyclass

ISerialPort_setIRQRequestMsg = GED("http://www.virtualbox.org/", "ISerialPort_setIRQ").pyclass

ISerialPort_setIRQResultMsg = GED("http://www.virtualbox.org/", "ISerialPort_setIRQResponse").pyclass

ISerialPort_getHostModeRequestMsg = GED("http://www.virtualbox.org/", "ISerialPort_getHostMode").pyclass

ISerialPort_getHostModeResultMsg = GED("http://www.virtualbox.org/", "ISerialPort_getHostModeResponse").pyclass

ISerialPort_setHostModeRequestMsg = GED("http://www.virtualbox.org/", "ISerialPort_setHostMode").pyclass

ISerialPort_setHostModeResultMsg = GED("http://www.virtualbox.org/", "ISerialPort_setHostModeResponse").pyclass

ISerialPort_getServerRequestMsg = GED("http://www.virtualbox.org/", "ISerialPort_getServer").pyclass

ISerialPort_getServerResultMsg = GED("http://www.virtualbox.org/", "ISerialPort_getServerResponse").pyclass

ISerialPort_setServerRequestMsg = GED("http://www.virtualbox.org/", "ISerialPort_setServer").pyclass

ISerialPort_setServerResultMsg = GED("http://www.virtualbox.org/", "ISerialPort_setServerResponse").pyclass

ISerialPort_getPathRequestMsg = GED("http://www.virtualbox.org/", "ISerialPort_getPath").pyclass

ISerialPort_getPathResultMsg = GED("http://www.virtualbox.org/", "ISerialPort_getPathResponse").pyclass

ISerialPort_setPathRequestMsg = GED("http://www.virtualbox.org/", "ISerialPort_setPath").pyclass

ISerialPort_setPathResultMsg = GED("http://www.virtualbox.org/", "ISerialPort_setPathResponse").pyclass

IParallelPort_getSlotRequestMsg = GED("http://www.virtualbox.org/", "IParallelPort_getSlot").pyclass

IParallelPort_getSlotResultMsg = GED("http://www.virtualbox.org/", "IParallelPort_getSlotResponse").pyclass

IParallelPort_getEnabledRequestMsg = GED("http://www.virtualbox.org/", "IParallelPort_getEnabled").pyclass

IParallelPort_getEnabledResultMsg = GED("http://www.virtualbox.org/", "IParallelPort_getEnabledResponse").pyclass

IParallelPort_setEnabledRequestMsg = GED("http://www.virtualbox.org/", "IParallelPort_setEnabled").pyclass

IParallelPort_setEnabledResultMsg = GED("http://www.virtualbox.org/", "IParallelPort_setEnabledResponse").pyclass

IParallelPort_getIOBaseRequestMsg = GED("http://www.virtualbox.org/", "IParallelPort_getIOBase").pyclass

IParallelPort_getIOBaseResultMsg = GED("http://www.virtualbox.org/", "IParallelPort_getIOBaseResponse").pyclass

IParallelPort_setIOBaseRequestMsg = GED("http://www.virtualbox.org/", "IParallelPort_setIOBase").pyclass

IParallelPort_setIOBaseResultMsg = GED("http://www.virtualbox.org/", "IParallelPort_setIOBaseResponse").pyclass

IParallelPort_getIRQRequestMsg = GED("http://www.virtualbox.org/", "IParallelPort_getIRQ").pyclass

IParallelPort_getIRQResultMsg = GED("http://www.virtualbox.org/", "IParallelPort_getIRQResponse").pyclass

IParallelPort_setIRQRequestMsg = GED("http://www.virtualbox.org/", "IParallelPort_setIRQ").pyclass

IParallelPort_setIRQResultMsg = GED("http://www.virtualbox.org/", "IParallelPort_setIRQResponse").pyclass

IParallelPort_getPathRequestMsg = GED("http://www.virtualbox.org/", "IParallelPort_getPath").pyclass

IParallelPort_getPathResultMsg = GED("http://www.virtualbox.org/", "IParallelPort_getPathResponse").pyclass

IParallelPort_setPathRequestMsg = GED("http://www.virtualbox.org/", "IParallelPort_setPath").pyclass

IParallelPort_setPathResultMsg = GED("http://www.virtualbox.org/", "IParallelPort_setPathResponse").pyclass

IUSBController_getEnabledRequestMsg = GED("http://www.virtualbox.org/", "IUSBController_getEnabled").pyclass

IUSBController_getEnabledResultMsg = GED("http://www.virtualbox.org/", "IUSBController_getEnabledResponse").pyclass

IUSBController_setEnabledRequestMsg = GED("http://www.virtualbox.org/", "IUSBController_setEnabled").pyclass

IUSBController_setEnabledResultMsg = GED("http://www.virtualbox.org/", "IUSBController_setEnabledResponse").pyclass

IUSBController_getEnabledEhciRequestMsg = GED("http://www.virtualbox.org/", "IUSBController_getEnabledEhci").pyclass

IUSBController_getEnabledEhciResultMsg = GED("http://www.virtualbox.org/", "IUSBController_getEnabledEhciResponse").pyclass

IUSBController_setEnabledEhciRequestMsg = GED("http://www.virtualbox.org/", "IUSBController_setEnabledEhci").pyclass

IUSBController_setEnabledEhciResultMsg = GED("http://www.virtualbox.org/", "IUSBController_setEnabledEhciResponse").pyclass

IUSBController_getProxyAvailableRequestMsg = GED("http://www.virtualbox.org/", "IUSBController_getProxyAvailable").pyclass

IUSBController_getProxyAvailableResultMsg = GED("http://www.virtualbox.org/", "IUSBController_getProxyAvailableResponse").pyclass

IUSBController_getUSBStandardRequestMsg = GED("http://www.virtualbox.org/", "IUSBController_getUSBStandard").pyclass

IUSBController_getUSBStandardResultMsg = GED("http://www.virtualbox.org/", "IUSBController_getUSBStandardResponse").pyclass

IUSBController_getDeviceFiltersRequestMsg = GED("http://www.virtualbox.org/", "IUSBController_getDeviceFilters").pyclass

IUSBController_getDeviceFiltersResultMsg = GED("http://www.virtualbox.org/", "IUSBController_getDeviceFiltersResponse").pyclass

IUSBController_createDeviceFilterRequestMsg = GED("http://www.virtualbox.org/", "IUSBController_createDeviceFilter").pyclass

IUSBController_createDeviceFilterResultMsg = GED("http://www.virtualbox.org/", "IUSBController_createDeviceFilterResponse").pyclass

IUSBController_insertDeviceFilterRequestMsg = GED("http://www.virtualbox.org/", "IUSBController_insertDeviceFilter").pyclass

IUSBController_insertDeviceFilterResultMsg = GED("http://www.virtualbox.org/", "IUSBController_insertDeviceFilterResponse").pyclass

IUSBController_removeDeviceFilterRequestMsg = GED("http://www.virtualbox.org/", "IUSBController_removeDeviceFilter").pyclass

IUSBController_removeDeviceFilterResultMsg = GED("http://www.virtualbox.org/", "IUSBController_removeDeviceFilterResponse").pyclass

IUSBDevice_getIdRequestMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getId").pyclass

IUSBDevice_getIdResultMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getIdResponse").pyclass

IUSBDevice_getVendorIdRequestMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getVendorId").pyclass

IUSBDevice_getVendorIdResultMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getVendorIdResponse").pyclass

IUSBDevice_getProductIdRequestMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getProductId").pyclass

IUSBDevice_getProductIdResultMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getProductIdResponse").pyclass

IUSBDevice_getRevisionRequestMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getRevision").pyclass

IUSBDevice_getRevisionResultMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getRevisionResponse").pyclass

IUSBDevice_getManufacturerRequestMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getManufacturer").pyclass

IUSBDevice_getManufacturerResultMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getManufacturerResponse").pyclass

IUSBDevice_getProductRequestMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getProduct").pyclass

IUSBDevice_getProductResultMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getProductResponse").pyclass

IUSBDevice_getSerialNumberRequestMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getSerialNumber").pyclass

IUSBDevice_getSerialNumberResultMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getSerialNumberResponse").pyclass

IUSBDevice_getAddressRequestMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getAddress").pyclass

IUSBDevice_getAddressResultMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getAddressResponse").pyclass

IUSBDevice_getPortRequestMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getPort").pyclass

IUSBDevice_getPortResultMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getPortResponse").pyclass

IUSBDevice_getVersionRequestMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getVersion").pyclass

IUSBDevice_getVersionResultMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getVersionResponse").pyclass

IUSBDevice_getPortVersionRequestMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getPortVersion").pyclass

IUSBDevice_getPortVersionResultMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getPortVersionResponse").pyclass

IUSBDevice_getRemoteRequestMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getRemote").pyclass

IUSBDevice_getRemoteResultMsg = GED("http://www.virtualbox.org/", "IUSBDevice_getRemoteResponse").pyclass

IUSBDeviceFilter_getNameRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getName").pyclass

IUSBDeviceFilter_getNameResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getNameResponse").pyclass

IUSBDeviceFilter_setNameRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setName").pyclass

IUSBDeviceFilter_setNameResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setNameResponse").pyclass

IUSBDeviceFilter_getActiveRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getActive").pyclass

IUSBDeviceFilter_getActiveResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getActiveResponse").pyclass

IUSBDeviceFilter_setActiveRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setActive").pyclass

IUSBDeviceFilter_setActiveResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setActiveResponse").pyclass

IUSBDeviceFilter_getVendorIdRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getVendorId").pyclass

IUSBDeviceFilter_getVendorIdResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getVendorIdResponse").pyclass

IUSBDeviceFilter_setVendorIdRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setVendorId").pyclass

IUSBDeviceFilter_setVendorIdResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setVendorIdResponse").pyclass

IUSBDeviceFilter_getProductIdRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getProductId").pyclass

IUSBDeviceFilter_getProductIdResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getProductIdResponse").pyclass

IUSBDeviceFilter_setProductIdRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setProductId").pyclass

IUSBDeviceFilter_setProductIdResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setProductIdResponse").pyclass

IUSBDeviceFilter_getRevisionRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getRevision").pyclass

IUSBDeviceFilter_getRevisionResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getRevisionResponse").pyclass

IUSBDeviceFilter_setRevisionRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setRevision").pyclass

IUSBDeviceFilter_setRevisionResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setRevisionResponse").pyclass

IUSBDeviceFilter_getManufacturerRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getManufacturer").pyclass

IUSBDeviceFilter_getManufacturerResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getManufacturerResponse").pyclass

IUSBDeviceFilter_setManufacturerRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setManufacturer").pyclass

IUSBDeviceFilter_setManufacturerResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setManufacturerResponse").pyclass

IUSBDeviceFilter_getProductRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getProduct").pyclass

IUSBDeviceFilter_getProductResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getProductResponse").pyclass

IUSBDeviceFilter_setProductRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setProduct").pyclass

IUSBDeviceFilter_setProductResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setProductResponse").pyclass

IUSBDeviceFilter_getSerialNumberRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getSerialNumber").pyclass

IUSBDeviceFilter_getSerialNumberResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getSerialNumberResponse").pyclass

IUSBDeviceFilter_setSerialNumberRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setSerialNumber").pyclass

IUSBDeviceFilter_setSerialNumberResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setSerialNumberResponse").pyclass

IUSBDeviceFilter_getPortRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getPort").pyclass

IUSBDeviceFilter_getPortResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getPortResponse").pyclass

IUSBDeviceFilter_setPortRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setPort").pyclass

IUSBDeviceFilter_setPortResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setPortResponse").pyclass

IUSBDeviceFilter_getRemoteRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getRemote").pyclass

IUSBDeviceFilter_getRemoteResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getRemoteResponse").pyclass

IUSBDeviceFilter_setRemoteRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setRemote").pyclass

IUSBDeviceFilter_setRemoteResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setRemoteResponse").pyclass

IUSBDeviceFilter_getMaskedInterfacesRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getMaskedInterfaces").pyclass

IUSBDeviceFilter_getMaskedInterfacesResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_getMaskedInterfacesResponse").pyclass

IUSBDeviceFilter_setMaskedInterfacesRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setMaskedInterfaces").pyclass

IUSBDeviceFilter_setMaskedInterfacesResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceFilter_setMaskedInterfacesResponse").pyclass

IHostUSBDevice_getStateRequestMsg = GED("http://www.virtualbox.org/", "IHostUSBDevice_getState").pyclass

IHostUSBDevice_getStateResultMsg = GED("http://www.virtualbox.org/", "IHostUSBDevice_getStateResponse").pyclass

IHostUSBDeviceFilter_getActionRequestMsg = GED("http://www.virtualbox.org/", "IHostUSBDeviceFilter_getAction").pyclass

IHostUSBDeviceFilter_getActionResultMsg = GED("http://www.virtualbox.org/", "IHostUSBDeviceFilter_getActionResponse").pyclass

IHostUSBDeviceFilter_setActionRequestMsg = GED("http://www.virtualbox.org/", "IHostUSBDeviceFilter_setAction").pyclass

IHostUSBDeviceFilter_setActionResultMsg = GED("http://www.virtualbox.org/", "IHostUSBDeviceFilter_setActionResponse").pyclass

IAudioAdapter_getEnabledRequestMsg = GED("http://www.virtualbox.org/", "IAudioAdapter_getEnabled").pyclass

IAudioAdapter_getEnabledResultMsg = GED("http://www.virtualbox.org/", "IAudioAdapter_getEnabledResponse").pyclass

IAudioAdapter_setEnabledRequestMsg = GED("http://www.virtualbox.org/", "IAudioAdapter_setEnabled").pyclass

IAudioAdapter_setEnabledResultMsg = GED("http://www.virtualbox.org/", "IAudioAdapter_setEnabledResponse").pyclass

IAudioAdapter_getAudioControllerRequestMsg = GED("http://www.virtualbox.org/", "IAudioAdapter_getAudioController").pyclass

IAudioAdapter_getAudioControllerResultMsg = GED("http://www.virtualbox.org/", "IAudioAdapter_getAudioControllerResponse").pyclass

IAudioAdapter_setAudioControllerRequestMsg = GED("http://www.virtualbox.org/", "IAudioAdapter_setAudioController").pyclass

IAudioAdapter_setAudioControllerResultMsg = GED("http://www.virtualbox.org/", "IAudioAdapter_setAudioControllerResponse").pyclass

IAudioAdapter_getAudioDriverRequestMsg = GED("http://www.virtualbox.org/", "IAudioAdapter_getAudioDriver").pyclass

IAudioAdapter_getAudioDriverResultMsg = GED("http://www.virtualbox.org/", "IAudioAdapter_getAudioDriverResponse").pyclass

IAudioAdapter_setAudioDriverRequestMsg = GED("http://www.virtualbox.org/", "IAudioAdapter_setAudioDriver").pyclass

IAudioAdapter_setAudioDriverResultMsg = GED("http://www.virtualbox.org/", "IAudioAdapter_setAudioDriverResponse").pyclass

IVRDEServer_getEnabledRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getEnabled").pyclass

IVRDEServer_getEnabledResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getEnabledResponse").pyclass

IVRDEServer_setEnabledRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setEnabled").pyclass

IVRDEServer_setEnabledResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setEnabledResponse").pyclass

IVRDEServer_getAuthTypeRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getAuthType").pyclass

IVRDEServer_getAuthTypeResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getAuthTypeResponse").pyclass

IVRDEServer_setAuthTypeRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setAuthType").pyclass

IVRDEServer_setAuthTypeResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setAuthTypeResponse").pyclass

IVRDEServer_getAuthTimeoutRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getAuthTimeout").pyclass

IVRDEServer_getAuthTimeoutResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getAuthTimeoutResponse").pyclass

IVRDEServer_setAuthTimeoutRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setAuthTimeout").pyclass

IVRDEServer_setAuthTimeoutResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setAuthTimeoutResponse").pyclass

IVRDEServer_getAllowMultiConnectionRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getAllowMultiConnection").pyclass

IVRDEServer_getAllowMultiConnectionResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getAllowMultiConnectionResponse").pyclass

IVRDEServer_setAllowMultiConnectionRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setAllowMultiConnection").pyclass

IVRDEServer_setAllowMultiConnectionResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setAllowMultiConnectionResponse").pyclass

IVRDEServer_getReuseSingleConnectionRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getReuseSingleConnection").pyclass

IVRDEServer_getReuseSingleConnectionResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getReuseSingleConnectionResponse").pyclass

IVRDEServer_setReuseSingleConnectionRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setReuseSingleConnection").pyclass

IVRDEServer_setReuseSingleConnectionResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setReuseSingleConnectionResponse").pyclass

IVRDEServer_getVRDEExtPackRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getVRDEExtPack").pyclass

IVRDEServer_getVRDEExtPackResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getVRDEExtPackResponse").pyclass

IVRDEServer_setVRDEExtPackRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setVRDEExtPack").pyclass

IVRDEServer_setVRDEExtPackResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setVRDEExtPackResponse").pyclass

IVRDEServer_getAuthLibraryRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getAuthLibrary").pyclass

IVRDEServer_getAuthLibraryResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getAuthLibraryResponse").pyclass

IVRDEServer_setAuthLibraryRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setAuthLibrary").pyclass

IVRDEServer_setAuthLibraryResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setAuthLibraryResponse").pyclass

IVRDEServer_getVRDEPropertiesRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getVRDEProperties").pyclass

IVRDEServer_getVRDEPropertiesResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getVRDEPropertiesResponse").pyclass

IVRDEServer_setVRDEPropertyRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setVRDEProperty").pyclass

IVRDEServer_setVRDEPropertyResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_setVRDEPropertyResponse").pyclass

IVRDEServer_getVRDEPropertyRequestMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getVRDEProperty").pyclass

IVRDEServer_getVRDEPropertyResultMsg = GED("http://www.virtualbox.org/", "IVRDEServer_getVRDEPropertyResponse").pyclass

ISession_getStateRequestMsg = GED("http://www.virtualbox.org/", "ISession_getState").pyclass

ISession_getStateResultMsg = GED("http://www.virtualbox.org/", "ISession_getStateResponse").pyclass

ISession_getTypeRequestMsg = GED("http://www.virtualbox.org/", "ISession_getType").pyclass

ISession_getTypeResultMsg = GED("http://www.virtualbox.org/", "ISession_getTypeResponse").pyclass

ISession_getMachineRequestMsg = GED("http://www.virtualbox.org/", "ISession_getMachine").pyclass

ISession_getMachineResultMsg = GED("http://www.virtualbox.org/", "ISession_getMachineResponse").pyclass

ISession_getConsoleRequestMsg = GED("http://www.virtualbox.org/", "ISession_getConsole").pyclass

ISession_getConsoleResultMsg = GED("http://www.virtualbox.org/", "ISession_getConsoleResponse").pyclass

ISession_unlockMachineRequestMsg = GED("http://www.virtualbox.org/", "ISession_unlockMachine").pyclass

ISession_unlockMachineResultMsg = GED("http://www.virtualbox.org/", "ISession_unlockMachineResponse").pyclass

IStorageController_getNameRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_getName").pyclass

IStorageController_getNameResultMsg = GED("http://www.virtualbox.org/", "IStorageController_getNameResponse").pyclass

IStorageController_getMaxDevicesPerPortCountRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_getMaxDevicesPerPortCount").pyclass

IStorageController_getMaxDevicesPerPortCountResultMsg = GED("http://www.virtualbox.org/", "IStorageController_getMaxDevicesPerPortCountResponse").pyclass

IStorageController_getMinPortCountRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_getMinPortCount").pyclass

IStorageController_getMinPortCountResultMsg = GED("http://www.virtualbox.org/", "IStorageController_getMinPortCountResponse").pyclass

IStorageController_getMaxPortCountRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_getMaxPortCount").pyclass

IStorageController_getMaxPortCountResultMsg = GED("http://www.virtualbox.org/", "IStorageController_getMaxPortCountResponse").pyclass

IStorageController_getInstanceRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_getInstance").pyclass

IStorageController_getInstanceResultMsg = GED("http://www.virtualbox.org/", "IStorageController_getInstanceResponse").pyclass

IStorageController_setInstanceRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_setInstance").pyclass

IStorageController_setInstanceResultMsg = GED("http://www.virtualbox.org/", "IStorageController_setInstanceResponse").pyclass

IStorageController_getPortCountRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_getPortCount").pyclass

IStorageController_getPortCountResultMsg = GED("http://www.virtualbox.org/", "IStorageController_getPortCountResponse").pyclass

IStorageController_setPortCountRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_setPortCount").pyclass

IStorageController_setPortCountResultMsg = GED("http://www.virtualbox.org/", "IStorageController_setPortCountResponse").pyclass

IStorageController_getBusRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_getBus").pyclass

IStorageController_getBusResultMsg = GED("http://www.virtualbox.org/", "IStorageController_getBusResponse").pyclass

IStorageController_getControllerTypeRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_getControllerType").pyclass

IStorageController_getControllerTypeResultMsg = GED("http://www.virtualbox.org/", "IStorageController_getControllerTypeResponse").pyclass

IStorageController_setControllerTypeRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_setControllerType").pyclass

IStorageController_setControllerTypeResultMsg = GED("http://www.virtualbox.org/", "IStorageController_setControllerTypeResponse").pyclass

IStorageController_getUseHostIOCacheRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_getUseHostIOCache").pyclass

IStorageController_getUseHostIOCacheResultMsg = GED("http://www.virtualbox.org/", "IStorageController_getUseHostIOCacheResponse").pyclass

IStorageController_setUseHostIOCacheRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_setUseHostIOCache").pyclass

IStorageController_setUseHostIOCacheResultMsg = GED("http://www.virtualbox.org/", "IStorageController_setUseHostIOCacheResponse").pyclass

IStorageController_getBootableRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_getBootable").pyclass

IStorageController_getBootableResultMsg = GED("http://www.virtualbox.org/", "IStorageController_getBootableResponse").pyclass

IStorageController_getIDEEmulationPortRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_getIDEEmulationPort").pyclass

IStorageController_getIDEEmulationPortResultMsg = GED("http://www.virtualbox.org/", "IStorageController_getIDEEmulationPortResponse").pyclass

IStorageController_setIDEEmulationPortRequestMsg = GED("http://www.virtualbox.org/", "IStorageController_setIDEEmulationPort").pyclass

IStorageController_setIDEEmulationPortResultMsg = GED("http://www.virtualbox.org/", "IStorageController_setIDEEmulationPortResponse").pyclass

IManagedObjectRef_getInterfaceNameRequestMsg = GED("http://www.virtualbox.org/", "IManagedObjectRef_getInterfaceName").pyclass

IManagedObjectRef_getInterfaceNameResultMsg = GED("http://www.virtualbox.org/", "IManagedObjectRef_getInterfaceNameResponse").pyclass

IManagedObjectRef_releaseRequestMsg = GED("http://www.virtualbox.org/", "IManagedObjectRef_release").pyclass

IManagedObjectRef_releaseResultMsg = GED("http://www.virtualbox.org/", "IManagedObjectRef_releaseResponse").pyclass

IWebsessionManager_logonRequestMsg = GED("http://www.virtualbox.org/", "IWebsessionManager_logon").pyclass

IWebsessionManager_logonResultMsg = GED("http://www.virtualbox.org/", "IWebsessionManager_logonResponse").pyclass

IWebsessionManager_getSessionObjectRequestMsg = GED("http://www.virtualbox.org/", "IWebsessionManager_getSessionObject").pyclass

IWebsessionManager_getSessionObjectResultMsg = GED("http://www.virtualbox.org/", "IWebsessionManager_getSessionObjectResponse").pyclass

IWebsessionManager_logoffRequestMsg = GED("http://www.virtualbox.org/", "IWebsessionManager_logoff").pyclass

IWebsessionManager_logoffResultMsg = GED("http://www.virtualbox.org/", "IWebsessionManager_logoffResponse").pyclass

IPerformanceMetric_getMetricNameRequestMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getMetricName").pyclass

IPerformanceMetric_getMetricNameResultMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getMetricNameResponse").pyclass

IPerformanceMetric_getObjectRequestMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getObject").pyclass

IPerformanceMetric_getObjectResultMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getObjectResponse").pyclass

IPerformanceMetric_getDescriptionRequestMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getDescription").pyclass

IPerformanceMetric_getDescriptionResultMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getDescriptionResponse").pyclass

IPerformanceMetric_getPeriodRequestMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getPeriod").pyclass

IPerformanceMetric_getPeriodResultMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getPeriodResponse").pyclass

IPerformanceMetric_getCountRequestMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getCount").pyclass

IPerformanceMetric_getCountResultMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getCountResponse").pyclass

IPerformanceMetric_getUnitRequestMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getUnit").pyclass

IPerformanceMetric_getUnitResultMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getUnitResponse").pyclass

IPerformanceMetric_getMinimumValueRequestMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getMinimumValue").pyclass

IPerformanceMetric_getMinimumValueResultMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getMinimumValueResponse").pyclass

IPerformanceMetric_getMaximumValueRequestMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getMaximumValue").pyclass

IPerformanceMetric_getMaximumValueResultMsg = GED("http://www.virtualbox.org/", "IPerformanceMetric_getMaximumValueResponse").pyclass

IPerformanceCollector_getMetricNamesRequestMsg = GED("http://www.virtualbox.org/", "IPerformanceCollector_getMetricNames").pyclass

IPerformanceCollector_getMetricNamesResultMsg = GED("http://www.virtualbox.org/", "IPerformanceCollector_getMetricNamesResponse").pyclass

IPerformanceCollector_getMetricsRequestMsg = GED("http://www.virtualbox.org/", "IPerformanceCollector_getMetrics").pyclass

IPerformanceCollector_getMetricsResultMsg = GED("http://www.virtualbox.org/", "IPerformanceCollector_getMetricsResponse").pyclass

IPerformanceCollector_setupMetricsRequestMsg = GED("http://www.virtualbox.org/", "IPerformanceCollector_setupMetrics").pyclass

IPerformanceCollector_setupMetricsResultMsg = GED("http://www.virtualbox.org/", "IPerformanceCollector_setupMetricsResponse").pyclass

IPerformanceCollector_enableMetricsRequestMsg = GED("http://www.virtualbox.org/", "IPerformanceCollector_enableMetrics").pyclass

IPerformanceCollector_enableMetricsResultMsg = GED("http://www.virtualbox.org/", "IPerformanceCollector_enableMetricsResponse").pyclass

IPerformanceCollector_disableMetricsRequestMsg = GED("http://www.virtualbox.org/", "IPerformanceCollector_disableMetrics").pyclass

IPerformanceCollector_disableMetricsResultMsg = GED("http://www.virtualbox.org/", "IPerformanceCollector_disableMetricsResponse").pyclass

IPerformanceCollector_queryMetricsDataRequestMsg = GED("http://www.virtualbox.org/", "IPerformanceCollector_queryMetricsData").pyclass

IPerformanceCollector_queryMetricsDataResultMsg = GED("http://www.virtualbox.org/", "IPerformanceCollector_queryMetricsDataResponse").pyclass

INATEngine_getNetworkRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_getNetwork").pyclass

INATEngine_getNetworkResultMsg = GED("http://www.virtualbox.org/", "INATEngine_getNetworkResponse").pyclass

INATEngine_setNetworkRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_setNetwork").pyclass

INATEngine_setNetworkResultMsg = GED("http://www.virtualbox.org/", "INATEngine_setNetworkResponse").pyclass

INATEngine_getHostIPRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_getHostIP").pyclass

INATEngine_getHostIPResultMsg = GED("http://www.virtualbox.org/", "INATEngine_getHostIPResponse").pyclass

INATEngine_setHostIPRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_setHostIP").pyclass

INATEngine_setHostIPResultMsg = GED("http://www.virtualbox.org/", "INATEngine_setHostIPResponse").pyclass

INATEngine_getTftpPrefixRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_getTftpPrefix").pyclass

INATEngine_getTftpPrefixResultMsg = GED("http://www.virtualbox.org/", "INATEngine_getTftpPrefixResponse").pyclass

INATEngine_setTftpPrefixRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_setTftpPrefix").pyclass

INATEngine_setTftpPrefixResultMsg = GED("http://www.virtualbox.org/", "INATEngine_setTftpPrefixResponse").pyclass

INATEngine_getTftpBootFileRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_getTftpBootFile").pyclass

INATEngine_getTftpBootFileResultMsg = GED("http://www.virtualbox.org/", "INATEngine_getTftpBootFileResponse").pyclass

INATEngine_setTftpBootFileRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_setTftpBootFile").pyclass

INATEngine_setTftpBootFileResultMsg = GED("http://www.virtualbox.org/", "INATEngine_setTftpBootFileResponse").pyclass

INATEngine_getTftpNextServerRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_getTftpNextServer").pyclass

INATEngine_getTftpNextServerResultMsg = GED("http://www.virtualbox.org/", "INATEngine_getTftpNextServerResponse").pyclass

INATEngine_setTftpNextServerRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_setTftpNextServer").pyclass

INATEngine_setTftpNextServerResultMsg = GED("http://www.virtualbox.org/", "INATEngine_setTftpNextServerResponse").pyclass

INATEngine_getAliasModeRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_getAliasMode").pyclass

INATEngine_getAliasModeResultMsg = GED("http://www.virtualbox.org/", "INATEngine_getAliasModeResponse").pyclass

INATEngine_setAliasModeRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_setAliasMode").pyclass

INATEngine_setAliasModeResultMsg = GED("http://www.virtualbox.org/", "INATEngine_setAliasModeResponse").pyclass

INATEngine_getDnsPassDomainRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_getDnsPassDomain").pyclass

INATEngine_getDnsPassDomainResultMsg = GED("http://www.virtualbox.org/", "INATEngine_getDnsPassDomainResponse").pyclass

INATEngine_setDnsPassDomainRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_setDnsPassDomain").pyclass

INATEngine_setDnsPassDomainResultMsg = GED("http://www.virtualbox.org/", "INATEngine_setDnsPassDomainResponse").pyclass

INATEngine_getDnsProxyRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_getDnsProxy").pyclass

INATEngine_getDnsProxyResultMsg = GED("http://www.virtualbox.org/", "INATEngine_getDnsProxyResponse").pyclass

INATEngine_setDnsProxyRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_setDnsProxy").pyclass

INATEngine_setDnsProxyResultMsg = GED("http://www.virtualbox.org/", "INATEngine_setDnsProxyResponse").pyclass

INATEngine_getDnsUseHostResolverRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_getDnsUseHostResolver").pyclass

INATEngine_getDnsUseHostResolverResultMsg = GED("http://www.virtualbox.org/", "INATEngine_getDnsUseHostResolverResponse").pyclass

INATEngine_setDnsUseHostResolverRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_setDnsUseHostResolver").pyclass

INATEngine_setDnsUseHostResolverResultMsg = GED("http://www.virtualbox.org/", "INATEngine_setDnsUseHostResolverResponse").pyclass

INATEngine_getRedirectsRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_getRedirects").pyclass

INATEngine_getRedirectsResultMsg = GED("http://www.virtualbox.org/", "INATEngine_getRedirectsResponse").pyclass

INATEngine_setNetworkSettingsRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_setNetworkSettings").pyclass

INATEngine_setNetworkSettingsResultMsg = GED("http://www.virtualbox.org/", "INATEngine_setNetworkSettingsResponse").pyclass

INATEngine_getNetworkSettingsRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_getNetworkSettings").pyclass

INATEngine_getNetworkSettingsResultMsg = GED("http://www.virtualbox.org/", "INATEngine_getNetworkSettingsResponse").pyclass

INATEngine_addRedirectRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_addRedirect").pyclass

INATEngine_addRedirectResultMsg = GED("http://www.virtualbox.org/", "INATEngine_addRedirectResponse").pyclass

INATEngine_removeRedirectRequestMsg = GED("http://www.virtualbox.org/", "INATEngine_removeRedirect").pyclass

INATEngine_removeRedirectResultMsg = GED("http://www.virtualbox.org/", "INATEngine_removeRedirectResponse").pyclass

IBandwidthGroup_getNameRequestMsg = GED("http://www.virtualbox.org/", "IBandwidthGroup_getName").pyclass

IBandwidthGroup_getNameResultMsg = GED("http://www.virtualbox.org/", "IBandwidthGroup_getNameResponse").pyclass

IBandwidthGroup_getTypeRequestMsg = GED("http://www.virtualbox.org/", "IBandwidthGroup_getType").pyclass

IBandwidthGroup_getTypeResultMsg = GED("http://www.virtualbox.org/", "IBandwidthGroup_getTypeResponse").pyclass

IBandwidthGroup_getReferenceRequestMsg = GED("http://www.virtualbox.org/", "IBandwidthGroup_getReference").pyclass

IBandwidthGroup_getReferenceResultMsg = GED("http://www.virtualbox.org/", "IBandwidthGroup_getReferenceResponse").pyclass

IBandwidthGroup_getMaxMbPerSecRequestMsg = GED("http://www.virtualbox.org/", "IBandwidthGroup_getMaxMbPerSec").pyclass

IBandwidthGroup_getMaxMbPerSecResultMsg = GED("http://www.virtualbox.org/", "IBandwidthGroup_getMaxMbPerSecResponse").pyclass

IBandwidthGroup_setMaxMbPerSecRequestMsg = GED("http://www.virtualbox.org/", "IBandwidthGroup_setMaxMbPerSec").pyclass

IBandwidthGroup_setMaxMbPerSecResultMsg = GED("http://www.virtualbox.org/", "IBandwidthGroup_setMaxMbPerSecResponse").pyclass

IBandwidthControl_getNumGroupsRequestMsg = GED("http://www.virtualbox.org/", "IBandwidthControl_getNumGroups").pyclass

IBandwidthControl_getNumGroupsResultMsg = GED("http://www.virtualbox.org/", "IBandwidthControl_getNumGroupsResponse").pyclass

IBandwidthControl_createBandwidthGroupRequestMsg = GED("http://www.virtualbox.org/", "IBandwidthControl_createBandwidthGroup").pyclass

IBandwidthControl_createBandwidthGroupResultMsg = GED("http://www.virtualbox.org/", "IBandwidthControl_createBandwidthGroupResponse").pyclass

IBandwidthControl_deleteBandwidthGroupRequestMsg = GED("http://www.virtualbox.org/", "IBandwidthControl_deleteBandwidthGroup").pyclass

IBandwidthControl_deleteBandwidthGroupResultMsg = GED("http://www.virtualbox.org/", "IBandwidthControl_deleteBandwidthGroupResponse").pyclass

IBandwidthControl_getBandwidthGroupRequestMsg = GED("http://www.virtualbox.org/", "IBandwidthControl_getBandwidthGroup").pyclass

IBandwidthControl_getBandwidthGroupResultMsg = GED("http://www.virtualbox.org/", "IBandwidthControl_getBandwidthGroupResponse").pyclass

IBandwidthControl_getAllBandwidthGroupsRequestMsg = GED("http://www.virtualbox.org/", "IBandwidthControl_getAllBandwidthGroups").pyclass

IBandwidthControl_getAllBandwidthGroupsResultMsg = GED("http://www.virtualbox.org/", "IBandwidthControl_getAllBandwidthGroupsResponse").pyclass

IEventSource_createListenerRequestMsg = GED("http://www.virtualbox.org/", "IEventSource_createListener").pyclass

IEventSource_createListenerResultMsg = GED("http://www.virtualbox.org/", "IEventSource_createListenerResponse").pyclass

IEventSource_createAggregatorRequestMsg = GED("http://www.virtualbox.org/", "IEventSource_createAggregator").pyclass

IEventSource_createAggregatorResultMsg = GED("http://www.virtualbox.org/", "IEventSource_createAggregatorResponse").pyclass

IEventSource_registerListenerRequestMsg = GED("http://www.virtualbox.org/", "IEventSource_registerListener").pyclass

IEventSource_registerListenerResultMsg = GED("http://www.virtualbox.org/", "IEventSource_registerListenerResponse").pyclass

IEventSource_unregisterListenerRequestMsg = GED("http://www.virtualbox.org/", "IEventSource_unregisterListener").pyclass

IEventSource_unregisterListenerResultMsg = GED("http://www.virtualbox.org/", "IEventSource_unregisterListenerResponse").pyclass

IEventSource_fireEventRequestMsg = GED("http://www.virtualbox.org/", "IEventSource_fireEvent").pyclass

IEventSource_fireEventResultMsg = GED("http://www.virtualbox.org/", "IEventSource_fireEventResponse").pyclass

IEventSource_getEventRequestMsg = GED("http://www.virtualbox.org/", "IEventSource_getEvent").pyclass

IEventSource_getEventResultMsg = GED("http://www.virtualbox.org/", "IEventSource_getEventResponse").pyclass

IEventSource_eventProcessedRequestMsg = GED("http://www.virtualbox.org/", "IEventSource_eventProcessed").pyclass

IEventSource_eventProcessedResultMsg = GED("http://www.virtualbox.org/", "IEventSource_eventProcessedResponse").pyclass

IEventListener_handleEventRequestMsg = GED("http://www.virtualbox.org/", "IEventListener_handleEvent").pyclass

IEventListener_handleEventResultMsg = GED("http://www.virtualbox.org/", "IEventListener_handleEventResponse").pyclass

IEvent_getTypeRequestMsg = GED("http://www.virtualbox.org/", "IEvent_getType").pyclass

IEvent_getTypeResultMsg = GED("http://www.virtualbox.org/", "IEvent_getTypeResponse").pyclass

IEvent_getSourceRequestMsg = GED("http://www.virtualbox.org/", "IEvent_getSource").pyclass

IEvent_getSourceResultMsg = GED("http://www.virtualbox.org/", "IEvent_getSourceResponse").pyclass

IEvent_getWaitableRequestMsg = GED("http://www.virtualbox.org/", "IEvent_getWaitable").pyclass

IEvent_getWaitableResultMsg = GED("http://www.virtualbox.org/", "IEvent_getWaitableResponse").pyclass

IEvent_setProcessedRequestMsg = GED("http://www.virtualbox.org/", "IEvent_setProcessed").pyclass

IEvent_setProcessedResultMsg = GED("http://www.virtualbox.org/", "IEvent_setProcessedResponse").pyclass

IEvent_waitProcessedRequestMsg = GED("http://www.virtualbox.org/", "IEvent_waitProcessed").pyclass

IEvent_waitProcessedResultMsg = GED("http://www.virtualbox.org/", "IEvent_waitProcessedResponse").pyclass

IReusableEvent_getGenerationRequestMsg = GED("http://www.virtualbox.org/", "IReusableEvent_getGeneration").pyclass

IReusableEvent_getGenerationResultMsg = GED("http://www.virtualbox.org/", "IReusableEvent_getGenerationResponse").pyclass

IReusableEvent_reuseRequestMsg = GED("http://www.virtualbox.org/", "IReusableEvent_reuse").pyclass

IReusableEvent_reuseResultMsg = GED("http://www.virtualbox.org/", "IReusableEvent_reuseResponse").pyclass

IMachineEvent_getMachineIdRequestMsg = GED("http://www.virtualbox.org/", "IMachineEvent_getMachineId").pyclass

IMachineEvent_getMachineIdResultMsg = GED("http://www.virtualbox.org/", "IMachineEvent_getMachineIdResponse").pyclass

IMachineStateChangedEvent_getStateRequestMsg = GED("http://www.virtualbox.org/", "IMachineStateChangedEvent_getState").pyclass

IMachineStateChangedEvent_getStateResultMsg = GED("http://www.virtualbox.org/", "IMachineStateChangedEvent_getStateResponse").pyclass

IMachineDataChangedEvent_getTemporaryRequestMsg = GED("http://www.virtualbox.org/", "IMachineDataChangedEvent_getTemporary").pyclass

IMachineDataChangedEvent_getTemporaryResultMsg = GED("http://www.virtualbox.org/", "IMachineDataChangedEvent_getTemporaryResponse").pyclass

IMediumRegisteredEvent_getMediumIdRequestMsg = GED("http://www.virtualbox.org/", "IMediumRegisteredEvent_getMediumId").pyclass

IMediumRegisteredEvent_getMediumIdResultMsg = GED("http://www.virtualbox.org/", "IMediumRegisteredEvent_getMediumIdResponse").pyclass

IMediumRegisteredEvent_getMediumTypeRequestMsg = GED("http://www.virtualbox.org/", "IMediumRegisteredEvent_getMediumType").pyclass

IMediumRegisteredEvent_getMediumTypeResultMsg = GED("http://www.virtualbox.org/", "IMediumRegisteredEvent_getMediumTypeResponse").pyclass

IMediumRegisteredEvent_getRegisteredRequestMsg = GED("http://www.virtualbox.org/", "IMediumRegisteredEvent_getRegistered").pyclass

IMediumRegisteredEvent_getRegisteredResultMsg = GED("http://www.virtualbox.org/", "IMediumRegisteredEvent_getRegisteredResponse").pyclass

IMachineRegisteredEvent_getRegisteredRequestMsg = GED("http://www.virtualbox.org/", "IMachineRegisteredEvent_getRegistered").pyclass

IMachineRegisteredEvent_getRegisteredResultMsg = GED("http://www.virtualbox.org/", "IMachineRegisteredEvent_getRegisteredResponse").pyclass

ISessionStateChangedEvent_getStateRequestMsg = GED("http://www.virtualbox.org/", "ISessionStateChangedEvent_getState").pyclass

ISessionStateChangedEvent_getStateResultMsg = GED("http://www.virtualbox.org/", "ISessionStateChangedEvent_getStateResponse").pyclass

IGuestPropertyChangedEvent_getNameRequestMsg = GED("http://www.virtualbox.org/", "IGuestPropertyChangedEvent_getName").pyclass

IGuestPropertyChangedEvent_getNameResultMsg = GED("http://www.virtualbox.org/", "IGuestPropertyChangedEvent_getNameResponse").pyclass

IGuestPropertyChangedEvent_getValueRequestMsg = GED("http://www.virtualbox.org/", "IGuestPropertyChangedEvent_getValue").pyclass

IGuestPropertyChangedEvent_getValueResultMsg = GED("http://www.virtualbox.org/", "IGuestPropertyChangedEvent_getValueResponse").pyclass

IGuestPropertyChangedEvent_getFlagsRequestMsg = GED("http://www.virtualbox.org/", "IGuestPropertyChangedEvent_getFlags").pyclass

IGuestPropertyChangedEvent_getFlagsResultMsg = GED("http://www.virtualbox.org/", "IGuestPropertyChangedEvent_getFlagsResponse").pyclass

ISnapshotEvent_getSnapshotIdRequestMsg = GED("http://www.virtualbox.org/", "ISnapshotEvent_getSnapshotId").pyclass

ISnapshotEvent_getSnapshotIdResultMsg = GED("http://www.virtualbox.org/", "ISnapshotEvent_getSnapshotIdResponse").pyclass

IMousePointerShapeChangedEvent_getVisibleRequestMsg = GED("http://www.virtualbox.org/", "IMousePointerShapeChangedEvent_getVisible").pyclass

IMousePointerShapeChangedEvent_getVisibleResultMsg = GED("http://www.virtualbox.org/", "IMousePointerShapeChangedEvent_getVisibleResponse").pyclass

IMousePointerShapeChangedEvent_getAlphaRequestMsg = GED("http://www.virtualbox.org/", "IMousePointerShapeChangedEvent_getAlpha").pyclass

IMousePointerShapeChangedEvent_getAlphaResultMsg = GED("http://www.virtualbox.org/", "IMousePointerShapeChangedEvent_getAlphaResponse").pyclass

IMousePointerShapeChangedEvent_getXhotRequestMsg = GED("http://www.virtualbox.org/", "IMousePointerShapeChangedEvent_getXhot").pyclass

IMousePointerShapeChangedEvent_getXhotResultMsg = GED("http://www.virtualbox.org/", "IMousePointerShapeChangedEvent_getXhotResponse").pyclass

IMousePointerShapeChangedEvent_getYhotRequestMsg = GED("http://www.virtualbox.org/", "IMousePointerShapeChangedEvent_getYhot").pyclass

IMousePointerShapeChangedEvent_getYhotResultMsg = GED("http://www.virtualbox.org/", "IMousePointerShapeChangedEvent_getYhotResponse").pyclass

IMousePointerShapeChangedEvent_getWidthRequestMsg = GED("http://www.virtualbox.org/", "IMousePointerShapeChangedEvent_getWidth").pyclass

IMousePointerShapeChangedEvent_getWidthResultMsg = GED("http://www.virtualbox.org/", "IMousePointerShapeChangedEvent_getWidthResponse").pyclass

IMousePointerShapeChangedEvent_getHeightRequestMsg = GED("http://www.virtualbox.org/", "IMousePointerShapeChangedEvent_getHeight").pyclass

IMousePointerShapeChangedEvent_getHeightResultMsg = GED("http://www.virtualbox.org/", "IMousePointerShapeChangedEvent_getHeightResponse").pyclass

IMousePointerShapeChangedEvent_getShapeRequestMsg = GED("http://www.virtualbox.org/", "IMousePointerShapeChangedEvent_getShape").pyclass

IMousePointerShapeChangedEvent_getShapeResultMsg = GED("http://www.virtualbox.org/", "IMousePointerShapeChangedEvent_getShapeResponse").pyclass

IMouseCapabilityChangedEvent_getSupportsAbsoluteRequestMsg = GED("http://www.virtualbox.org/", "IMouseCapabilityChangedEvent_getSupportsAbsolute").pyclass

IMouseCapabilityChangedEvent_getSupportsAbsoluteResultMsg = GED("http://www.virtualbox.org/", "IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse").pyclass

IMouseCapabilityChangedEvent_getSupportsRelativeRequestMsg = GED("http://www.virtualbox.org/", "IMouseCapabilityChangedEvent_getSupportsRelative").pyclass

IMouseCapabilityChangedEvent_getSupportsRelativeResultMsg = GED("http://www.virtualbox.org/", "IMouseCapabilityChangedEvent_getSupportsRelativeResponse").pyclass

IMouseCapabilityChangedEvent_getNeedsHostCursorRequestMsg = GED("http://www.virtualbox.org/", "IMouseCapabilityChangedEvent_getNeedsHostCursor").pyclass

IMouseCapabilityChangedEvent_getNeedsHostCursorResultMsg = GED("http://www.virtualbox.org/", "IMouseCapabilityChangedEvent_getNeedsHostCursorResponse").pyclass

IKeyboardLedsChangedEvent_getNumLockRequestMsg = GED("http://www.virtualbox.org/", "IKeyboardLedsChangedEvent_getNumLock").pyclass

IKeyboardLedsChangedEvent_getNumLockResultMsg = GED("http://www.virtualbox.org/", "IKeyboardLedsChangedEvent_getNumLockResponse").pyclass

IKeyboardLedsChangedEvent_getCapsLockRequestMsg = GED("http://www.virtualbox.org/", "IKeyboardLedsChangedEvent_getCapsLock").pyclass

IKeyboardLedsChangedEvent_getCapsLockResultMsg = GED("http://www.virtualbox.org/", "IKeyboardLedsChangedEvent_getCapsLockResponse").pyclass

IKeyboardLedsChangedEvent_getScrollLockRequestMsg = GED("http://www.virtualbox.org/", "IKeyboardLedsChangedEvent_getScrollLock").pyclass

IKeyboardLedsChangedEvent_getScrollLockResultMsg = GED("http://www.virtualbox.org/", "IKeyboardLedsChangedEvent_getScrollLockResponse").pyclass

IStateChangedEvent_getStateRequestMsg = GED("http://www.virtualbox.org/", "IStateChangedEvent_getState").pyclass

IStateChangedEvent_getStateResultMsg = GED("http://www.virtualbox.org/", "IStateChangedEvent_getStateResponse").pyclass

INetworkAdapterChangedEvent_getNetworkAdapterRequestMsg = GED("http://www.virtualbox.org/", "INetworkAdapterChangedEvent_getNetworkAdapter").pyclass

INetworkAdapterChangedEvent_getNetworkAdapterResultMsg = GED("http://www.virtualbox.org/", "INetworkAdapterChangedEvent_getNetworkAdapterResponse").pyclass

ISerialPortChangedEvent_getSerialPortRequestMsg = GED("http://www.virtualbox.org/", "ISerialPortChangedEvent_getSerialPort").pyclass

ISerialPortChangedEvent_getSerialPortResultMsg = GED("http://www.virtualbox.org/", "ISerialPortChangedEvent_getSerialPortResponse").pyclass

IParallelPortChangedEvent_getParallelPortRequestMsg = GED("http://www.virtualbox.org/", "IParallelPortChangedEvent_getParallelPort").pyclass

IParallelPortChangedEvent_getParallelPortResultMsg = GED("http://www.virtualbox.org/", "IParallelPortChangedEvent_getParallelPortResponse").pyclass

IMediumChangedEvent_getMediumAttachmentRequestMsg = GED("http://www.virtualbox.org/", "IMediumChangedEvent_getMediumAttachment").pyclass

IMediumChangedEvent_getMediumAttachmentResultMsg = GED("http://www.virtualbox.org/", "IMediumChangedEvent_getMediumAttachmentResponse").pyclass

ICPUChangedEvent_getCpuRequestMsg = GED("http://www.virtualbox.org/", "ICPUChangedEvent_getCpu").pyclass

ICPUChangedEvent_getCpuResultMsg = GED("http://www.virtualbox.org/", "ICPUChangedEvent_getCpuResponse").pyclass

ICPUChangedEvent_getAddRequestMsg = GED("http://www.virtualbox.org/", "ICPUChangedEvent_getAdd").pyclass

ICPUChangedEvent_getAddResultMsg = GED("http://www.virtualbox.org/", "ICPUChangedEvent_getAddResponse").pyclass

ICPUExecutionCapChangedEvent_getExecutionCapRequestMsg = GED("http://www.virtualbox.org/", "ICPUExecutionCapChangedEvent_getExecutionCap").pyclass

ICPUExecutionCapChangedEvent_getExecutionCapResultMsg = GED("http://www.virtualbox.org/", "ICPUExecutionCapChangedEvent_getExecutionCapResponse").pyclass

IGuestKeyboardEvent_getScancodesRequestMsg = GED("http://www.virtualbox.org/", "IGuestKeyboardEvent_getScancodes").pyclass

IGuestKeyboardEvent_getScancodesResultMsg = GED("http://www.virtualbox.org/", "IGuestKeyboardEvent_getScancodesResponse").pyclass

IGuestMouseEvent_getAbsoluteRequestMsg = GED("http://www.virtualbox.org/", "IGuestMouseEvent_getAbsolute").pyclass

IGuestMouseEvent_getAbsoluteResultMsg = GED("http://www.virtualbox.org/", "IGuestMouseEvent_getAbsoluteResponse").pyclass

IGuestMouseEvent_getXRequestMsg = GED("http://www.virtualbox.org/", "IGuestMouseEvent_getX").pyclass

IGuestMouseEvent_getXResultMsg = GED("http://www.virtualbox.org/", "IGuestMouseEvent_getXResponse").pyclass

IGuestMouseEvent_getYRequestMsg = GED("http://www.virtualbox.org/", "IGuestMouseEvent_getY").pyclass

IGuestMouseEvent_getYResultMsg = GED("http://www.virtualbox.org/", "IGuestMouseEvent_getYResponse").pyclass

IGuestMouseEvent_getZRequestMsg = GED("http://www.virtualbox.org/", "IGuestMouseEvent_getZ").pyclass

IGuestMouseEvent_getZResultMsg = GED("http://www.virtualbox.org/", "IGuestMouseEvent_getZResponse").pyclass

IGuestMouseEvent_getWRequestMsg = GED("http://www.virtualbox.org/", "IGuestMouseEvent_getW").pyclass

IGuestMouseEvent_getWResultMsg = GED("http://www.virtualbox.org/", "IGuestMouseEvent_getWResponse").pyclass

IGuestMouseEvent_getButtonsRequestMsg = GED("http://www.virtualbox.org/", "IGuestMouseEvent_getButtons").pyclass

IGuestMouseEvent_getButtonsResultMsg = GED("http://www.virtualbox.org/", "IGuestMouseEvent_getButtonsResponse").pyclass

IUSBDeviceStateChangedEvent_getDeviceRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceStateChangedEvent_getDevice").pyclass

IUSBDeviceStateChangedEvent_getDeviceResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceStateChangedEvent_getDeviceResponse").pyclass

IUSBDeviceStateChangedEvent_getAttachedRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceStateChangedEvent_getAttached").pyclass

IUSBDeviceStateChangedEvent_getAttachedResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceStateChangedEvent_getAttachedResponse").pyclass

IUSBDeviceStateChangedEvent_getErrorRequestMsg = GED("http://www.virtualbox.org/", "IUSBDeviceStateChangedEvent_getError").pyclass

IUSBDeviceStateChangedEvent_getErrorResultMsg = GED("http://www.virtualbox.org/", "IUSBDeviceStateChangedEvent_getErrorResponse").pyclass

ISharedFolderChangedEvent_getScopeRequestMsg = GED("http://www.virtualbox.org/", "ISharedFolderChangedEvent_getScope").pyclass

ISharedFolderChangedEvent_getScopeResultMsg = GED("http://www.virtualbox.org/", "ISharedFolderChangedEvent_getScopeResponse").pyclass

IRuntimeErrorEvent_getFatalRequestMsg = GED("http://www.virtualbox.org/", "IRuntimeErrorEvent_getFatal").pyclass

IRuntimeErrorEvent_getFatalResultMsg = GED("http://www.virtualbox.org/", "IRuntimeErrorEvent_getFatalResponse").pyclass

IRuntimeErrorEvent_getIdRequestMsg = GED("http://www.virtualbox.org/", "IRuntimeErrorEvent_getId").pyclass

IRuntimeErrorEvent_getIdResultMsg = GED("http://www.virtualbox.org/", "IRuntimeErrorEvent_getIdResponse").pyclass

IRuntimeErrorEvent_getMessageRequestMsg = GED("http://www.virtualbox.org/", "IRuntimeErrorEvent_getMessage").pyclass

IRuntimeErrorEvent_getMessageResultMsg = GED("http://www.virtualbox.org/", "IRuntimeErrorEvent_getMessageResponse").pyclass

IEventSourceChangedEvent_getListenerRequestMsg = GED("http://www.virtualbox.org/", "IEventSourceChangedEvent_getListener").pyclass

IEventSourceChangedEvent_getListenerResultMsg = GED("http://www.virtualbox.org/", "IEventSourceChangedEvent_getListenerResponse").pyclass

IEventSourceChangedEvent_getAddRequestMsg = GED("http://www.virtualbox.org/", "IEventSourceChangedEvent_getAdd").pyclass

IEventSourceChangedEvent_getAddResultMsg = GED("http://www.virtualbox.org/", "IEventSourceChangedEvent_getAddResponse").pyclass

IExtraDataChangedEvent_getMachineIdRequestMsg = GED("http://www.virtualbox.org/", "IExtraDataChangedEvent_getMachineId").pyclass

IExtraDataChangedEvent_getMachineIdResultMsg = GED("http://www.virtualbox.org/", "IExtraDataChangedEvent_getMachineIdResponse").pyclass

IExtraDataChangedEvent_getKeyRequestMsg = GED("http://www.virtualbox.org/", "IExtraDataChangedEvent_getKey").pyclass

IExtraDataChangedEvent_getKeyResultMsg = GED("http://www.virtualbox.org/", "IExtraDataChangedEvent_getKeyResponse").pyclass

IExtraDataChangedEvent_getValueRequestMsg = GED("http://www.virtualbox.org/", "IExtraDataChangedEvent_getValue").pyclass

IExtraDataChangedEvent_getValueResultMsg = GED("http://www.virtualbox.org/", "IExtraDataChangedEvent_getValueResponse").pyclass

IVetoEvent_addVetoRequestMsg = GED("http://www.virtualbox.org/", "IVetoEvent_addVeto").pyclass

IVetoEvent_addVetoResultMsg = GED("http://www.virtualbox.org/", "IVetoEvent_addVetoResponse").pyclass

IVetoEvent_isVetoedRequestMsg = GED("http://www.virtualbox.org/", "IVetoEvent_isVetoed").pyclass

IVetoEvent_isVetoedResultMsg = GED("http://www.virtualbox.org/", "IVetoEvent_isVetoedResponse").pyclass

IVetoEvent_getVetosRequestMsg = GED("http://www.virtualbox.org/", "IVetoEvent_getVetos").pyclass

IVetoEvent_getVetosResultMsg = GED("http://www.virtualbox.org/", "IVetoEvent_getVetosResponse").pyclass

IExtraDataCanChangeEvent_getMachineIdRequestMsg = GED("http://www.virtualbox.org/", "IExtraDataCanChangeEvent_getMachineId").pyclass

IExtraDataCanChangeEvent_getMachineIdResultMsg = GED("http://www.virtualbox.org/", "IExtraDataCanChangeEvent_getMachineIdResponse").pyclass

IExtraDataCanChangeEvent_getKeyRequestMsg = GED("http://www.virtualbox.org/", "IExtraDataCanChangeEvent_getKey").pyclass

IExtraDataCanChangeEvent_getKeyResultMsg = GED("http://www.virtualbox.org/", "IExtraDataCanChangeEvent_getKeyResponse").pyclass

IExtraDataCanChangeEvent_getValueRequestMsg = GED("http://www.virtualbox.org/", "IExtraDataCanChangeEvent_getValue").pyclass

IExtraDataCanChangeEvent_getValueResultMsg = GED("http://www.virtualbox.org/", "IExtraDataCanChangeEvent_getValueResponse").pyclass

IShowWindowEvent_getWinIdRequestMsg = GED("http://www.virtualbox.org/", "IShowWindowEvent_getWinId").pyclass

IShowWindowEvent_getWinIdResultMsg = GED("http://www.virtualbox.org/", "IShowWindowEvent_getWinIdResponse").pyclass

IShowWindowEvent_setWinIdRequestMsg = GED("http://www.virtualbox.org/", "IShowWindowEvent_setWinId").pyclass

IShowWindowEvent_setWinIdResultMsg = GED("http://www.virtualbox.org/", "IShowWindowEvent_setWinIdResponse").pyclass

INATRedirectEvent_getSlotRequestMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getSlot").pyclass

INATRedirectEvent_getSlotResultMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getSlotResponse").pyclass

INATRedirectEvent_getRemoveRequestMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getRemove").pyclass

INATRedirectEvent_getRemoveResultMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getRemoveResponse").pyclass

INATRedirectEvent_getNameRequestMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getName").pyclass

INATRedirectEvent_getNameResultMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getNameResponse").pyclass

INATRedirectEvent_getProtoRequestMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getProto").pyclass

INATRedirectEvent_getProtoResultMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getProtoResponse").pyclass

INATRedirectEvent_getHostIpRequestMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getHostIp").pyclass

INATRedirectEvent_getHostIpResultMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getHostIpResponse").pyclass

INATRedirectEvent_getHostPortRequestMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getHostPort").pyclass

INATRedirectEvent_getHostPortResultMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getHostPortResponse").pyclass

INATRedirectEvent_getGuestIpRequestMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getGuestIp").pyclass

INATRedirectEvent_getGuestIpResultMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getGuestIpResponse").pyclass

INATRedirectEvent_getGuestPortRequestMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getGuestPort").pyclass

INATRedirectEvent_getGuestPortResultMsg = GED("http://www.virtualbox.org/", "INATRedirectEvent_getGuestPortResponse").pyclass

IHostPciDevicePlugEvent_getPluggedRequestMsg = GED("http://www.virtualbox.org/", "IHostPciDevicePlugEvent_getPlugged").pyclass

IHostPciDevicePlugEvent_getPluggedResultMsg = GED("http://www.virtualbox.org/", "IHostPciDevicePlugEvent_getPluggedResponse").pyclass

IHostPciDevicePlugEvent_getSuccessRequestMsg = GED("http://www.virtualbox.org/", "IHostPciDevicePlugEvent_getSuccess").pyclass

IHostPciDevicePlugEvent_getSuccessResultMsg = GED("http://www.virtualbox.org/", "IHostPciDevicePlugEvent_getSuccessResponse").pyclass

IHostPciDevicePlugEvent_getAttachmentRequestMsg = GED("http://www.virtualbox.org/", "IHostPciDevicePlugEvent_getAttachment").pyclass

IHostPciDevicePlugEvent_getAttachmentResultMsg = GED("http://www.virtualbox.org/", "IHostPciDevicePlugEvent_getAttachmentResponse").pyclass

IHostPciDevicePlugEvent_getMessageRequestMsg = GED("http://www.virtualbox.org/", "IHostPciDevicePlugEvent_getMessage").pyclass

IHostPciDevicePlugEvent_getMessageResultMsg = GED("http://www.virtualbox.org/", "IHostPciDevicePlugEvent_getMessageResponse").pyclass

IVBoxSVCAvailabilityChangedEvent_getAvailableRequestMsg = GED("http://www.virtualbox.org/", "IVBoxSVCAvailabilityChangedEvent_getAvailable").pyclass

IVBoxSVCAvailabilityChangedEvent_getAvailableResultMsg = GED("http://www.virtualbox.org/", "IVBoxSVCAvailabilityChangedEvent_getAvailableResponse").pyclass

IBandwidthGroupChangedEvent_getBandwidthGroupRequestMsg = GED("http://www.virtualbox.org/", "IBandwidthGroupChangedEvent_getBandwidthGroup").pyclass

IBandwidthGroupChangedEvent_getBandwidthGroupResultMsg = GED("http://www.virtualbox.org/", "IBandwidthGroupChangedEvent_getBandwidthGroupResponse").pyclass

IGuestMonitorChangedEvent_getChangeTypeRequestMsg = GED("http://www.virtualbox.org/", "IGuestMonitorChangedEvent_getChangeType").pyclass

IGuestMonitorChangedEvent_getChangeTypeResultMsg = GED("http://www.virtualbox.org/", "IGuestMonitorChangedEvent_getChangeTypeResponse").pyclass

IGuestMonitorChangedEvent_getScreenIdRequestMsg = GED("http://www.virtualbox.org/", "IGuestMonitorChangedEvent_getScreenId").pyclass

IGuestMonitorChangedEvent_getScreenIdResultMsg = GED("http://www.virtualbox.org/", "IGuestMonitorChangedEvent_getScreenIdResponse").pyclass

IGuestMonitorChangedEvent_getOriginXRequestMsg = GED("http://www.virtualbox.org/", "IGuestMonitorChangedEvent_getOriginX").pyclass

IGuestMonitorChangedEvent_getOriginXResultMsg = GED("http://www.virtualbox.org/", "IGuestMonitorChangedEvent_getOriginXResponse").pyclass

IGuestMonitorChangedEvent_getOriginYRequestMsg = GED("http://www.virtualbox.org/", "IGuestMonitorChangedEvent_getOriginY").pyclass

IGuestMonitorChangedEvent_getOriginYResultMsg = GED("http://www.virtualbox.org/", "IGuestMonitorChangedEvent_getOriginYResponse").pyclass

IGuestMonitorChangedEvent_getWidthRequestMsg = GED("http://www.virtualbox.org/", "IGuestMonitorChangedEvent_getWidth").pyclass

IGuestMonitorChangedEvent_getWidthResultMsg = GED("http://www.virtualbox.org/", "IGuestMonitorChangedEvent_getWidthResponse").pyclass

IGuestMonitorChangedEvent_getHeightRequestMsg = GED("http://www.virtualbox.org/", "IGuestMonitorChangedEvent_getHeight").pyclass

IGuestMonitorChangedEvent_getHeightResultMsg = GED("http://www.virtualbox.org/", "IGuestMonitorChangedEvent_getHeightResponse").pyclass

IStorageDeviceChangedEvent_getStorageDeviceRequestMsg = GED("http://www.virtualbox.org/", "IStorageDeviceChangedEvent_getStorageDevice").pyclass

IStorageDeviceChangedEvent_getStorageDeviceResultMsg = GED("http://www.virtualbox.org/", "IStorageDeviceChangedEvent_getStorageDeviceResponse").pyclass

IStorageDeviceChangedEvent_getRemovedRequestMsg = GED("http://www.virtualbox.org/", "IStorageDeviceChangedEvent_getRemoved").pyclass

IStorageDeviceChangedEvent_getRemovedResultMsg = GED("http://www.virtualbox.org/", "IStorageDeviceChangedEvent_getRemovedResponse").pyclass
